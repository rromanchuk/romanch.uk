<<<<<<< HEAD:personal/vendor/javascript/three--examples--jsm--loaders--RGBELoader.js.js
=======
// three/examples/jsm/loaders/RGBELoader.js@0.172.0 downloaded from https://ga.jspm.io/npm:three@0.172.0/examples/jsm/loaders/RGBELoader.js

>>>>>>> dev:vendor/javascript/three--examples--jsm--loaders--RGBELoader.js.js
import{DataTextureLoader as t,HalfFloatType as e,DataUtils as r,FloatType as a,LinearSRGBColorSpace as n,LinearFilter as o}from"three";class RGBELoader extends t{constructor(t){super(t);this.type=e}parse(t){const n=1,o=2,s=3,i=4,rgbe_error=function(t,e){switch(t){case n:throw new Error("THREE.RGBELoader: Read Error: "+(e||""));case o:throw new Error("THREE.RGBELoader: Write Error: "+(e||""));case s:throw new Error("THREE.RGBELoader: Bad File Format: "+(e||""));default:case i:throw new Error("THREE.RGBELoader: Memory Error: "+(e||""))}},l=1,c=2,h=4,d="\n",fgets=function(t,e,r){const a=128;e=e||1024;let n=t.pos,o=-1,s=0,i="",l=String.fromCharCode.apply(null,new Uint16Array(t.subarray(n,n+a)));while(0>(o=l.indexOf(d))&&s<e&&n<t.byteLength){i+=l;s+=l.length;n+=a;l+=String.fromCharCode.apply(null,new Uint16Array(t.subarray(n,n+a)))}if(-1<o){false!==r&&(t.pos+=s+o+1);return i+l.slice(0,o)}return false},RGBE_ReadHeader=function(t){const e=/^#\?(\S+)/,r=/^\s*GAMMA\s*=\s*(\d+(\.\d+)?)\s*$/,a=/^\s*EXPOSURE\s*=\s*(\d+(\.\d+)?)\s*$/,o=/^\s*FORMAT=(\S+)\s*$/,i=/^\s*\-Y\s+(\d+)\s+\+X\s+(\d+)\s*$/,d={valid:0,string:"",comments:"",programtype:"RGBE",format:"",gamma:1,exposure:1,width:0,height:0};let p,f;(t.pos>=t.byteLength||!(p=fgets(t)))&&rgbe_error(n,"no header found");(f=p.match(e))||rgbe_error(s,"bad initial token");d.valid|=l;d.programtype=f[1];d.string+=p+"\n";while(true){p=fgets(t);if(false===p)break;d.string+=p+"\n";if("#"!==p.charAt(0)){(f=p.match(r))&&(d.gamma=parseFloat(f[1]));(f=p.match(a))&&(d.exposure=parseFloat(f[1]));if(f=p.match(o)){d.valid|=c;d.format=f[1]}if(f=p.match(i)){d.valid|=h;d.height=parseInt(f[1],10);d.width=parseInt(f[2],10)}if(d.valid&c&&d.valid&h)break}else d.comments+=p+"\n"}d.valid&c||rgbe_error(s,"missing format specifier");d.valid&h||rgbe_error(s,"missing image size specifier");return d},RGBE_ReadPixels_RLE=function(t,e,r){const a=e;if(a<8||a>32767||2!==t[0]||2!==t[1]||t[2]&128)return new Uint8Array(t);a!==(t[2]<<8|t[3])&&rgbe_error(s,"wrong scanline width");const o=new Uint8Array(4*e*r);o.length||rgbe_error(i,"unable to allocate buffer space");let l=0,c=0;const h=4*a;const d=new Uint8Array(4);const p=new Uint8Array(h);let f=r;while(f>0&&c<t.byteLength){c+4>t.byteLength&&rgbe_error(n);d[0]=t[c++];d[1]=t[c++];d[2]=t[c++];d[3]=t[c++];2==d[0]&&2==d[1]&&(d[2]<<8|d[3])==a||rgbe_error(s,"bad rgbe scanline format");let e,r=0;while(r<h&&c<t.byteLength){e=t[c++];const a=e>128;a&&(e-=128);(0===e||r+e>h)&&rgbe_error(s,"bad scanline data");if(a){const a=t[c++];for(let t=0;t<e;t++)p[r++]=a}else{p.set(t.subarray(c,c+e),r);r+=e;c+=e}}const i=a;for(let t=0;t<i;t++){let e=0;o[l]=p[t+e];e+=a;o[l+1]=p[t+e];e+=a;o[l+2]=p[t+e];e+=a;o[l+3]=p[t+e];l+=4}f--}return o};const RGBEByteToRGBFloat=function(t,e,r,a){const n=t[e+3];const o=Math.pow(2,n-128)/255;r[a+0]=t[e+0]*o;r[a+1]=t[e+1]*o;r[a+2]=t[e+2]*o;r[a+3]=1};const RGBEByteToRGBHalf=function(t,e,a,n){const o=t[e+3];const s=Math.pow(2,o-128)/255;a[n+0]=r.toHalfFloat(Math.min(t[e+0]*s,65504));a[n+1]=r.toHalfFloat(Math.min(t[e+1]*s,65504));a[n+2]=r.toHalfFloat(Math.min(t[e+2]*s,65504));a[n+3]=r.toHalfFloat(1)};const p=new Uint8Array(t);p.pos=0;const f=RGBE_ReadHeader(p);const m=f.width,u=f.height,w=RGBE_ReadPixels_RLE(p.subarray(p.pos),m,u);let g,y;let E;switch(this.type){case a:E=w.length/4;const t=new Float32Array(E*4);for(let e=0;e<E;e++)RGBEByteToRGBFloat(w,e*4,t,e*4);g=t;y=a;break;case e:E=w.length/4;const r=new Uint16Array(E*4);for(let t=0;t<E;t++)RGBEByteToRGBHalf(w,t*4,r,t*4);g=r;y=e;break;default:throw new Error("THREE.RGBELoader: Unsupported type: "+this.type)}return{width:m,height:u,data:g,header:f.string,gamma:f.gamma,exposure:f.exposure,type:y}}setDataType(t){this.type=t;return this}load(t,r,s,i){function onLoadCallback(t,s){switch(t.type){case a:case e:t.colorSpace=n;t.minFilter=o;t.magFilter=o;t.generateMipmaps=false;t.flipY=true;break}r&&r(t,s)}return super.load(t,onLoadCallback,s,i)}}export{RGBELoader};

