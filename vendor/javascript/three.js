// three@0.172.0 downloaded from https://ga.jspm.io/npm:three@0.172.0/build/three.module.js

import{C as a,M as i,V as o,fB as s,a as l,an as c,c as f,ax as v,z as E,y as S,eT as T,fC as M,B as x,f as b,S as R,eu as C,aF as L,fD as U,j as y,aw as N,ah as O,ad as F,F as B,ae as G,K as V,k as W,Q as k,l as z,x as X,aj as j,G as Y,ap as q,av as K,N as Z,Z as Q,ak as J,am as te,fw as ne,v as re,c2 as ae,fE as ie,a7 as oe,a8 as se,b as le,o as ue,a0 as pe,q as me,dt as he,J as ge,bZ as _e,eb as ve,dq as Ee,cx as Se,cw as Te,cv as Me,cu as xe,ct as be,cs as Re,aE as Ae,es as Ce,ar as Le,R as Ue,X as Pe,Y as ye,dK as De,e1 as we,O as Ie,T as Ne,s as Oe,a9 as Fe,fF as Be,aC as Ge,ej as Ve,eI as He,ek as We,bV as ke,bh as ze,bg as Xe,bf as je,bb as Ye,bd as qe,ba as Ke,be as Ze,bc as $e,b4 as Qe,aR as Je,aS as tt,aT as nt,ck as rt,cj as it,aU as ot,aV as st,aW as lt,aX as ct,aY as ut,aZ as dt,a_ as pt,a$ as mt,b0 as ht,b1 as gt,b2 as _t,dg as vt,er as Et,df as St,eq as Tt,b6 as Mt,b7 as xt,b8 as bt,b9 as Rt,b3 as At,b5 as Ct,fG as Lt,U as Ut,ac as Pt,aM as yt,bS as Dt,bT as wt,bU as It,bW as Nt,az as Ot,ay as Ft,L as Bt,bX as Gt,bY as Vt,aq as Ht,b_ as Wt,b$ as kt,c0 as zt,c1 as Xt,i as jt,aa as Yt,fH as qt,ab as Kt,bi as Zt,bj as $t,bk as Qt,aN as Jt,aO as tn,bl as nn,aK as rn,bm as an,bn as on,aH as sn,aG as ln,as as un,aI as pn,aL as mn,bo as hn,bp as gn,bq as _n,br as vn,bs as En,bt as Sn,bu as Tn,bv as Mn,bw as xn,bx as bn,by as Rn,bz as An,bA as Cn,bB as Ln,bC as Un,bD as Pn,bE as yn,bF as Dn,bG as wn,bH as In,bI as Nn,bJ as On,bK as Fn,bL as Bn,bM as Gn,bN as Vn,eK as Hn,eL as Wn,bO as kn,bP as zn,bQ as Xn,bR as jn,cy as Yn,E as qn,cL as Kn,fI as Zn,aQ as $n,aD as Qn,aB as Jn,fJ as er,fK as tr,fL as nr,W as rr}from"../_/0HA7BJPB.js";export{cD as AdditiveAnimationBlendMode,c9 as AlwaysStencilFunc,cp as AmbientLight,cE as AnimationAction,cF as AnimationClip,cG as AnimationLoader,cH as AnimationMixer,cI as AnimationObjectGroup,cJ as AnimationUtils,cK as ArcCurve,cM as ArrowHelper,cN as AttachedBindMode,cO as Audio,cP as AudioAnalyser,cQ as AudioContext,cR as AudioListener,cS as AudioLoader,cT as AxesHelper,cU as BasicDepthPacking,at as BasicShadowMap,cV as BatchedMesh,cW as Bone,cX as BooleanKeyframeTrack,cY as Box2,cZ as Box3,c_ as Box3Helper,c$ as BoxHelper,d0 as BufferGeometryLoader,d1 as Cache,d2 as Camera,d3 as CameraHelper,d4 as CanvasTexture,d5 as CapsuleGeometry,d6 as CatmullRomCurve3,d7 as CircleGeometry,d8 as Clock,d9 as ColorKeyframeTrack,da as CompressedArrayTexture,db as CompressedCubeTexture,dc as CompressedTexture,dd as CompressedTextureLoader,de as ConeGeometry,dh as Controls,H as CubeCamera,di as CubeTextureLoader,dj as CubicBezierCurve,dk as CubicBezierCurve3,dl as CubicInterpolant,dm as CullFaceFrontBack,dn as Curve,dp as CurvePath,dr as CylinderGeometry,ds as Cylindrical,aP as DataTexture,du as DataTextureLoader,dv as DataUtils,cd as DecrementStencilOp,cb as DecrementWrapStencilOp,dw as DefaultLoadingManager,dx as DetachedBindMode,cn as DirectionalLight,dy as DirectionalLightHelper,dz as DiscreteInterpolant,dA as DodecahedronGeometry,dB as DynamicCopyUsage,D as DynamicDrawUsage,dC as DynamicReadUsage,dD as EdgesGeometry,dE as EllipseCurve,c6 as EqualStencilFunc,dF as ExtrudeGeometry,cA as FileLoader,aA as Float16BufferAttribute,al as Float32BufferAttribute,dG as Fog,dH as FogExp2,p as FramebufferTexture,dI as GLBufferAttribute,dJ as GLSL1,c5 as GreaterEqualStencilFunc,c4 as GreaterStencilFunc,dL as GridHelper,cq as HemisphereLight,dM as HemisphereLightHelper,dN as IcosahedronGeometry,dO as ImageBitmapLoader,dP as ImageLoader,dQ as ImageUtils,ce as IncrementStencilOp,cc as IncrementWrapStencilOp,n as InstancedBufferAttribute,dR as InstancedBufferGeometry,m as InstancedInterleavedBuffer,dS as InstancedMesh,dT as Int16BufferAttribute,dU as Int32BufferAttribute,dV as Int8BufferAttribute,I as InterleavedBuffer,h as InterleavedBufferAttribute,dW as Interpolant,dX as InterpolateDiscrete,dY as InterpolateLinear,dZ as InterpolateSmooth,cf as InvertStencilOp,ci as KeepStencilOp,d_ as KeyframeTrack,d$ as LOD,e0 as LatheGeometry,c7 as LessEqualStencilFunc,c8 as LessStencilFunc,e2 as Light,cr as LightProbe,e3 as Line,e4 as Line3,t as LineBasicMaterial,e5 as LineCurve,e6 as LineCurve3,u as LineDashedMaterial,e7 as LineLoop,e8 as LineSegments,e9 as LinearInterpolant,ai as LinearMipMapLinearFilter,ea as LinearMipMapNearestFilter,cz as Loader,ec as LoaderUtils,ed as LoadingManager,ee as LoopOnce,ef as LoopPingPong,eg as LoopRepeat,eh as MOUSE,r as Material,cB as MaterialLoader,d as MathUtils,ei as Matrix2,_ as MeshLambertMaterial,a4 as MeshMatcapMaterial,w as MeshNormalMaterial,$ as MeshPhongMaterial,a2 as MeshPhysicalMaterial,a1 as MeshStandardMaterial,a3 as MeshToonMaterial,el as NearestMipMapLinearFilter,em as NearestMipMapNearestFilter,ca as NeverStencilFunc,en as NormalAnimationBlendMode,c3 as NotEqualStencilFunc,eo as NumberKeyframeTrack,ag as Object3D,cC as ObjectLoader,ep as OctahedronGeometry,et as Path,ev as PlaneHelper,cm as PointLight,ew as PointLightHelper,ex as Points,P as PointsMaterial,ey as PolarGridHelper,ez as PolyhedronGeometry,eA as PositionalAudio,eB as PropertyBinding,eC as PropertyMixer,eD as QuadraticBezierCurve,eE as QuadraticBezierCurve3,eF as Quaternion,eG as QuaternionKeyframeTrack,eH as QuaternionLinearInterpolant,eJ as RGBDepthPacking,aJ as RGBIntegerFormat,eM as RGDepthPacking,eN as RawShaderMaterial,eO as Ray,eP as Raycaster,co as RectAreaLight,af as RenderTarget,eQ as RenderTarget3D,eR as RenderTargetArray,cg as ReplaceStencilOp,eS as RingGeometry,A as Scene,a6 as ShadowMaterial,eU as Shape,eV as ShapeGeometry,eW as ShapePath,eX as ShapeUtils,eY as Skeleton,eZ as SkeletonHelper,e_ as SkinnedMesh,e$ as Source,f0 as Sphere,au as SphereGeometry,f1 as Spherical,f2 as SphericalHarmonics3,f3 as SplineCurve,cl as SpotLight,f4 as SpotLightHelper,f5 as Sprite,a5 as SpriteMaterial,f6 as StaticCopyUsage,g as StaticDrawUsage,f7 as StaticReadUsage,f8 as StereoCamera,f9 as StreamCopyUsage,fa as StreamDrawUsage,fb as StreamReadUsage,fc as StringKeyframeTrack,fd as TOUCH,fe as TetrahedronGeometry,ff as TextureLoader,fg as TextureUtils,fh as TorusGeometry,fi as TorusKnotGeometry,fj as Triangle,fk as TriangleFanDrawMode,fl as TriangleStripDrawMode,fm as TrianglesDrawMode,fn as TubeGeometry,ao as UVMapping,fo as Uint8BufferAttribute,fp as Uint8ClampedBufferAttribute,fq as Uniform,fr as UniformsGroup,fs as VectorKeyframeTrack,ft as VideoTexture,fu as WebGL3DRenderTarget,fv as WebGLArrayRenderTarget,e as WebGPUCoordinateSystem,fx as WireframeGeometry,fy as WrapAroundEnding,fz as ZeroCurvatureEnding,fA as ZeroSlopeEnding,ch as ZeroStencilOp}from"../_/0HA7BJPB.js";
/**
 * @license
 * Copyright 2010-2024 Three.js Authors
 * SPDX-License-Identifier: MIT
 */function WebGLAnimation(){let e=null;let t=false;let n=null;let r=null;function onAnimationFrame(t,a){n(t,a);r=e.requestAnimationFrame(onAnimationFrame)}return{start:function(){if(t!==true&&n!==null){r=e.requestAnimationFrame(onAnimationFrame);t=true}},stop:function(){e.cancelAnimationFrame(r);t=false},setAnimationLoop:function(e){n=e},setContext:function(t){e=t}}}function WebGLAttributes(e){const t=new WeakMap;function createBuffer(t,n){const r=t.array;const a=t.usage;const i=r.byteLength;const o=e.createBuffer();e.bindBuffer(n,o);e.bufferData(n,r,a);t.onUploadCallback();let s;if(r instanceof Float32Array)s=e.FLOAT;else if(r instanceof Uint16Array)s=t.isFloat16BufferAttribute?e.HALF_FLOAT:e.UNSIGNED_SHORT;else if(r instanceof Int16Array)s=e.SHORT;else if(r instanceof Uint32Array)s=e.UNSIGNED_INT;else if(r instanceof Int32Array)s=e.INT;else if(r instanceof Int8Array)s=e.BYTE;else if(r instanceof Uint8Array)s=e.UNSIGNED_BYTE;else{if(!(r instanceof Uint8ClampedArray))throw new Error("THREE.WebGLAttributes: Unsupported buffer data format: "+r);s=e.UNSIGNED_BYTE}return{buffer:o,type:s,bytesPerElement:r.BYTES_PER_ELEMENT,version:t.version,size:i}}function updateBuffer(t,n,r){const a=n.array;const i=n.updateRanges;e.bindBuffer(r,t);if(i.length===0)e.bufferSubData(r,0,a);else{i.sort(((e,t)=>e.start-t.start));let t=0;for(let e=1;e<i.length;e++){const n=i[t];const r=i[e];if(r.start<=n.start+n.count+1)n.count=Math.max(n.count,r.start+r.count-n.start);else{++t;i[t]=r}}i.length=t+1;for(let t=0,n=i.length;t<n;t++){const n=i[t];e.bufferSubData(r,n.start*a.BYTES_PER_ELEMENT,a,n.start,n.count)}n.clearUpdateRanges()}n.onUploadCallback()}function get(e){e.isInterleavedBufferAttribute&&(e=e.data);return t.get(e)}function remove(n){n.isInterleavedBufferAttribute&&(n=n.data);const r=t.get(n);if(r){e.deleteBuffer(r.buffer);t.delete(n)}}function update(e,n){e.isInterleavedBufferAttribute&&(e=e.data);if(e.isGLBufferAttribute){const n=t.get(e);(!n||n.version<e.version)&&t.set(e,{buffer:e.buffer,type:e.type,bytesPerElement:e.elementSize,version:e.version});return}const r=t.get(e);if(r===void 0)t.set(e,createBuffer(e,n));else if(r.version<e.version){if(r.size!==e.array.byteLength)throw new Error("THREE.WebGLAttributes: The size of the buffer attribute's array buffer does not match the original size. Resizing buffer attributes is not supported.");updateBuffer(r.buffer,e,n);r.version=e.version}}return{get:get,remove:remove,update:update}}var ar="#ifdef USE_ALPHAHASH\n\tif ( diffuseColor.a < getAlphaHashThreshold( vPosition ) ) discard;\n#endif";var ir="#ifdef USE_ALPHAHASH\n\tconst float ALPHA_HASH_SCALE = 0.05;\n\tfloat hash2D( vec2 value ) {\n\t\treturn fract( 1.0e4 * sin( 17.0 * value.x + 0.1 * value.y ) * ( 0.1 + abs( sin( 13.0 * value.y + value.x ) ) ) );\n\t}\n\tfloat hash3D( vec3 value ) {\n\t\treturn hash2D( vec2( hash2D( value.xy ), value.z ) );\n\t}\n\tfloat getAlphaHashThreshold( vec3 position ) {\n\t\tfloat maxDeriv = max(\n\t\t\tlength( dFdx( position.xyz ) ),\n\t\t\tlength( dFdy( position.xyz ) )\n\t\t);\n\t\tfloat pixScale = 1.0 / ( ALPHA_HASH_SCALE * maxDeriv );\n\t\tvec2 pixScales = vec2(\n\t\t\texp2( floor( log2( pixScale ) ) ),\n\t\t\texp2( ceil( log2( pixScale ) ) )\n\t\t);\n\t\tvec2 alpha = vec2(\n\t\t\thash3D( floor( pixScales.x * position.xyz ) ),\n\t\t\thash3D( floor( pixScales.y * position.xyz ) )\n\t\t);\n\t\tfloat lerpFactor = fract( log2( pixScale ) );\n\t\tfloat x = ( 1.0 - lerpFactor ) * alpha.x + lerpFactor * alpha.y;\n\t\tfloat a = min( lerpFactor, 1.0 - lerpFactor );\n\t\tvec3 cases = vec3(\n\t\t\tx * x / ( 2.0 * a * ( 1.0 - a ) ),\n\t\t\t( x - 0.5 * a ) / ( 1.0 - a ),\n\t\t\t1.0 - ( ( 1.0 - x ) * ( 1.0 - x ) / ( 2.0 * a * ( 1.0 - a ) ) )\n\t\t);\n\t\tfloat threshold = ( x < ( 1.0 - a ) )\n\t\t\t? ( ( x < a ) ? cases.x : cases.y )\n\t\t\t: cases.z;\n\t\treturn clamp( threshold , 1.0e-6, 1.0 );\n\t}\n#endif";var or="#ifdef USE_ALPHAMAP\n\tdiffuseColor.a *= texture2D( alphaMap, vAlphaMapUv ).g;\n#endif";var sr="#ifdef USE_ALPHAMAP\n\tuniform sampler2D alphaMap;\n#endif";var lr="#ifdef USE_ALPHATEST\n\t#ifdef ALPHA_TO_COVERAGE\n\tdiffuseColor.a = smoothstep( alphaTest, alphaTest + fwidth( diffuseColor.a ), diffuseColor.a );\n\tif ( diffuseColor.a == 0.0 ) discard;\n\t#else\n\tif ( diffuseColor.a < alphaTest ) discard;\n\t#endif\n#endif";var ur="#ifdef USE_ALPHATEST\n\tuniform float alphaTest;\n#endif";var pr="#ifdef USE_AOMAP\n\tfloat ambientOcclusion = ( texture2D( aoMap, vAoMapUv ).r - 1.0 ) * aoMapIntensity + 1.0;\n\treflectedLight.indirectDiffuse *= ambientOcclusion;\n\t#if defined( USE_CLEARCOAT ) \n\t\tclearcoatSpecularIndirect *= ambientOcclusion;\n\t#endif\n\t#if defined( USE_SHEEN ) \n\t\tsheenSpecularIndirect *= ambientOcclusion;\n\t#endif\n\t#if defined( USE_ENVMAP ) && defined( STANDARD )\n\t\tfloat dotNV = saturate( dot( geometryNormal, geometryViewDir ) );\n\t\treflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.roughness );\n\t#endif\n#endif";var mr="#ifdef USE_AOMAP\n\tuniform sampler2D aoMap;\n\tuniform float aoMapIntensity;\n#endif";var hr="#ifdef USE_BATCHING\n\t#if ! defined( GL_ANGLE_multi_draw )\n\t#define gl_DrawID _gl_DrawID\n\tuniform int _gl_DrawID;\n\t#endif\n\tuniform highp sampler2D batchingTexture;\n\tuniform highp usampler2D batchingIdTexture;\n\tmat4 getBatchingMatrix( const in float i ) {\n\t\tint size = textureSize( batchingTexture, 0 ).x;\n\t\tint j = int( i ) * 4;\n\t\tint x = j % size;\n\t\tint y = j / size;\n\t\tvec4 v1 = texelFetch( batchingTexture, ivec2( x, y ), 0 );\n\t\tvec4 v2 = texelFetch( batchingTexture, ivec2( x + 1, y ), 0 );\n\t\tvec4 v3 = texelFetch( batchingTexture, ivec2( x + 2, y ), 0 );\n\t\tvec4 v4 = texelFetch( batchingTexture, ivec2( x + 3, y ), 0 );\n\t\treturn mat4( v1, v2, v3, v4 );\n\t}\n\tfloat getIndirectIndex( const in int i ) {\n\t\tint size = textureSize( batchingIdTexture, 0 ).x;\n\t\tint x = i % size;\n\t\tint y = i / size;\n\t\treturn float( texelFetch( batchingIdTexture, ivec2( x, y ), 0 ).r );\n\t}\n#endif\n#ifdef USE_BATCHING_COLOR\n\tuniform sampler2D batchingColorTexture;\n\tvec3 getBatchingColor( const in float i ) {\n\t\tint size = textureSize( batchingColorTexture, 0 ).x;\n\t\tint j = int( i );\n\t\tint x = j % size;\n\t\tint y = j / size;\n\t\treturn texelFetch( batchingColorTexture, ivec2( x, y ), 0 ).rgb;\n\t}\n#endif";var gr="#ifdef USE_BATCHING\n\tmat4 batchingMatrix = getBatchingMatrix( getIndirectIndex( gl_DrawID ) );\n#endif";var _r="vec3 transformed = vec3( position );\n#ifdef USE_ALPHAHASH\n\tvPosition = vec3( position );\n#endif";var vr="vec3 objectNormal = vec3( normal );\n#ifdef USE_TANGENT\n\tvec3 objectTangent = vec3( tangent.xyz );\n#endif";var Er="float G_BlinnPhong_Implicit( ) {\n\treturn 0.25;\n}\nfloat D_BlinnPhong( const in float shininess, const in float dotNH ) {\n\treturn RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );\n}\nvec3 BRDF_BlinnPhong( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in vec3 specularColor, const in float shininess ) {\n\tvec3 halfDir = normalize( lightDir + viewDir );\n\tfloat dotNH = saturate( dot( normal, halfDir ) );\n\tfloat dotVH = saturate( dot( viewDir, halfDir ) );\n\tvec3 F = F_Schlick( specularColor, 1.0, dotVH );\n\tfloat G = G_BlinnPhong_Implicit( );\n\tfloat D = D_BlinnPhong( shininess, dotNH );\n\treturn F * ( G * D );\n} // validated";var Sr="#ifdef USE_IRIDESCENCE\n\tconst mat3 XYZ_TO_REC709 = mat3(\n\t\t 3.2404542, -0.9692660,  0.0556434,\n\t\t-1.5371385,  1.8760108, -0.2040259,\n\t\t-0.4985314,  0.0415560,  1.0572252\n\t);\n\tvec3 Fresnel0ToIor( vec3 fresnel0 ) {\n\t\tvec3 sqrtF0 = sqrt( fresnel0 );\n\t\treturn ( vec3( 1.0 ) + sqrtF0 ) / ( vec3( 1.0 ) - sqrtF0 );\n\t}\n\tvec3 IorToFresnel0( vec3 transmittedIor, float incidentIor ) {\n\t\treturn pow2( ( transmittedIor - vec3( incidentIor ) ) / ( transmittedIor + vec3( incidentIor ) ) );\n\t}\n\tfloat IorToFresnel0( float transmittedIor, float incidentIor ) {\n\t\treturn pow2( ( transmittedIor - incidentIor ) / ( transmittedIor + incidentIor ));\n\t}\n\tvec3 evalSensitivity( float OPD, vec3 shift ) {\n\t\tfloat phase = 2.0 * PI * OPD * 1.0e-9;\n\t\tvec3 val = vec3( 5.4856e-13, 4.4201e-13, 5.2481e-13 );\n\t\tvec3 pos = vec3( 1.6810e+06, 1.7953e+06, 2.2084e+06 );\n\t\tvec3 var = vec3( 4.3278e+09, 9.3046e+09, 6.6121e+09 );\n\t\tvec3 xyz = val * sqrt( 2.0 * PI * var ) * cos( pos * phase + shift ) * exp( - pow2( phase ) * var );\n\t\txyz.x += 9.7470e-14 * sqrt( 2.0 * PI * 4.5282e+09 ) * cos( 2.2399e+06 * phase + shift[ 0 ] ) * exp( - 4.5282e+09 * pow2( phase ) );\n\t\txyz /= 1.0685e-7;\n\t\tvec3 rgb = XYZ_TO_REC709 * xyz;\n\t\treturn rgb;\n\t}\n\tvec3 evalIridescence( float outsideIOR, float eta2, float cosTheta1, float thinFilmThickness, vec3 baseF0 ) {\n\t\tvec3 I;\n\t\tfloat iridescenceIOR = mix( outsideIOR, eta2, smoothstep( 0.0, 0.03, thinFilmThickness ) );\n\t\tfloat sinTheta2Sq = pow2( outsideIOR / iridescenceIOR ) * ( 1.0 - pow2( cosTheta1 ) );\n\t\tfloat cosTheta2Sq = 1.0 - sinTheta2Sq;\n\t\tif ( cosTheta2Sq < 0.0 ) {\n\t\t\treturn vec3( 1.0 );\n\t\t}\n\t\tfloat cosTheta2 = sqrt( cosTheta2Sq );\n\t\tfloat R0 = IorToFresnel0( iridescenceIOR, outsideIOR );\n\t\tfloat R12 = F_Schlick( R0, 1.0, cosTheta1 );\n\t\tfloat T121 = 1.0 - R12;\n\t\tfloat phi12 = 0.0;\n\t\tif ( iridescenceIOR < outsideIOR ) phi12 = PI;\n\t\tfloat phi21 = PI - phi12;\n\t\tvec3 baseIOR = Fresnel0ToIor( clamp( baseF0, 0.0, 0.9999 ) );\t\tvec3 R1 = IorToFresnel0( baseIOR, iridescenceIOR );\n\t\tvec3 R23 = F_Schlick( R1, 1.0, cosTheta2 );\n\t\tvec3 phi23 = vec3( 0.0 );\n\t\tif ( baseIOR[ 0 ] < iridescenceIOR ) phi23[ 0 ] = PI;\n\t\tif ( baseIOR[ 1 ] < iridescenceIOR ) phi23[ 1 ] = PI;\n\t\tif ( baseIOR[ 2 ] < iridescenceIOR ) phi23[ 2 ] = PI;\n\t\tfloat OPD = 2.0 * iridescenceIOR * thinFilmThickness * cosTheta2;\n\t\tvec3 phi = vec3( phi21 ) + phi23;\n\t\tvec3 R123 = clamp( R12 * R23, 1e-5, 0.9999 );\n\t\tvec3 r123 = sqrt( R123 );\n\t\tvec3 Rs = pow2( T121 ) * R23 / ( vec3( 1.0 ) - R123 );\n\t\tvec3 C0 = R12 + Rs;\n\t\tI = C0;\n\t\tvec3 Cm = Rs - T121;\n\t\tfor ( int m = 1; m <= 2; ++ m ) {\n\t\t\tCm *= r123;\n\t\t\tvec3 Sm = 2.0 * evalSensitivity( float( m ) * OPD, float( m ) * phi );\n\t\t\tI += Cm * Sm;\n\t\t}\n\t\treturn max( I, vec3( 0.0 ) );\n\t}\n#endif";var Tr="#ifdef USE_BUMPMAP\n\tuniform sampler2D bumpMap;\n\tuniform float bumpScale;\n\tvec2 dHdxy_fwd() {\n\t\tvec2 dSTdx = dFdx( vBumpMapUv );\n\t\tvec2 dSTdy = dFdy( vBumpMapUv );\n\t\tfloat Hll = bumpScale * texture2D( bumpMap, vBumpMapUv ).x;\n\t\tfloat dBx = bumpScale * texture2D( bumpMap, vBumpMapUv + dSTdx ).x - Hll;\n\t\tfloat dBy = bumpScale * texture2D( bumpMap, vBumpMapUv + dSTdy ).x - Hll;\n\t\treturn vec2( dBx, dBy );\n\t}\n\tvec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy, float faceDirection ) {\n\t\tvec3 vSigmaX = normalize( dFdx( surf_pos.xyz ) );\n\t\tvec3 vSigmaY = normalize( dFdy( surf_pos.xyz ) );\n\t\tvec3 vN = surf_norm;\n\t\tvec3 R1 = cross( vSigmaY, vN );\n\t\tvec3 R2 = cross( vN, vSigmaX );\n\t\tfloat fDet = dot( vSigmaX, R1 ) * faceDirection;\n\t\tvec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );\n\t\treturn normalize( abs( fDet ) * surf_norm - vGrad );\n\t}\n#endif";var Mr="#if NUM_CLIPPING_PLANES > 0\n\tvec4 plane;\n\t#ifdef ALPHA_TO_COVERAGE\n\t\tfloat distanceToPlane, distanceGradient;\n\t\tfloat clipOpacity = 1.0;\n\t\t#pragma unroll_loop_start\n\t\tfor ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {\n\t\t\tplane = clippingPlanes[ i ];\n\t\t\tdistanceToPlane = - dot( vClipPosition, plane.xyz ) + plane.w;\n\t\t\tdistanceGradient = fwidth( distanceToPlane ) / 2.0;\n\t\t\tclipOpacity *= smoothstep( - distanceGradient, distanceGradient, distanceToPlane );\n\t\t\tif ( clipOpacity == 0.0 ) discard;\n\t\t}\n\t\t#pragma unroll_loop_end\n\t\t#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES\n\t\t\tfloat unionClipOpacity = 1.0;\n\t\t\t#pragma unroll_loop_start\n\t\t\tfor ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {\n\t\t\t\tplane = clippingPlanes[ i ];\n\t\t\t\tdistanceToPlane = - dot( vClipPosition, plane.xyz ) + plane.w;\n\t\t\t\tdistanceGradient = fwidth( distanceToPlane ) / 2.0;\n\t\t\t\tunionClipOpacity *= 1.0 - smoothstep( - distanceGradient, distanceGradient, distanceToPlane );\n\t\t\t}\n\t\t\t#pragma unroll_loop_end\n\t\t\tclipOpacity *= 1.0 - unionClipOpacity;\n\t\t#endif\n\t\tdiffuseColor.a *= clipOpacity;\n\t\tif ( diffuseColor.a == 0.0 ) discard;\n\t#else\n\t\t#pragma unroll_loop_start\n\t\tfor ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {\n\t\t\tplane = clippingPlanes[ i ];\n\t\t\tif ( dot( vClipPosition, plane.xyz ) > plane.w ) discard;\n\t\t}\n\t\t#pragma unroll_loop_end\n\t\t#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES\n\t\t\tbool clipped = true;\n\t\t\t#pragma unroll_loop_start\n\t\t\tfor ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {\n\t\t\t\tplane = clippingPlanes[ i ];\n\t\t\t\tclipped = ( dot( vClipPosition, plane.xyz ) > plane.w ) && clipped;\n\t\t\t}\n\t\t\t#pragma unroll_loop_end\n\t\t\tif ( clipped ) discard;\n\t\t#endif\n\t#endif\n#endif";var xr="#if NUM_CLIPPING_PLANES > 0\n\tvarying vec3 vClipPosition;\n\tuniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];\n#endif";var br="#if NUM_CLIPPING_PLANES > 0\n\tvarying vec3 vClipPosition;\n#endif";var Rr="#if NUM_CLIPPING_PLANES > 0\n\tvClipPosition = - mvPosition.xyz;\n#endif";var Ar="#if defined( USE_COLOR_ALPHA )\n\tdiffuseColor *= vColor;\n#elif defined( USE_COLOR )\n\tdiffuseColor.rgb *= vColor;\n#endif";var Cr="#if defined( USE_COLOR_ALPHA )\n\tvarying vec4 vColor;\n#elif defined( USE_COLOR )\n\tvarying vec3 vColor;\n#endif";var Lr="#if defined( USE_COLOR_ALPHA )\n\tvarying vec4 vColor;\n#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR ) || defined( USE_BATCHING_COLOR )\n\tvarying vec3 vColor;\n#endif";var Ur="#if defined( USE_COLOR_ALPHA )\n\tvColor = vec4( 1.0 );\n#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR ) || defined( USE_BATCHING_COLOR )\n\tvColor = vec3( 1.0 );\n#endif\n#ifdef USE_COLOR\n\tvColor *= color;\n#endif\n#ifdef USE_INSTANCING_COLOR\n\tvColor.xyz *= instanceColor.xyz;\n#endif\n#ifdef USE_BATCHING_COLOR\n\tvec3 batchingColor = getBatchingColor( getIndirectIndex( gl_DrawID ) );\n\tvColor.xyz *= batchingColor.xyz;\n#endif";var Pr="#define PI 3.141592653589793\n#define PI2 6.283185307179586\n#define PI_HALF 1.5707963267948966\n#define RECIPROCAL_PI 0.3183098861837907\n#define RECIPROCAL_PI2 0.15915494309189535\n#define EPSILON 1e-6\n#ifndef saturate\n#define saturate( a ) clamp( a, 0.0, 1.0 )\n#endif\n#define whiteComplement( a ) ( 1.0 - saturate( a ) )\nfloat pow2( const in float x ) { return x*x; }\nvec3 pow2( const in vec3 x ) { return x*x; }\nfloat pow3( const in float x ) { return x*x*x; }\nfloat pow4( const in float x ) { float x2 = x*x; return x2*x2; }\nfloat max3( const in vec3 v ) { return max( max( v.x, v.y ), v.z ); }\nfloat average( const in vec3 v ) { return dot( v, vec3( 0.3333333 ) ); }\nhighp float rand( const in vec2 uv ) {\n\tconst highp float a = 12.9898, b = 78.233, c = 43758.5453;\n\thighp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );\n\treturn fract( sin( sn ) * c );\n}\n#ifdef HIGH_PRECISION\n\tfloat precisionSafeLength( vec3 v ) { return length( v ); }\n#else\n\tfloat precisionSafeLength( vec3 v ) {\n\t\tfloat maxComponent = max3( abs( v ) );\n\t\treturn length( v / maxComponent ) * maxComponent;\n\t}\n#endif\nstruct IncidentLight {\n\tvec3 color;\n\tvec3 direction;\n\tbool visible;\n};\nstruct ReflectedLight {\n\tvec3 directDiffuse;\n\tvec3 directSpecular;\n\tvec3 indirectDiffuse;\n\tvec3 indirectSpecular;\n};\n#ifdef USE_ALPHAHASH\n\tvarying vec3 vPosition;\n#endif\nvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\n\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\n}\nvec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {\n\treturn normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );\n}\nmat3 transposeMat3( const in mat3 m ) {\n\tmat3 tmp;\n\ttmp[ 0 ] = vec3( m[ 0 ].x, m[ 1 ].x, m[ 2 ].x );\n\ttmp[ 1 ] = vec3( m[ 0 ].y, m[ 1 ].y, m[ 2 ].y );\n\ttmp[ 2 ] = vec3( m[ 0 ].z, m[ 1 ].z, m[ 2 ].z );\n\treturn tmp;\n}\nbool isPerspectiveMatrix( mat4 m ) {\n\treturn m[ 2 ][ 3 ] == - 1.0;\n}\nvec2 equirectUv( in vec3 dir ) {\n\tfloat u = atan( dir.z, dir.x ) * RECIPROCAL_PI2 + 0.5;\n\tfloat v = asin( clamp( dir.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\n\treturn vec2( u, v );\n}\nvec3 BRDF_Lambert( const in vec3 diffuseColor ) {\n\treturn RECIPROCAL_PI * diffuseColor;\n}\nvec3 F_Schlick( const in vec3 f0, const in float f90, const in float dotVH ) {\n\tfloat fresnel = exp2( ( - 5.55473 * dotVH - 6.98316 ) * dotVH );\n\treturn f0 * ( 1.0 - fresnel ) + ( f90 * fresnel );\n}\nfloat F_Schlick( const in float f0, const in float f90, const in float dotVH ) {\n\tfloat fresnel = exp2( ( - 5.55473 * dotVH - 6.98316 ) * dotVH );\n\treturn f0 * ( 1.0 - fresnel ) + ( f90 * fresnel );\n} // validated";var yr="#ifdef ENVMAP_TYPE_CUBE_UV\n\t#define cubeUV_minMipLevel 4.0\n\t#define cubeUV_minTileSize 16.0\n\tfloat getFace( vec3 direction ) {\n\t\tvec3 absDirection = abs( direction );\n\t\tfloat face = - 1.0;\n\t\tif ( absDirection.x > absDirection.z ) {\n\t\t\tif ( absDirection.x > absDirection.y )\n\t\t\t\tface = direction.x > 0.0 ? 0.0 : 3.0;\n\t\t\telse\n\t\t\t\tface = direction.y > 0.0 ? 1.0 : 4.0;\n\t\t} else {\n\t\t\tif ( absDirection.z > absDirection.y )\n\t\t\t\tface = direction.z > 0.0 ? 2.0 : 5.0;\n\t\t\telse\n\t\t\t\tface = direction.y > 0.0 ? 1.0 : 4.0;\n\t\t}\n\t\treturn face;\n\t}\n\tvec2 getUV( vec3 direction, float face ) {\n\t\tvec2 uv;\n\t\tif ( face == 0.0 ) {\n\t\t\tuv = vec2( direction.z, direction.y ) / abs( direction.x );\n\t\t} else if ( face == 1.0 ) {\n\t\t\tuv = vec2( - direction.x, - direction.z ) / abs( direction.y );\n\t\t} else if ( face == 2.0 ) {\n\t\t\tuv = vec2( - direction.x, direction.y ) / abs( direction.z );\n\t\t} else if ( face == 3.0 ) {\n\t\t\tuv = vec2( - direction.z, direction.y ) / abs( direction.x );\n\t\t} else if ( face == 4.0 ) {\n\t\t\tuv = vec2( - direction.x, direction.z ) / abs( direction.y );\n\t\t} else {\n\t\t\tuv = vec2( direction.x, direction.y ) / abs( direction.z );\n\t\t}\n\t\treturn 0.5 * ( uv + 1.0 );\n\t}\n\tvec3 bilinearCubeUV( sampler2D envMap, vec3 direction, float mipInt ) {\n\t\tfloat face = getFace( direction );\n\t\tfloat filterInt = max( cubeUV_minMipLevel - mipInt, 0.0 );\n\t\tmipInt = max( mipInt, cubeUV_minMipLevel );\n\t\tfloat faceSize = exp2( mipInt );\n\t\thighp vec2 uv = getUV( direction, face ) * ( faceSize - 2.0 ) + 1.0;\n\t\tif ( face > 2.0 ) {\n\t\t\tuv.y += faceSize;\n\t\t\tface -= 3.0;\n\t\t}\n\t\tuv.x += face * faceSize;\n\t\tuv.x += filterInt * 3.0 * cubeUV_minTileSize;\n\t\tuv.y += 4.0 * ( exp2( CUBEUV_MAX_MIP ) - faceSize );\n\t\tuv.x *= CUBEUV_TEXEL_WIDTH;\n\t\tuv.y *= CUBEUV_TEXEL_HEIGHT;\n\t\t#ifdef texture2DGradEXT\n\t\t\treturn texture2DGradEXT( envMap, uv, vec2( 0.0 ), vec2( 0.0 ) ).rgb;\n\t\t#else\n\t\t\treturn texture2D( envMap, uv ).rgb;\n\t\t#endif\n\t}\n\t#define cubeUV_r0 1.0\n\t#define cubeUV_m0 - 2.0\n\t#define cubeUV_r1 0.8\n\t#define cubeUV_m1 - 1.0\n\t#define cubeUV_r4 0.4\n\t#define cubeUV_m4 2.0\n\t#define cubeUV_r5 0.305\n\t#define cubeUV_m5 3.0\n\t#define cubeUV_r6 0.21\n\t#define cubeUV_m6 4.0\n\tfloat roughnessToMip( float roughness ) {\n\t\tfloat mip = 0.0;\n\t\tif ( roughness >= cubeUV_r1 ) {\n\t\t\tmip = ( cubeUV_r0 - roughness ) * ( cubeUV_m1 - cubeUV_m0 ) / ( cubeUV_r0 - cubeUV_r1 ) + cubeUV_m0;\n\t\t} else if ( roughness >= cubeUV_r4 ) {\n\t\t\tmip = ( cubeUV_r1 - roughness ) * ( cubeUV_m4 - cubeUV_m1 ) / ( cubeUV_r1 - cubeUV_r4 ) + cubeUV_m1;\n\t\t} else if ( roughness >= cubeUV_r5 ) {\n\t\t\tmip = ( cubeUV_r4 - roughness ) * ( cubeUV_m5 - cubeUV_m4 ) / ( cubeUV_r4 - cubeUV_r5 ) + cubeUV_m4;\n\t\t} else if ( roughness >= cubeUV_r6 ) {\n\t\t\tmip = ( cubeUV_r5 - roughness ) * ( cubeUV_m6 - cubeUV_m5 ) / ( cubeUV_r5 - cubeUV_r6 ) + cubeUV_m5;\n\t\t} else {\n\t\t\tmip = - 2.0 * log2( 1.16 * roughness );\t\t}\n\t\treturn mip;\n\t}\n\tvec4 textureCubeUV( sampler2D envMap, vec3 sampleDir, float roughness ) {\n\t\tfloat mip = clamp( roughnessToMip( roughness ), cubeUV_m0, CUBEUV_MAX_MIP );\n\t\tfloat mipF = fract( mip );\n\t\tfloat mipInt = floor( mip );\n\t\tvec3 color0 = bilinearCubeUV( envMap, sampleDir, mipInt );\n\t\tif ( mipF == 0.0 ) {\n\t\t\treturn vec4( color0, 1.0 );\n\t\t} else {\n\t\t\tvec3 color1 = bilinearCubeUV( envMap, sampleDir, mipInt + 1.0 );\n\t\t\treturn vec4( mix( color0, color1, mipF ), 1.0 );\n\t\t}\n\t}\n#endif";var Dr="vec3 transformedNormal = objectNormal;\n#ifdef USE_TANGENT\n\tvec3 transformedTangent = objectTangent;\n#endif\n#ifdef USE_BATCHING\n\tmat3 bm = mat3( batchingMatrix );\n\ttransformedNormal /= vec3( dot( bm[ 0 ], bm[ 0 ] ), dot( bm[ 1 ], bm[ 1 ] ), dot( bm[ 2 ], bm[ 2 ] ) );\n\ttransformedNormal = bm * transformedNormal;\n\t#ifdef USE_TANGENT\n\t\ttransformedTangent = bm * transformedTangent;\n\t#endif\n#endif\n#ifdef USE_INSTANCING\n\tmat3 im = mat3( instanceMatrix );\n\ttransformedNormal /= vec3( dot( im[ 0 ], im[ 0 ] ), dot( im[ 1 ], im[ 1 ] ), dot( im[ 2 ], im[ 2 ] ) );\n\ttransformedNormal = im * transformedNormal;\n\t#ifdef USE_TANGENT\n\t\ttransformedTangent = im * transformedTangent;\n\t#endif\n#endif\ntransformedNormal = normalMatrix * transformedNormal;\n#ifdef FLIP_SIDED\n\ttransformedNormal = - transformedNormal;\n#endif\n#ifdef USE_TANGENT\n\ttransformedTangent = ( modelViewMatrix * vec4( transformedTangent, 0.0 ) ).xyz;\n\t#ifdef FLIP_SIDED\n\t\ttransformedTangent = - transformedTangent;\n\t#endif\n#endif";var wr="#ifdef USE_DISPLACEMENTMAP\n\tuniform sampler2D displacementMap;\n\tuniform float displacementScale;\n\tuniform float displacementBias;\n#endif";var Ir="#ifdef USE_DISPLACEMENTMAP\n\ttransformed += normalize( objectNormal ) * ( texture2D( displacementMap, vDisplacementMapUv ).x * displacementScale + displacementBias );\n#endif";var Nr="#ifdef USE_EMISSIVEMAP\n\tvec4 emissiveColor = texture2D( emissiveMap, vEmissiveMapUv );\n\t#ifdef DECODE_VIDEO_TEXTURE_EMISSIVE\n\t\temissiveColor = sRGBTransferEOTF( emissiveColor );\n\t#endif\n\ttotalEmissiveRadiance *= emissiveColor.rgb;\n#endif";var Or="#ifdef USE_EMISSIVEMAP\n\tuniform sampler2D emissiveMap;\n#endif";var Fr="gl_FragColor = linearToOutputTexel( gl_FragColor );";var Br="vec4 LinearTransferOETF( in vec4 value ) {\n\treturn value;\n}\nvec4 sRGBTransferEOTF( in vec4 value ) {\n\treturn vec4( mix( pow( value.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), value.rgb * 0.0773993808, vec3( lessThanEqual( value.rgb, vec3( 0.04045 ) ) ) ), value.a );\n}\nvec4 sRGBTransferOETF( in vec4 value ) {\n\treturn vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.a );\n}";var Gr="#ifdef USE_ENVMAP\n\t#ifdef ENV_WORLDPOS\n\t\tvec3 cameraToFrag;\n\t\tif ( isOrthographic ) {\n\t\t\tcameraToFrag = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );\n\t\t} else {\n\t\t\tcameraToFrag = normalize( vWorldPosition - cameraPosition );\n\t\t}\n\t\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\tvec3 reflectVec = reflect( cameraToFrag, worldNormal );\n\t\t#else\n\t\t\tvec3 reflectVec = refract( cameraToFrag, worldNormal, refractionRatio );\n\t\t#endif\n\t#else\n\t\tvec3 reflectVec = vReflect;\n\t#endif\n\t#ifdef ENVMAP_TYPE_CUBE\n\t\tvec4 envColor = textureCube( envMap, envMapRotation * vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );\n\t#else\n\t\tvec4 envColor = vec4( 0.0 );\n\t#endif\n\t#ifdef ENVMAP_BLENDING_MULTIPLY\n\t\toutgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );\n\t#elif defined( ENVMAP_BLENDING_MIX )\n\t\toutgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );\n\t#elif defined( ENVMAP_BLENDING_ADD )\n\t\toutgoingLight += envColor.xyz * specularStrength * reflectivity;\n\t#endif\n#endif";var Vr="#ifdef USE_ENVMAP\n\tuniform float envMapIntensity;\n\tuniform float flipEnvMap;\n\tuniform mat3 envMapRotation;\n\t#ifdef ENVMAP_TYPE_CUBE\n\t\tuniform samplerCube envMap;\n\t#else\n\t\tuniform sampler2D envMap;\n\t#endif\n\t\n#endif";var Hr="#ifdef USE_ENVMAP\n\tuniform float reflectivity;\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( LAMBERT )\n\t\t#define ENV_WORLDPOS\n\t#endif\n\t#ifdef ENV_WORLDPOS\n\t\tvarying vec3 vWorldPosition;\n\t\tuniform float refractionRatio;\n\t#else\n\t\tvarying vec3 vReflect;\n\t#endif\n#endif";var Wr="#ifdef USE_ENVMAP\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( LAMBERT )\n\t\t#define ENV_WORLDPOS\n\t#endif\n\t#ifdef ENV_WORLDPOS\n\t\t\n\t\tvarying vec3 vWorldPosition;\n\t#else\n\t\tvarying vec3 vReflect;\n\t\tuniform float refractionRatio;\n\t#endif\n#endif";var kr="#ifdef USE_ENVMAP\n\t#ifdef ENV_WORLDPOS\n\t\tvWorldPosition = worldPosition.xyz;\n\t#else\n\t\tvec3 cameraToVertex;\n\t\tif ( isOrthographic ) {\n\t\t\tcameraToVertex = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );\n\t\t} else {\n\t\t\tcameraToVertex = normalize( worldPosition.xyz - cameraPosition );\n\t\t}\n\t\tvec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\tvReflect = reflect( cameraToVertex, worldNormal );\n\t\t#else\n\t\t\tvReflect = refract( cameraToVertex, worldNormal, refractionRatio );\n\t\t#endif\n\t#endif\n#endif";var zr="#ifdef USE_FOG\n\tvFogDepth = - mvPosition.z;\n#endif";var Xr="#ifdef USE_FOG\n\tvarying float vFogDepth;\n#endif";var jr="#ifdef USE_FOG\n\t#ifdef FOG_EXP2\n\t\tfloat fogFactor = 1.0 - exp( - fogDensity * fogDensity * vFogDepth * vFogDepth );\n\t#else\n\t\tfloat fogFactor = smoothstep( fogNear, fogFar, vFogDepth );\n\t#endif\n\tgl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );\n#endif";var Yr="#ifdef USE_FOG\n\tuniform vec3 fogColor;\n\tvarying float vFogDepth;\n\t#ifdef FOG_EXP2\n\t\tuniform float fogDensity;\n\t#else\n\t\tuniform float fogNear;\n\t\tuniform float fogFar;\n\t#endif\n#endif";var qr="#ifdef USE_GRADIENTMAP\n\tuniform sampler2D gradientMap;\n#endif\nvec3 getGradientIrradiance( vec3 normal, vec3 lightDirection ) {\n\tfloat dotNL = dot( normal, lightDirection );\n\tvec2 coord = vec2( dotNL * 0.5 + 0.5, 0.0 );\n\t#ifdef USE_GRADIENTMAP\n\t\treturn vec3( texture2D( gradientMap, coord ).r );\n\t#else\n\t\tvec2 fw = fwidth( coord ) * 0.5;\n\t\treturn mix( vec3( 0.7 ), vec3( 1.0 ), smoothstep( 0.7 - fw.x, 0.7 + fw.x, coord.x ) );\n\t#endif\n}";var Kr="#ifdef USE_LIGHTMAP\n\tuniform sampler2D lightMap;\n\tuniform float lightMapIntensity;\n#endif";var Zr="LambertMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;\nmaterial.specularStrength = specularStrength;";var $r="varying vec3 vViewPosition;\nstruct LambertMaterial {\n\tvec3 diffuseColor;\n\tfloat specularStrength;\n};\nvoid RE_Direct_Lambert( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in LambertMaterial material, inout ReflectedLight reflectedLight ) {\n\tfloat dotNL = saturate( dot( geometryNormal, directLight.direction ) );\n\tvec3 irradiance = dotNL * directLight.color;\n\treflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectDiffuse_Lambert( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in LambertMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\n#define RE_Direct\t\t\t\tRE_Direct_Lambert\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_Lambert";var Qr="uniform bool receiveShadow;\nuniform vec3 ambientLightColor;\n#if defined( USE_LIGHT_PROBES )\n\tuniform vec3 lightProbe[ 9 ];\n#endif\nvec3 shGetIrradianceAt( in vec3 normal, in vec3 shCoefficients[ 9 ] ) {\n\tfloat x = normal.x, y = normal.y, z = normal.z;\n\tvec3 result = shCoefficients[ 0 ] * 0.886227;\n\tresult += shCoefficients[ 1 ] * 2.0 * 0.511664 * y;\n\tresult += shCoefficients[ 2 ] * 2.0 * 0.511664 * z;\n\tresult += shCoefficients[ 3 ] * 2.0 * 0.511664 * x;\n\tresult += shCoefficients[ 4 ] * 2.0 * 0.429043 * x * y;\n\tresult += shCoefficients[ 5 ] * 2.0 * 0.429043 * y * z;\n\tresult += shCoefficients[ 6 ] * ( 0.743125 * z * z - 0.247708 );\n\tresult += shCoefficients[ 7 ] * 2.0 * 0.429043 * x * z;\n\tresult += shCoefficients[ 8 ] * 0.429043 * ( x * x - y * y );\n\treturn result;\n}\nvec3 getLightProbeIrradiance( const in vec3 lightProbe[ 9 ], const in vec3 normal ) {\n\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n\tvec3 irradiance = shGetIrradianceAt( worldNormal, lightProbe );\n\treturn irradiance;\n}\nvec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {\n\tvec3 irradiance = ambientLightColor;\n\treturn irradiance;\n}\nfloat getDistanceAttenuation( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {\n\tfloat distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );\n\tif ( cutoffDistance > 0.0 ) {\n\t\tdistanceFalloff *= pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );\n\t}\n\treturn distanceFalloff;\n}\nfloat getSpotAttenuation( const in float coneCosine, const in float penumbraCosine, const in float angleCosine ) {\n\treturn smoothstep( coneCosine, penumbraCosine, angleCosine );\n}\n#if NUM_DIR_LIGHTS > 0\n\tstruct DirectionalLight {\n\t\tvec3 direction;\n\t\tvec3 color;\n\t};\n\tuniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];\n\tvoid getDirectionalLightInfo( const in DirectionalLight directionalLight, out IncidentLight light ) {\n\t\tlight.color = directionalLight.color;\n\t\tlight.direction = directionalLight.direction;\n\t\tlight.visible = true;\n\t}\n#endif\n#if NUM_POINT_LIGHTS > 0\n\tstruct PointLight {\n\t\tvec3 position;\n\t\tvec3 color;\n\t\tfloat distance;\n\t\tfloat decay;\n\t};\n\tuniform PointLight pointLights[ NUM_POINT_LIGHTS ];\n\tvoid getPointLightInfo( const in PointLight pointLight, const in vec3 geometryPosition, out IncidentLight light ) {\n\t\tvec3 lVector = pointLight.position - geometryPosition;\n\t\tlight.direction = normalize( lVector );\n\t\tfloat lightDistance = length( lVector );\n\t\tlight.color = pointLight.color;\n\t\tlight.color *= getDistanceAttenuation( lightDistance, pointLight.distance, pointLight.decay );\n\t\tlight.visible = ( light.color != vec3( 0.0 ) );\n\t}\n#endif\n#if NUM_SPOT_LIGHTS > 0\n\tstruct SpotLight {\n\t\tvec3 position;\n\t\tvec3 direction;\n\t\tvec3 color;\n\t\tfloat distance;\n\t\tfloat decay;\n\t\tfloat coneCos;\n\t\tfloat penumbraCos;\n\t};\n\tuniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];\n\tvoid getSpotLightInfo( const in SpotLight spotLight, const in vec3 geometryPosition, out IncidentLight light ) {\n\t\tvec3 lVector = spotLight.position - geometryPosition;\n\t\tlight.direction = normalize( lVector );\n\t\tfloat angleCos = dot( light.direction, spotLight.direction );\n\t\tfloat spotAttenuation = getSpotAttenuation( spotLight.coneCos, spotLight.penumbraCos, angleCos );\n\t\tif ( spotAttenuation > 0.0 ) {\n\t\t\tfloat lightDistance = length( lVector );\n\t\t\tlight.color = spotLight.color * spotAttenuation;\n\t\t\tlight.color *= getDistanceAttenuation( lightDistance, spotLight.distance, spotLight.decay );\n\t\t\tlight.visible = ( light.color != vec3( 0.0 ) );\n\t\t} else {\n\t\t\tlight.color = vec3( 0.0 );\n\t\t\tlight.visible = false;\n\t\t}\n\t}\n#endif\n#if NUM_RECT_AREA_LIGHTS > 0\n\tstruct RectAreaLight {\n\t\tvec3 color;\n\t\tvec3 position;\n\t\tvec3 halfWidth;\n\t\tvec3 halfHeight;\n\t};\n\tuniform sampler2D ltc_1;\tuniform sampler2D ltc_2;\n\tuniform RectAreaLight rectAreaLights[ NUM_RECT_AREA_LIGHTS ];\n#endif\n#if NUM_HEMI_LIGHTS > 0\n\tstruct HemisphereLight {\n\t\tvec3 direction;\n\t\tvec3 skyColor;\n\t\tvec3 groundColor;\n\t};\n\tuniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];\n\tvec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in vec3 normal ) {\n\t\tfloat dotNL = dot( normal, hemiLight.direction );\n\t\tfloat hemiDiffuseWeight = 0.5 * dotNL + 0.5;\n\t\tvec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );\n\t\treturn irradiance;\n\t}\n#endif";var Jr="#ifdef USE_ENVMAP\n\tvec3 getIBLIrradiance( const in vec3 normal ) {\n\t\t#ifdef ENVMAP_TYPE_CUBE_UV\n\t\t\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n\t\t\tvec4 envMapColor = textureCubeUV( envMap, envMapRotation * worldNormal, 1.0 );\n\t\t\treturn PI * envMapColor.rgb * envMapIntensity;\n\t\t#else\n\t\t\treturn vec3( 0.0 );\n\t\t#endif\n\t}\n\tvec3 getIBLRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness ) {\n\t\t#ifdef ENVMAP_TYPE_CUBE_UV\n\t\t\tvec3 reflectVec = reflect( - viewDir, normal );\n\t\t\treflectVec = normalize( mix( reflectVec, normal, roughness * roughness) );\n\t\t\treflectVec = inverseTransformDirection( reflectVec, viewMatrix );\n\t\t\tvec4 envMapColor = textureCubeUV( envMap, envMapRotation * reflectVec, roughness );\n\t\t\treturn envMapColor.rgb * envMapIntensity;\n\t\t#else\n\t\t\treturn vec3( 0.0 );\n\t\t#endif\n\t}\n\t#ifdef USE_ANISOTROPY\n\t\tvec3 getIBLAnisotropyRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness, const in vec3 bitangent, const in float anisotropy ) {\n\t\t\t#ifdef ENVMAP_TYPE_CUBE_UV\n\t\t\t\tvec3 bentNormal = cross( bitangent, viewDir );\n\t\t\t\tbentNormal = normalize( cross( bentNormal, bitangent ) );\n\t\t\t\tbentNormal = normalize( mix( bentNormal, normal, pow2( pow2( 1.0 - anisotropy * ( 1.0 - roughness ) ) ) ) );\n\t\t\t\treturn getIBLRadiance( viewDir, bentNormal, roughness );\n\t\t\t#else\n\t\t\t\treturn vec3( 0.0 );\n\t\t\t#endif\n\t\t}\n\t#endif\n#endif";var ta="ToonMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;";var na="varying vec3 vViewPosition;\nstruct ToonMaterial {\n\tvec3 diffuseColor;\n};\nvoid RE_Direct_Toon( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {\n\tvec3 irradiance = getGradientIrradiance( geometryNormal, directLight.direction ) * directLight.color;\n\treflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectDiffuse_Toon( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\n#define RE_Direct\t\t\t\tRE_Direct_Toon\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_Toon";var ra="BlinnPhongMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;\nmaterial.specularColor = specular;\nmaterial.specularShininess = shininess;\nmaterial.specularStrength = specularStrength;";var aa="varying vec3 vViewPosition;\nstruct BlinnPhongMaterial {\n\tvec3 diffuseColor;\n\tvec3 specularColor;\n\tfloat specularShininess;\n\tfloat specularStrength;\n};\nvoid RE_Direct_BlinnPhong( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n\tfloat dotNL = saturate( dot( geometryNormal, directLight.direction ) );\n\tvec3 irradiance = dotNL * directLight.color;\n\treflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n\treflectedLight.directSpecular += irradiance * BRDF_BlinnPhong( directLight.direction, geometryViewDir, geometryNormal, material.specularColor, material.specularShininess ) * material.specularStrength;\n}\nvoid RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\n#define RE_Direct\t\t\t\tRE_Direct_BlinnPhong\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_BlinnPhong";var ia="PhysicalMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );\nvec3 dxy = max( abs( dFdx( nonPerturbedNormal ) ), abs( dFdy( nonPerturbedNormal ) ) );\nfloat geometryRoughness = max( max( dxy.x, dxy.y ), dxy.z );\nmaterial.roughness = max( roughnessFactor, 0.0525 );material.roughness += geometryRoughness;\nmaterial.roughness = min( material.roughness, 1.0 );\n#ifdef IOR\n\tmaterial.ior = ior;\n\t#ifdef USE_SPECULAR\n\t\tfloat specularIntensityFactor = specularIntensity;\n\t\tvec3 specularColorFactor = specularColor;\n\t\t#ifdef USE_SPECULAR_COLORMAP\n\t\t\tspecularColorFactor *= texture2D( specularColorMap, vSpecularColorMapUv ).rgb;\n\t\t#endif\n\t\t#ifdef USE_SPECULAR_INTENSITYMAP\n\t\t\tspecularIntensityFactor *= texture2D( specularIntensityMap, vSpecularIntensityMapUv ).a;\n\t\t#endif\n\t\tmaterial.specularF90 = mix( specularIntensityFactor, 1.0, metalnessFactor );\n\t#else\n\t\tfloat specularIntensityFactor = 1.0;\n\t\tvec3 specularColorFactor = vec3( 1.0 );\n\t\tmaterial.specularF90 = 1.0;\n\t#endif\n\tmaterial.specularColor = mix( min( pow2( ( material.ior - 1.0 ) / ( material.ior + 1.0 ) ) * specularColorFactor, vec3( 1.0 ) ) * specularIntensityFactor, diffuseColor.rgb, metalnessFactor );\n#else\n\tmaterial.specularColor = mix( vec3( 0.04 ), diffuseColor.rgb, metalnessFactor );\n\tmaterial.specularF90 = 1.0;\n#endif\n#ifdef USE_CLEARCOAT\n\tmaterial.clearcoat = clearcoat;\n\tmaterial.clearcoatRoughness = clearcoatRoughness;\n\tmaterial.clearcoatF0 = vec3( 0.04 );\n\tmaterial.clearcoatF90 = 1.0;\n\t#ifdef USE_CLEARCOATMAP\n\t\tmaterial.clearcoat *= texture2D( clearcoatMap, vClearcoatMapUv ).x;\n\t#endif\n\t#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n\t\tmaterial.clearcoatRoughness *= texture2D( clearcoatRoughnessMap, vClearcoatRoughnessMapUv ).y;\n\t#endif\n\tmaterial.clearcoat = saturate( material.clearcoat );\tmaterial.clearcoatRoughness = max( material.clearcoatRoughness, 0.0525 );\n\tmaterial.clearcoatRoughness += geometryRoughness;\n\tmaterial.clearcoatRoughness = min( material.clearcoatRoughness, 1.0 );\n#endif\n#ifdef USE_DISPERSION\n\tmaterial.dispersion = dispersion;\n#endif\n#ifdef USE_IRIDESCENCE\n\tmaterial.iridescence = iridescence;\n\tmaterial.iridescenceIOR = iridescenceIOR;\n\t#ifdef USE_IRIDESCENCEMAP\n\t\tmaterial.iridescence *= texture2D( iridescenceMap, vIridescenceMapUv ).r;\n\t#endif\n\t#ifdef USE_IRIDESCENCE_THICKNESSMAP\n\t\tmaterial.iridescenceThickness = (iridescenceThicknessMaximum - iridescenceThicknessMinimum) * texture2D( iridescenceThicknessMap, vIridescenceThicknessMapUv ).g + iridescenceThicknessMinimum;\n\t#else\n\t\tmaterial.iridescenceThickness = iridescenceThicknessMaximum;\n\t#endif\n#endif\n#ifdef USE_SHEEN\n\tmaterial.sheenColor = sheenColor;\n\t#ifdef USE_SHEEN_COLORMAP\n\t\tmaterial.sheenColor *= texture2D( sheenColorMap, vSheenColorMapUv ).rgb;\n\t#endif\n\tmaterial.sheenRoughness = clamp( sheenRoughness, 0.07, 1.0 );\n\t#ifdef USE_SHEEN_ROUGHNESSMAP\n\t\tmaterial.sheenRoughness *= texture2D( sheenRoughnessMap, vSheenRoughnessMapUv ).a;\n\t#endif\n#endif\n#ifdef USE_ANISOTROPY\n\t#ifdef USE_ANISOTROPYMAP\n\t\tmat2 anisotropyMat = mat2( anisotropyVector.x, anisotropyVector.y, - anisotropyVector.y, anisotropyVector.x );\n\t\tvec3 anisotropyPolar = texture2D( anisotropyMap, vAnisotropyMapUv ).rgb;\n\t\tvec2 anisotropyV = anisotropyMat * normalize( 2.0 * anisotropyPolar.rg - vec2( 1.0 ) ) * anisotropyPolar.b;\n\t#else\n\t\tvec2 anisotropyV = anisotropyVector;\n\t#endif\n\tmaterial.anisotropy = length( anisotropyV );\n\tif( material.anisotropy == 0.0 ) {\n\t\tanisotropyV = vec2( 1.0, 0.0 );\n\t} else {\n\t\tanisotropyV /= material.anisotropy;\n\t\tmaterial.anisotropy = saturate( material.anisotropy );\n\t}\n\tmaterial.alphaT = mix( pow2( material.roughness ), 1.0, pow2( material.anisotropy ) );\n\tmaterial.anisotropyT = tbn[ 0 ] * anisotropyV.x + tbn[ 1 ] * anisotropyV.y;\n\tmaterial.anisotropyB = tbn[ 1 ] * anisotropyV.x - tbn[ 0 ] * anisotropyV.y;\n#endif";var oa="struct PhysicalMaterial {\n\tvec3 diffuseColor;\n\tfloat roughness;\n\tvec3 specularColor;\n\tfloat specularF90;\n\tfloat dispersion;\n\t#ifdef USE_CLEARCOAT\n\t\tfloat clearcoat;\n\t\tfloat clearcoatRoughness;\n\t\tvec3 clearcoatF0;\n\t\tfloat clearcoatF90;\n\t#endif\n\t#ifdef USE_IRIDESCENCE\n\t\tfloat iridescence;\n\t\tfloat iridescenceIOR;\n\t\tfloat iridescenceThickness;\n\t\tvec3 iridescenceFresnel;\n\t\tvec3 iridescenceF0;\n\t#endif\n\t#ifdef USE_SHEEN\n\t\tvec3 sheenColor;\n\t\tfloat sheenRoughness;\n\t#endif\n\t#ifdef IOR\n\t\tfloat ior;\n\t#endif\n\t#ifdef USE_TRANSMISSION\n\t\tfloat transmission;\n\t\tfloat transmissionAlpha;\n\t\tfloat thickness;\n\t\tfloat attenuationDistance;\n\t\tvec3 attenuationColor;\n\t#endif\n\t#ifdef USE_ANISOTROPY\n\t\tfloat anisotropy;\n\t\tfloat alphaT;\n\t\tvec3 anisotropyT;\n\t\tvec3 anisotropyB;\n\t#endif\n};\nvec3 clearcoatSpecularDirect = vec3( 0.0 );\nvec3 clearcoatSpecularIndirect = vec3( 0.0 );\nvec3 sheenSpecularDirect = vec3( 0.0 );\nvec3 sheenSpecularIndirect = vec3(0.0 );\nvec3 Schlick_to_F0( const in vec3 f, const in float f90, const in float dotVH ) {\n    float x = clamp( 1.0 - dotVH, 0.0, 1.0 );\n    float x2 = x * x;\n    float x5 = clamp( x * x2 * x2, 0.0, 0.9999 );\n    return ( f - vec3( f90 ) * x5 ) / ( 1.0 - x5 );\n}\nfloat V_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {\n\tfloat a2 = pow2( alpha );\n\tfloat gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\n\tfloat gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\n\treturn 0.5 / max( gv + gl, EPSILON );\n}\nfloat D_GGX( const in float alpha, const in float dotNH ) {\n\tfloat a2 = pow2( alpha );\n\tfloat denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0;\n\treturn RECIPROCAL_PI * a2 / pow2( denom );\n}\n#ifdef USE_ANISOTROPY\n\tfloat V_GGX_SmithCorrelated_Anisotropic( const in float alphaT, const in float alphaB, const in float dotTV, const in float dotBV, const in float dotTL, const in float dotBL, const in float dotNV, const in float dotNL ) {\n\t\tfloat gv = dotNL * length( vec3( alphaT * dotTV, alphaB * dotBV, dotNV ) );\n\t\tfloat gl = dotNV * length( vec3( alphaT * dotTL, alphaB * dotBL, dotNL ) );\n\t\tfloat v = 0.5 / ( gv + gl );\n\t\treturn saturate(v);\n\t}\n\tfloat D_GGX_Anisotropic( const in float alphaT, const in float alphaB, const in float dotNH, const in float dotTH, const in float dotBH ) {\n\t\tfloat a2 = alphaT * alphaB;\n\t\thighp vec3 v = vec3( alphaB * dotTH, alphaT * dotBH, a2 * dotNH );\n\t\thighp float v2 = dot( v, v );\n\t\tfloat w2 = a2 / v2;\n\t\treturn RECIPROCAL_PI * a2 * pow2 ( w2 );\n\t}\n#endif\n#ifdef USE_CLEARCOAT\n\tvec3 BRDF_GGX_Clearcoat( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in PhysicalMaterial material) {\n\t\tvec3 f0 = material.clearcoatF0;\n\t\tfloat f90 = material.clearcoatF90;\n\t\tfloat roughness = material.clearcoatRoughness;\n\t\tfloat alpha = pow2( roughness );\n\t\tvec3 halfDir = normalize( lightDir + viewDir );\n\t\tfloat dotNL = saturate( dot( normal, lightDir ) );\n\t\tfloat dotNV = saturate( dot( normal, viewDir ) );\n\t\tfloat dotNH = saturate( dot( normal, halfDir ) );\n\t\tfloat dotVH = saturate( dot( viewDir, halfDir ) );\n\t\tvec3 F = F_Schlick( f0, f90, dotVH );\n\t\tfloat V = V_GGX_SmithCorrelated( alpha, dotNL, dotNV );\n\t\tfloat D = D_GGX( alpha, dotNH );\n\t\treturn F * ( V * D );\n\t}\n#endif\nvec3 BRDF_GGX( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in PhysicalMaterial material ) {\n\tvec3 f0 = material.specularColor;\n\tfloat f90 = material.specularF90;\n\tfloat roughness = material.roughness;\n\tfloat alpha = pow2( roughness );\n\tvec3 halfDir = normalize( lightDir + viewDir );\n\tfloat dotNL = saturate( dot( normal, lightDir ) );\n\tfloat dotNV = saturate( dot( normal, viewDir ) );\n\tfloat dotNH = saturate( dot( normal, halfDir ) );\n\tfloat dotVH = saturate( dot( viewDir, halfDir ) );\n\tvec3 F = F_Schlick( f0, f90, dotVH );\n\t#ifdef USE_IRIDESCENCE\n\t\tF = mix( F, material.iridescenceFresnel, material.iridescence );\n\t#endif\n\t#ifdef USE_ANISOTROPY\n\t\tfloat dotTL = dot( material.anisotropyT, lightDir );\n\t\tfloat dotTV = dot( material.anisotropyT, viewDir );\n\t\tfloat dotTH = dot( material.anisotropyT, halfDir );\n\t\tfloat dotBL = dot( material.anisotropyB, lightDir );\n\t\tfloat dotBV = dot( material.anisotropyB, viewDir );\n\t\tfloat dotBH = dot( material.anisotropyB, halfDir );\n\t\tfloat V = V_GGX_SmithCorrelated_Anisotropic( material.alphaT, alpha, dotTV, dotBV, dotTL, dotBL, dotNV, dotNL );\n\t\tfloat D = D_GGX_Anisotropic( material.alphaT, alpha, dotNH, dotTH, dotBH );\n\t#else\n\t\tfloat V = V_GGX_SmithCorrelated( alpha, dotNL, dotNV );\n\t\tfloat D = D_GGX( alpha, dotNH );\n\t#endif\n\treturn F * ( V * D );\n}\nvec2 LTC_Uv( const in vec3 N, const in vec3 V, const in float roughness ) {\n\tconst float LUT_SIZE = 64.0;\n\tconst float LUT_SCALE = ( LUT_SIZE - 1.0 ) / LUT_SIZE;\n\tconst float LUT_BIAS = 0.5 / LUT_SIZE;\n\tfloat dotNV = saturate( dot( N, V ) );\n\tvec2 uv = vec2( roughness, sqrt( 1.0 - dotNV ) );\n\tuv = uv * LUT_SCALE + LUT_BIAS;\n\treturn uv;\n}\nfloat LTC_ClippedSphereFormFactor( const in vec3 f ) {\n\tfloat l = length( f );\n\treturn max( ( l * l + f.z ) / ( l + 1.0 ), 0.0 );\n}\nvec3 LTC_EdgeVectorFormFactor( const in vec3 v1, const in vec3 v2 ) {\n\tfloat x = dot( v1, v2 );\n\tfloat y = abs( x );\n\tfloat a = 0.8543985 + ( 0.4965155 + 0.0145206 * y ) * y;\n\tfloat b = 3.4175940 + ( 4.1616724 + y ) * y;\n\tfloat v = a / b;\n\tfloat theta_sintheta = ( x > 0.0 ) ? v : 0.5 * inversesqrt( max( 1.0 - x * x, 1e-7 ) ) - v;\n\treturn cross( v1, v2 ) * theta_sintheta;\n}\nvec3 LTC_Evaluate( const in vec3 N, const in vec3 V, const in vec3 P, const in mat3 mInv, const in vec3 rectCoords[ 4 ] ) {\n\tvec3 v1 = rectCoords[ 1 ] - rectCoords[ 0 ];\n\tvec3 v2 = rectCoords[ 3 ] - rectCoords[ 0 ];\n\tvec3 lightNormal = cross( v1, v2 );\n\tif( dot( lightNormal, P - rectCoords[ 0 ] ) < 0.0 ) return vec3( 0.0 );\n\tvec3 T1, T2;\n\tT1 = normalize( V - N * dot( V, N ) );\n\tT2 = - cross( N, T1 );\n\tmat3 mat = mInv * transposeMat3( mat3( T1, T2, N ) );\n\tvec3 coords[ 4 ];\n\tcoords[ 0 ] = mat * ( rectCoords[ 0 ] - P );\n\tcoords[ 1 ] = mat * ( rectCoords[ 1 ] - P );\n\tcoords[ 2 ] = mat * ( rectCoords[ 2 ] - P );\n\tcoords[ 3 ] = mat * ( rectCoords[ 3 ] - P );\n\tcoords[ 0 ] = normalize( coords[ 0 ] );\n\tcoords[ 1 ] = normalize( coords[ 1 ] );\n\tcoords[ 2 ] = normalize( coords[ 2 ] );\n\tcoords[ 3 ] = normalize( coords[ 3 ] );\n\tvec3 vectorFormFactor = vec3( 0.0 );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 0 ], coords[ 1 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 1 ], coords[ 2 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 2 ], coords[ 3 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 3 ], coords[ 0 ] );\n\tfloat result = LTC_ClippedSphereFormFactor( vectorFormFactor );\n\treturn vec3( result );\n}\n#if defined( USE_SHEEN )\nfloat D_Charlie( float roughness, float dotNH ) {\n\tfloat alpha = pow2( roughness );\n\tfloat invAlpha = 1.0 / alpha;\n\tfloat cos2h = dotNH * dotNH;\n\tfloat sin2h = max( 1.0 - cos2h, 0.0078125 );\n\treturn ( 2.0 + invAlpha ) * pow( sin2h, invAlpha * 0.5 ) / ( 2.0 * PI );\n}\nfloat V_Neubelt( float dotNV, float dotNL ) {\n\treturn saturate( 1.0 / ( 4.0 * ( dotNL + dotNV - dotNL * dotNV ) ) );\n}\nvec3 BRDF_Sheen( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, vec3 sheenColor, const in float sheenRoughness ) {\n\tvec3 halfDir = normalize( lightDir + viewDir );\n\tfloat dotNL = saturate( dot( normal, lightDir ) );\n\tfloat dotNV = saturate( dot( normal, viewDir ) );\n\tfloat dotNH = saturate( dot( normal, halfDir ) );\n\tfloat D = D_Charlie( sheenRoughness, dotNH );\n\tfloat V = V_Neubelt( dotNV, dotNL );\n\treturn sheenColor * ( D * V );\n}\n#endif\nfloat IBLSheenBRDF( const in vec3 normal, const in vec3 viewDir, const in float roughness ) {\n\tfloat dotNV = saturate( dot( normal, viewDir ) );\n\tfloat r2 = roughness * roughness;\n\tfloat a = roughness < 0.25 ? -339.2 * r2 + 161.4 * roughness - 25.9 : -8.48 * r2 + 14.3 * roughness - 9.95;\n\tfloat b = roughness < 0.25 ? 44.0 * r2 - 23.7 * roughness + 3.26 : 1.97 * r2 - 3.27 * roughness + 0.72;\n\tfloat DG = exp( a * dotNV + b ) + ( roughness < 0.25 ? 0.0 : 0.1 * ( roughness - 0.25 ) );\n\treturn saturate( DG * RECIPROCAL_PI );\n}\nvec2 DFGApprox( const in vec3 normal, const in vec3 viewDir, const in float roughness ) {\n\tfloat dotNV = saturate( dot( normal, viewDir ) );\n\tconst vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );\n\tconst vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );\n\tvec4 r = roughness * c0 + c1;\n\tfloat a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;\n\tvec2 fab = vec2( - 1.04, 1.04 ) * a004 + r.zw;\n\treturn fab;\n}\nvec3 EnvironmentBRDF( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float roughness ) {\n\tvec2 fab = DFGApprox( normal, viewDir, roughness );\n\treturn specularColor * fab.x + specularF90 * fab.y;\n}\n#ifdef USE_IRIDESCENCE\nvoid computeMultiscatteringIridescence( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float iridescence, const in vec3 iridescenceF0, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {\n#else\nvoid computeMultiscattering( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {\n#endif\n\tvec2 fab = DFGApprox( normal, viewDir, roughness );\n\t#ifdef USE_IRIDESCENCE\n\t\tvec3 Fr = mix( specularColor, iridescenceF0, iridescence );\n\t#else\n\t\tvec3 Fr = specularColor;\n\t#endif\n\tvec3 FssEss = Fr * fab.x + specularF90 * fab.y;\n\tfloat Ess = fab.x + fab.y;\n\tfloat Ems = 1.0 - Ess;\n\tvec3 Favg = Fr + ( 1.0 - Fr ) * 0.047619;\tvec3 Fms = FssEss * Favg / ( 1.0 - Ems * Favg );\n\tsingleScatter += FssEss;\n\tmultiScatter += Fms * Ems;\n}\n#if NUM_RECT_AREA_LIGHTS > 0\n\tvoid RE_Direct_RectArea_Physical( const in RectAreaLight rectAreaLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\t\tvec3 normal = geometryNormal;\n\t\tvec3 viewDir = geometryViewDir;\n\t\tvec3 position = geometryPosition;\n\t\tvec3 lightPos = rectAreaLight.position;\n\t\tvec3 halfWidth = rectAreaLight.halfWidth;\n\t\tvec3 halfHeight = rectAreaLight.halfHeight;\n\t\tvec3 lightColor = rectAreaLight.color;\n\t\tfloat roughness = material.roughness;\n\t\tvec3 rectCoords[ 4 ];\n\t\trectCoords[ 0 ] = lightPos + halfWidth - halfHeight;\t\trectCoords[ 1 ] = lightPos - halfWidth - halfHeight;\n\t\trectCoords[ 2 ] = lightPos - halfWidth + halfHeight;\n\t\trectCoords[ 3 ] = lightPos + halfWidth + halfHeight;\n\t\tvec2 uv = LTC_Uv( normal, viewDir, roughness );\n\t\tvec4 t1 = texture2D( ltc_1, uv );\n\t\tvec4 t2 = texture2D( ltc_2, uv );\n\t\tmat3 mInv = mat3(\n\t\t\tvec3( t1.x, 0, t1.y ),\n\t\t\tvec3(    0, 1,    0 ),\n\t\t\tvec3( t1.z, 0, t1.w )\n\t\t);\n\t\tvec3 fresnel = ( material.specularColor * t2.x + ( vec3( 1.0 ) - material.specularColor ) * t2.y );\n\t\treflectedLight.directSpecular += lightColor * fresnel * LTC_Evaluate( normal, viewDir, position, mInv, rectCoords );\n\t\treflectedLight.directDiffuse += lightColor * material.diffuseColor * LTC_Evaluate( normal, viewDir, position, mat3( 1.0 ), rectCoords );\n\t}\n#endif\nvoid RE_Direct_Physical( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\tfloat dotNL = saturate( dot( geometryNormal, directLight.direction ) );\n\tvec3 irradiance = dotNL * directLight.color;\n\t#ifdef USE_CLEARCOAT\n\t\tfloat dotNLcc = saturate( dot( geometryClearcoatNormal, directLight.direction ) );\n\t\tvec3 ccIrradiance = dotNLcc * directLight.color;\n\t\tclearcoatSpecularDirect += ccIrradiance * BRDF_GGX_Clearcoat( directLight.direction, geometryViewDir, geometryClearcoatNormal, material );\n\t#endif\n\t#ifdef USE_SHEEN\n\t\tsheenSpecularDirect += irradiance * BRDF_Sheen( directLight.direction, geometryViewDir, geometryNormal, material.sheenColor, material.sheenRoughness );\n\t#endif\n\treflectedLight.directSpecular += irradiance * BRDF_GGX( directLight.direction, geometryViewDir, geometryNormal, material );\n\treflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectSpecular_Physical( const in vec3 radiance, const in vec3 irradiance, const in vec3 clearcoatRadiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight) {\n\t#ifdef USE_CLEARCOAT\n\t\tclearcoatSpecularIndirect += clearcoatRadiance * EnvironmentBRDF( geometryClearcoatNormal, geometryViewDir, material.clearcoatF0, material.clearcoatF90, material.clearcoatRoughness );\n\t#endif\n\t#ifdef USE_SHEEN\n\t\tsheenSpecularIndirect += irradiance * material.sheenColor * IBLSheenBRDF( geometryNormal, geometryViewDir, material.sheenRoughness );\n\t#endif\n\tvec3 singleScattering = vec3( 0.0 );\n\tvec3 multiScattering = vec3( 0.0 );\n\tvec3 cosineWeightedIrradiance = irradiance * RECIPROCAL_PI;\n\t#ifdef USE_IRIDESCENCE\n\t\tcomputeMultiscatteringIridescence( geometryNormal, geometryViewDir, material.specularColor, material.specularF90, material.iridescence, material.iridescenceFresnel, material.roughness, singleScattering, multiScattering );\n\t#else\n\t\tcomputeMultiscattering( geometryNormal, geometryViewDir, material.specularColor, material.specularF90, material.roughness, singleScattering, multiScattering );\n\t#endif\n\tvec3 totalScattering = singleScattering + multiScattering;\n\tvec3 diffuse = material.diffuseColor * ( 1.0 - max( max( totalScattering.r, totalScattering.g ), totalScattering.b ) );\n\treflectedLight.indirectSpecular += radiance * singleScattering;\n\treflectedLight.indirectSpecular += multiScattering * cosineWeightedIrradiance;\n\treflectedLight.indirectDiffuse += diffuse * cosineWeightedIrradiance;\n}\n#define RE_Direct\t\t\t\tRE_Direct_Physical\n#define RE_Direct_RectArea\t\tRE_Direct_RectArea_Physical\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_Physical\n#define RE_IndirectSpecular\t\tRE_IndirectSpecular_Physical\nfloat computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {\n\treturn saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );\n}";var sa="\nvec3 geometryPosition = - vViewPosition;\nvec3 geometryNormal = normal;\nvec3 geometryViewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( vViewPosition );\nvec3 geometryClearcoatNormal = vec3( 0.0 );\n#ifdef USE_CLEARCOAT\n\tgeometryClearcoatNormal = clearcoatNormal;\n#endif\n#ifdef USE_IRIDESCENCE\n\tfloat dotNVi = saturate( dot( normal, geometryViewDir ) );\n\tif ( material.iridescenceThickness == 0.0 ) {\n\t\tmaterial.iridescence = 0.0;\n\t} else {\n\t\tmaterial.iridescence = saturate( material.iridescence );\n\t}\n\tif ( material.iridescence > 0.0 ) {\n\t\tmaterial.iridescenceFresnel = evalIridescence( 1.0, material.iridescenceIOR, dotNVi, material.iridescenceThickness, material.specularColor );\n\t\tmaterial.iridescenceF0 = Schlick_to_F0( material.iridescenceFresnel, 1.0, dotNVi );\n\t}\n#endif\nIncidentLight directLight;\n#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )\n\tPointLight pointLight;\n\t#if defined( USE_SHADOWMAP ) && NUM_POINT_LIGHT_SHADOWS > 0\n\tPointLightShadow pointLightShadow;\n\t#endif\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\t\tpointLight = pointLights[ i ];\n\t\tgetPointLightInfo( pointLight, geometryPosition, directLight );\n\t\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_POINT_LIGHT_SHADOWS )\n\t\tpointLightShadow = pointLightShadows[ i ];\n\t\tdirectLight.color *= ( directLight.visible && receiveShadow ) ? getPointShadow( pointShadowMap[ i ], pointLightShadow.shadowMapSize, pointLightShadow.shadowIntensity, pointLightShadow.shadowBias, pointLightShadow.shadowRadius, vPointShadowCoord[ i ], pointLightShadow.shadowCameraNear, pointLightShadow.shadowCameraFar ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )\n\tSpotLight spotLight;\n\tvec4 spotColor;\n\tvec3 spotLightCoord;\n\tbool inSpotLightMap;\n\t#if defined( USE_SHADOWMAP ) && NUM_SPOT_LIGHT_SHADOWS > 0\n\tSpotLightShadow spotLightShadow;\n\t#endif\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\t\tspotLight = spotLights[ i ];\n\t\tgetSpotLightInfo( spotLight, geometryPosition, directLight );\n\t\t#if ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS )\n\t\t#define SPOT_LIGHT_MAP_INDEX UNROLLED_LOOP_INDEX\n\t\t#elif ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )\n\t\t#define SPOT_LIGHT_MAP_INDEX NUM_SPOT_LIGHT_MAPS\n\t\t#else\n\t\t#define SPOT_LIGHT_MAP_INDEX ( UNROLLED_LOOP_INDEX - NUM_SPOT_LIGHT_SHADOWS + NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS )\n\t\t#endif\n\t\t#if ( SPOT_LIGHT_MAP_INDEX < NUM_SPOT_LIGHT_MAPS )\n\t\t\tspotLightCoord = vSpotLightCoord[ i ].xyz / vSpotLightCoord[ i ].w;\n\t\t\tinSpotLightMap = all( lessThan( abs( spotLightCoord * 2. - 1. ), vec3( 1.0 ) ) );\n\t\t\tspotColor = texture2D( spotLightMap[ SPOT_LIGHT_MAP_INDEX ], spotLightCoord.xy );\n\t\t\tdirectLight.color = inSpotLightMap ? directLight.color * spotColor.rgb : directLight.color;\n\t\t#endif\n\t\t#undef SPOT_LIGHT_MAP_INDEX\n\t\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )\n\t\tspotLightShadow = spotLightShadows[ i ];\n\t\tdirectLight.color *= ( directLight.visible && receiveShadow ) ? getShadow( spotShadowMap[ i ], spotLightShadow.shadowMapSize, spotLightShadow.shadowIntensity, spotLightShadow.shadowBias, spotLightShadow.shadowRadius, vSpotLightCoord[ i ] ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )\n\tDirectionalLight directionalLight;\n\t#if defined( USE_SHADOWMAP ) && NUM_DIR_LIGHT_SHADOWS > 0\n\tDirectionalLightShadow directionalLightShadow;\n\t#endif\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\t\tdirectionalLight = directionalLights[ i ];\n\t\tgetDirectionalLightInfo( directionalLight, directLight );\n\t\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_DIR_LIGHT_SHADOWS )\n\t\tdirectionalLightShadow = directionalLightShadows[ i ];\n\t\tdirectLight.color *= ( directLight.visible && receiveShadow ) ? getShadow( directionalShadowMap[ i ], directionalLightShadow.shadowMapSize, directionalLightShadow.shadowIntensity, directionalLightShadow.shadowBias, directionalLightShadow.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if ( NUM_RECT_AREA_LIGHTS > 0 ) && defined( RE_Direct_RectArea )\n\tRectAreaLight rectAreaLight;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_RECT_AREA_LIGHTS; i ++ ) {\n\t\trectAreaLight = rectAreaLights[ i ];\n\t\tRE_Direct_RectArea( rectAreaLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if defined( RE_IndirectDiffuse )\n\tvec3 iblIrradiance = vec3( 0.0 );\n\tvec3 irradiance = getAmbientLightIrradiance( ambientLightColor );\n\t#if defined( USE_LIGHT_PROBES )\n\t\tirradiance += getLightProbeIrradiance( lightProbe, geometryNormal );\n\t#endif\n\t#if ( NUM_HEMI_LIGHTS > 0 )\n\t\t#pragma unroll_loop_start\n\t\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\n\t\t\tirradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometryNormal );\n\t\t}\n\t\t#pragma unroll_loop_end\n\t#endif\n#endif\n#if defined( RE_IndirectSpecular )\n\tvec3 radiance = vec3( 0.0 );\n\tvec3 clearcoatRadiance = vec3( 0.0 );\n#endif";var la="#if defined( RE_IndirectDiffuse )\n\t#ifdef USE_LIGHTMAP\n\t\tvec4 lightMapTexel = texture2D( lightMap, vLightMapUv );\n\t\tvec3 lightMapIrradiance = lightMapTexel.rgb * lightMapIntensity;\n\t\tirradiance += lightMapIrradiance;\n\t#endif\n\t#if defined( USE_ENVMAP ) && defined( STANDARD ) && defined( ENVMAP_TYPE_CUBE_UV )\n\t\tiblIrradiance += getIBLIrradiance( geometryNormal );\n\t#endif\n#endif\n#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )\n\t#ifdef USE_ANISOTROPY\n\t\tradiance += getIBLAnisotropyRadiance( geometryViewDir, geometryNormal, material.roughness, material.anisotropyB, material.anisotropy );\n\t#else\n\t\tradiance += getIBLRadiance( geometryViewDir, geometryNormal, material.roughness );\n\t#endif\n\t#ifdef USE_CLEARCOAT\n\t\tclearcoatRadiance += getIBLRadiance( geometryViewDir, geometryClearcoatNormal, material.clearcoatRoughness );\n\t#endif\n#endif";var ua="#if defined( RE_IndirectDiffuse )\n\tRE_IndirectDiffuse( irradiance, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );\n#endif\n#if defined( RE_IndirectSpecular )\n\tRE_IndirectSpecular( radiance, iblIrradiance, clearcoatRadiance, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );\n#endif";var pa="#if defined( USE_LOGDEPTHBUF )\n\tgl_FragDepth = vIsPerspective == 0.0 ? gl_FragCoord.z : log2( vFragDepth ) * logDepthBufFC * 0.5;\n#endif";var ma="#if defined( USE_LOGDEPTHBUF )\n\tuniform float logDepthBufFC;\n\tvarying float vFragDepth;\n\tvarying float vIsPerspective;\n#endif";var ha="#ifdef USE_LOGDEPTHBUF\n\tvarying float vFragDepth;\n\tvarying float vIsPerspective;\n#endif";var ga="#ifdef USE_LOGDEPTHBUF\n\tvFragDepth = 1.0 + gl_Position.w;\n\tvIsPerspective = float( isPerspectiveMatrix( projectionMatrix ) );\n#endif";var _a="#ifdef USE_MAP\n\tvec4 sampledDiffuseColor = texture2D( map, vMapUv );\n\t#ifdef DECODE_VIDEO_TEXTURE\n\t\tsampledDiffuseColor = sRGBTransferEOTF( sampledDiffuseColor );\n\t#endif\n\tdiffuseColor *= sampledDiffuseColor;\n#endif";var va="#ifdef USE_MAP\n\tuniform sampler2D map;\n#endif";var Ea="#if defined( USE_MAP ) || defined( USE_ALPHAMAP )\n\t#if defined( USE_POINTS_UV )\n\t\tvec2 uv = vUv;\n\t#else\n\t\tvec2 uv = ( uvTransform * vec3( gl_PointCoord.x, 1.0 - gl_PointCoord.y, 1 ) ).xy;\n\t#endif\n#endif\n#ifdef USE_MAP\n\tdiffuseColor *= texture2D( map, uv );\n#endif\n#ifdef USE_ALPHAMAP\n\tdiffuseColor.a *= texture2D( alphaMap, uv ).g;\n#endif";var Sa="#if defined( USE_POINTS_UV )\n\tvarying vec2 vUv;\n#else\n\t#if defined( USE_MAP ) || defined( USE_ALPHAMAP )\n\t\tuniform mat3 uvTransform;\n\t#endif\n#endif\n#ifdef USE_MAP\n\tuniform sampler2D map;\n#endif\n#ifdef USE_ALPHAMAP\n\tuniform sampler2D alphaMap;\n#endif";var Ta="float metalnessFactor = metalness;\n#ifdef USE_METALNESSMAP\n\tvec4 texelMetalness = texture2D( metalnessMap, vMetalnessMapUv );\n\tmetalnessFactor *= texelMetalness.b;\n#endif";var Ma="#ifdef USE_METALNESSMAP\n\tuniform sampler2D metalnessMap;\n#endif";var xa="#ifdef USE_INSTANCING_MORPH\n\tfloat morphTargetInfluences[ MORPHTARGETS_COUNT ];\n\tfloat morphTargetBaseInfluence = texelFetch( morphTexture, ivec2( 0, gl_InstanceID ), 0 ).r;\n\tfor ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {\n\t\tmorphTargetInfluences[i] =  texelFetch( morphTexture, ivec2( i + 1, gl_InstanceID ), 0 ).r;\n\t}\n#endif";var ba="#if defined( USE_MORPHCOLORS )\n\tvColor *= morphTargetBaseInfluence;\n\tfor ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {\n\t\t#if defined( USE_COLOR_ALPHA )\n\t\t\tif ( morphTargetInfluences[ i ] != 0.0 ) vColor += getMorph( gl_VertexID, i, 2 ) * morphTargetInfluences[ i ];\n\t\t#elif defined( USE_COLOR )\n\t\t\tif ( morphTargetInfluences[ i ] != 0.0 ) vColor += getMorph( gl_VertexID, i, 2 ).rgb * morphTargetInfluences[ i ];\n\t\t#endif\n\t}\n#endif";var Ra="#ifdef USE_MORPHNORMALS\n\tobjectNormal *= morphTargetBaseInfluence;\n\tfor ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {\n\t\tif ( morphTargetInfluences[ i ] != 0.0 ) objectNormal += getMorph( gl_VertexID, i, 1 ).xyz * morphTargetInfluences[ i ];\n\t}\n#endif";var Aa="#ifdef USE_MORPHTARGETS\n\t#ifndef USE_INSTANCING_MORPH\n\t\tuniform float morphTargetBaseInfluence;\n\t\tuniform float morphTargetInfluences[ MORPHTARGETS_COUNT ];\n\t#endif\n\tuniform sampler2DArray morphTargetsTexture;\n\tuniform ivec2 morphTargetsTextureSize;\n\tvec4 getMorph( const in int vertexIndex, const in int morphTargetIndex, const in int offset ) {\n\t\tint texelIndex = vertexIndex * MORPHTARGETS_TEXTURE_STRIDE + offset;\n\t\tint y = texelIndex / morphTargetsTextureSize.x;\n\t\tint x = texelIndex - y * morphTargetsTextureSize.x;\n\t\tivec3 morphUV = ivec3( x, y, morphTargetIndex );\n\t\treturn texelFetch( morphTargetsTexture, morphUV, 0 );\n\t}\n#endif";var Ca="#ifdef USE_MORPHTARGETS\n\ttransformed *= morphTargetBaseInfluence;\n\tfor ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {\n\t\tif ( morphTargetInfluences[ i ] != 0.0 ) transformed += getMorph( gl_VertexID, i, 0 ).xyz * morphTargetInfluences[ i ];\n\t}\n#endif";var La="float faceDirection = gl_FrontFacing ? 1.0 : - 1.0;\n#ifdef FLAT_SHADED\n\tvec3 fdx = dFdx( vViewPosition );\n\tvec3 fdy = dFdy( vViewPosition );\n\tvec3 normal = normalize( cross( fdx, fdy ) );\n#else\n\tvec3 normal = normalize( vNormal );\n\t#ifdef DOUBLE_SIDED\n\t\tnormal *= faceDirection;\n\t#endif\n#endif\n#if defined( USE_NORMALMAP_TANGENTSPACE ) || defined( USE_CLEARCOAT_NORMALMAP ) || defined( USE_ANISOTROPY )\n\t#ifdef USE_TANGENT\n\t\tmat3 tbn = mat3( normalize( vTangent ), normalize( vBitangent ), normal );\n\t#else\n\t\tmat3 tbn = getTangentFrame( - vViewPosition, normal,\n\t\t#if defined( USE_NORMALMAP )\n\t\t\tvNormalMapUv\n\t\t#elif defined( USE_CLEARCOAT_NORMALMAP )\n\t\t\tvClearcoatNormalMapUv\n\t\t#else\n\t\t\tvUv\n\t\t#endif\n\t\t);\n\t#endif\n\t#if defined( DOUBLE_SIDED ) && ! defined( FLAT_SHADED )\n\t\ttbn[0] *= faceDirection;\n\t\ttbn[1] *= faceDirection;\n\t#endif\n#endif\n#ifdef USE_CLEARCOAT_NORMALMAP\n\t#ifdef USE_TANGENT\n\t\tmat3 tbn2 = mat3( normalize( vTangent ), normalize( vBitangent ), normal );\n\t#else\n\t\tmat3 tbn2 = getTangentFrame( - vViewPosition, normal, vClearcoatNormalMapUv );\n\t#endif\n\t#if defined( DOUBLE_SIDED ) && ! defined( FLAT_SHADED )\n\t\ttbn2[0] *= faceDirection;\n\t\ttbn2[1] *= faceDirection;\n\t#endif\n#endif\nvec3 nonPerturbedNormal = normal;";var Ua="#ifdef USE_NORMALMAP_OBJECTSPACE\n\tnormal = texture2D( normalMap, vNormalMapUv ).xyz * 2.0 - 1.0;\n\t#ifdef FLIP_SIDED\n\t\tnormal = - normal;\n\t#endif\n\t#ifdef DOUBLE_SIDED\n\t\tnormal = normal * faceDirection;\n\t#endif\n\tnormal = normalize( normalMatrix * normal );\n#elif defined( USE_NORMALMAP_TANGENTSPACE )\n\tvec3 mapN = texture2D( normalMap, vNormalMapUv ).xyz * 2.0 - 1.0;\n\tmapN.xy *= normalScale;\n\tnormal = normalize( tbn * mapN );\n#elif defined( USE_BUMPMAP )\n\tnormal = perturbNormalArb( - vViewPosition, normal, dHdxy_fwd(), faceDirection );\n#endif";var Pa="#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n\t#ifdef USE_TANGENT\n\t\tvarying vec3 vTangent;\n\t\tvarying vec3 vBitangent;\n\t#endif\n#endif";var ya="#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n\t#ifdef USE_TANGENT\n\t\tvarying vec3 vTangent;\n\t\tvarying vec3 vBitangent;\n\t#endif\n#endif";var Da="#ifndef FLAT_SHADED\n\tvNormal = normalize( transformedNormal );\n\t#ifdef USE_TANGENT\n\t\tvTangent = normalize( transformedTangent );\n\t\tvBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );\n\t#endif\n#endif";var wa="#ifdef USE_NORMALMAP\n\tuniform sampler2D normalMap;\n\tuniform vec2 normalScale;\n#endif\n#ifdef USE_NORMALMAP_OBJECTSPACE\n\tuniform mat3 normalMatrix;\n#endif\n#if ! defined ( USE_TANGENT ) && ( defined ( USE_NORMALMAP_TANGENTSPACE ) || defined ( USE_CLEARCOAT_NORMALMAP ) || defined( USE_ANISOTROPY ) )\n\tmat3 getTangentFrame( vec3 eye_pos, vec3 surf_norm, vec2 uv ) {\n\t\tvec3 q0 = dFdx( eye_pos.xyz );\n\t\tvec3 q1 = dFdy( eye_pos.xyz );\n\t\tvec2 st0 = dFdx( uv.st );\n\t\tvec2 st1 = dFdy( uv.st );\n\t\tvec3 N = surf_norm;\n\t\tvec3 q1perp = cross( q1, N );\n\t\tvec3 q0perp = cross( N, q0 );\n\t\tvec3 T = q1perp * st0.x + q0perp * st1.x;\n\t\tvec3 B = q1perp * st0.y + q0perp * st1.y;\n\t\tfloat det = max( dot( T, T ), dot( B, B ) );\n\t\tfloat scale = ( det == 0.0 ) ? 0.0 : inversesqrt( det );\n\t\treturn mat3( T * scale, B * scale, N );\n\t}\n#endif";var Ia="#ifdef USE_CLEARCOAT\n\tvec3 clearcoatNormal = nonPerturbedNormal;\n#endif";var Na="#ifdef USE_CLEARCOAT_NORMALMAP\n\tvec3 clearcoatMapN = texture2D( clearcoatNormalMap, vClearcoatNormalMapUv ).xyz * 2.0 - 1.0;\n\tclearcoatMapN.xy *= clearcoatNormalScale;\n\tclearcoatNormal = normalize( tbn2 * clearcoatMapN );\n#endif";var Oa="#ifdef USE_CLEARCOATMAP\n\tuniform sampler2D clearcoatMap;\n#endif\n#ifdef USE_CLEARCOAT_NORMALMAP\n\tuniform sampler2D clearcoatNormalMap;\n\tuniform vec2 clearcoatNormalScale;\n#endif\n#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n\tuniform sampler2D clearcoatRoughnessMap;\n#endif";var Fa="#ifdef USE_IRIDESCENCEMAP\n\tuniform sampler2D iridescenceMap;\n#endif\n#ifdef USE_IRIDESCENCE_THICKNESSMAP\n\tuniform sampler2D iridescenceThicknessMap;\n#endif";var Ba="#ifdef OPAQUE\ndiffuseColor.a = 1.0;\n#endif\n#ifdef USE_TRANSMISSION\ndiffuseColor.a *= material.transmissionAlpha;\n#endif\ngl_FragColor = vec4( outgoingLight, diffuseColor.a );";var Ga="vec3 packNormalToRGB( const in vec3 normal ) {\n\treturn normalize( normal ) * 0.5 + 0.5;\n}\nvec3 unpackRGBToNormal( const in vec3 rgb ) {\n\treturn 2.0 * rgb.xyz - 1.0;\n}\nconst float PackUpscale = 256. / 255.;const float UnpackDownscale = 255. / 256.;const float ShiftRight8 = 1. / 256.;\nconst float Inv255 = 1. / 255.;\nconst vec4 PackFactors = vec4( 1.0, 256.0, 256.0 * 256.0, 256.0 * 256.0 * 256.0 );\nconst vec2 UnpackFactors2 = vec2( UnpackDownscale, 1.0 / PackFactors.g );\nconst vec3 UnpackFactors3 = vec3( UnpackDownscale / PackFactors.rg, 1.0 / PackFactors.b );\nconst vec4 UnpackFactors4 = vec4( UnpackDownscale / PackFactors.rgb, 1.0 / PackFactors.a );\nvec4 packDepthToRGBA( const in float v ) {\n\tif( v <= 0.0 )\n\t\treturn vec4( 0., 0., 0., 0. );\n\tif( v >= 1.0 )\n\t\treturn vec4( 1., 1., 1., 1. );\n\tfloat vuf;\n\tfloat af = modf( v * PackFactors.a, vuf );\n\tfloat bf = modf( vuf * ShiftRight8, vuf );\n\tfloat gf = modf( vuf * ShiftRight8, vuf );\n\treturn vec4( vuf * Inv255, gf * PackUpscale, bf * PackUpscale, af );\n}\nvec3 packDepthToRGB( const in float v ) {\n\tif( v <= 0.0 )\n\t\treturn vec3( 0., 0., 0. );\n\tif( v >= 1.0 )\n\t\treturn vec3( 1., 1., 1. );\n\tfloat vuf;\n\tfloat bf = modf( v * PackFactors.b, vuf );\n\tfloat gf = modf( vuf * ShiftRight8, vuf );\n\treturn vec3( vuf * Inv255, gf * PackUpscale, bf );\n}\nvec2 packDepthToRG( const in float v ) {\n\tif( v <= 0.0 )\n\t\treturn vec2( 0., 0. );\n\tif( v >= 1.0 )\n\t\treturn vec2( 1., 1. );\n\tfloat vuf;\n\tfloat gf = modf( v * 256., vuf );\n\treturn vec2( vuf * Inv255, gf );\n}\nfloat unpackRGBAToDepth( const in vec4 v ) {\n\treturn dot( v, UnpackFactors4 );\n}\nfloat unpackRGBToDepth( const in vec3 v ) {\n\treturn dot( v, UnpackFactors3 );\n}\nfloat unpackRGToDepth( const in vec2 v ) {\n\treturn v.r * UnpackFactors2.r + v.g * UnpackFactors2.g;\n}\nvec4 pack2HalfToRGBA( const in vec2 v ) {\n\tvec4 r = vec4( v.x, fract( v.x * 255.0 ), v.y, fract( v.y * 255.0 ) );\n\treturn vec4( r.x - r.y / 255.0, r.y, r.z - r.w / 255.0, r.w );\n}\nvec2 unpackRGBATo2Half( const in vec4 v ) {\n\treturn vec2( v.x + ( v.y / 255.0 ), v.z + ( v.w / 255.0 ) );\n}\nfloat viewZToOrthographicDepth( const in float viewZ, const in float near, const in float far ) {\n\treturn ( viewZ + near ) / ( near - far );\n}\nfloat orthographicDepthToViewZ( const in float depth, const in float near, const in float far ) {\n\treturn depth * ( near - far ) - near;\n}\nfloat viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {\n\treturn ( ( near + viewZ ) * far ) / ( ( far - near ) * viewZ );\n}\nfloat perspectiveDepthToViewZ( const in float depth, const in float near, const in float far ) {\n\treturn ( near * far ) / ( ( far - near ) * depth - far );\n}";var Va="#ifdef PREMULTIPLIED_ALPHA\n\tgl_FragColor.rgb *= gl_FragColor.a;\n#endif";var Ha="vec4 mvPosition = vec4( transformed, 1.0 );\n#ifdef USE_BATCHING\n\tmvPosition = batchingMatrix * mvPosition;\n#endif\n#ifdef USE_INSTANCING\n\tmvPosition = instanceMatrix * mvPosition;\n#endif\nmvPosition = modelViewMatrix * mvPosition;\ngl_Position = projectionMatrix * mvPosition;";var Wa="#ifdef DITHERING\n\tgl_FragColor.rgb = dithering( gl_FragColor.rgb );\n#endif";var ka="#ifdef DITHERING\n\tvec3 dithering( vec3 color ) {\n\t\tfloat grid_position = rand( gl_FragCoord.xy );\n\t\tvec3 dither_shift_RGB = vec3( 0.25 / 255.0, -0.25 / 255.0, 0.25 / 255.0 );\n\t\tdither_shift_RGB = mix( 2.0 * dither_shift_RGB, -2.0 * dither_shift_RGB, grid_position );\n\t\treturn color + dither_shift_RGB;\n\t}\n#endif";var za="float roughnessFactor = roughness;\n#ifdef USE_ROUGHNESSMAP\n\tvec4 texelRoughness = texture2D( roughnessMap, vRoughnessMapUv );\n\troughnessFactor *= texelRoughness.g;\n#endif";var Xa="#ifdef USE_ROUGHNESSMAP\n\tuniform sampler2D roughnessMap;\n#endif";var ja="#if NUM_SPOT_LIGHT_COORDS > 0\n\tvarying vec4 vSpotLightCoord[ NUM_SPOT_LIGHT_COORDS ];\n#endif\n#if NUM_SPOT_LIGHT_MAPS > 0\n\tuniform sampler2D spotLightMap[ NUM_SPOT_LIGHT_MAPS ];\n#endif\n#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\t\tuniform sampler2D directionalShadowMap[ NUM_DIR_LIGHT_SHADOWS ];\n\t\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\n\t\tstruct DirectionalLightShadow {\n\t\t\tfloat shadowIntensity;\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t};\n\t\tuniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_SPOT_LIGHT_SHADOWS > 0\n\t\tuniform sampler2D spotShadowMap[ NUM_SPOT_LIGHT_SHADOWS ];\n\t\tstruct SpotLightShadow {\n\t\t\tfloat shadowIntensity;\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t};\n\t\tuniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\t\tuniform sampler2D pointShadowMap[ NUM_POINT_LIGHT_SHADOWS ];\n\t\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\n\t\tstruct PointLightShadow {\n\t\t\tfloat shadowIntensity;\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t\tfloat shadowCameraNear;\n\t\t\tfloat shadowCameraFar;\n\t\t};\n\t\tuniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];\n\t#endif\n\tfloat texture2DCompare( sampler2D depths, vec2 uv, float compare ) {\n\t\treturn step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );\n\t}\n\tvec2 texture2DDistribution( sampler2D shadow, vec2 uv ) {\n\t\treturn unpackRGBATo2Half( texture2D( shadow, uv ) );\n\t}\n\tfloat VSMShadow (sampler2D shadow, vec2 uv, float compare ){\n\t\tfloat occlusion = 1.0;\n\t\tvec2 distribution = texture2DDistribution( shadow, uv );\n\t\tfloat hard_shadow = step( compare , distribution.x );\n\t\tif (hard_shadow != 1.0 ) {\n\t\t\tfloat distance = compare - distribution.x ;\n\t\t\tfloat variance = max( 0.00000, distribution.y * distribution.y );\n\t\t\tfloat softness_probability = variance / (variance + distance * distance );\t\t\tsoftness_probability = clamp( ( softness_probability - 0.3 ) / ( 0.95 - 0.3 ), 0.0, 1.0 );\t\t\tocclusion = clamp( max( hard_shadow, softness_probability ), 0.0, 1.0 );\n\t\t}\n\t\treturn occlusion;\n\t}\n\tfloat getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowIntensity, float shadowBias, float shadowRadius, vec4 shadowCoord ) {\n\t\tfloat shadow = 1.0;\n\t\tshadowCoord.xyz /= shadowCoord.w;\n\t\tshadowCoord.z += shadowBias;\n\t\tbool inFrustum = shadowCoord.x >= 0.0 && shadowCoord.x <= 1.0 && shadowCoord.y >= 0.0 && shadowCoord.y <= 1.0;\n\t\tbool frustumTest = inFrustum && shadowCoord.z <= 1.0;\n\t\tif ( frustumTest ) {\n\t\t#if defined( SHADOWMAP_TYPE_PCF )\n\t\t\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n\t\t\tfloat dx0 = - texelSize.x * shadowRadius;\n\t\t\tfloat dy0 = - texelSize.y * shadowRadius;\n\t\t\tfloat dx1 = + texelSize.x * shadowRadius;\n\t\t\tfloat dy1 = + texelSize.y * shadowRadius;\n\t\t\tfloat dx2 = dx0 / 2.0;\n\t\t\tfloat dy2 = dy0 / 2.0;\n\t\t\tfloat dx3 = dx1 / 2.0;\n\t\t\tfloat dy3 = dy1 / 2.0;\n\t\t\tshadow = (\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy2 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy2 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy2 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy3 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy3 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy3 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\n\t\t\t) * ( 1.0 / 17.0 );\n\t\t#elif defined( SHADOWMAP_TYPE_PCF_SOFT )\n\t\t\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n\t\t\tfloat dx = texelSize.x;\n\t\t\tfloat dy = texelSize.y;\n\t\t\tvec2 uv = shadowCoord.xy;\n\t\t\tvec2 f = fract( uv * shadowMapSize + 0.5 );\n\t\t\tuv -= f * texelSize;\n\t\t\tshadow = (\n\t\t\t\ttexture2DCompare( shadowMap, uv, shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, uv + vec2( dx, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, uv + vec2( 0.0, dy ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, uv + texelSize, shadowCoord.z ) +\n\t\t\t\tmix( texture2DCompare( shadowMap, uv + vec2( -dx, 0.0 ), shadowCoord.z ),\n\t\t\t\t\t texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 0.0 ), shadowCoord.z ),\n\t\t\t\t\t f.x ) +\n\t\t\t\tmix( texture2DCompare( shadowMap, uv + vec2( -dx, dy ), shadowCoord.z ),\n\t\t\t\t\t texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, dy ), shadowCoord.z ),\n\t\t\t\t\t f.x ) +\n\t\t\t\tmix( texture2DCompare( shadowMap, uv + vec2( 0.0, -dy ), shadowCoord.z ),\n\t\t\t\t\t texture2DCompare( shadowMap, uv + vec2( 0.0, 2.0 * dy ), shadowCoord.z ),\n\t\t\t\t\t f.y ) +\n\t\t\t\tmix( texture2DCompare( shadowMap, uv + vec2( dx, -dy ), shadowCoord.z ),\n\t\t\t\t\t texture2DCompare( shadowMap, uv + vec2( dx, 2.0 * dy ), shadowCoord.z ),\n\t\t\t\t\t f.y ) +\n\t\t\t\tmix( mix( texture2DCompare( shadowMap, uv + vec2( -dx, -dy ), shadowCoord.z ),\n\t\t\t\t\t\t  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, -dy ), shadowCoord.z ),\n\t\t\t\t\t\t  f.x ),\n\t\t\t\t\t mix( texture2DCompare( shadowMap, uv + vec2( -dx, 2.0 * dy ), shadowCoord.z ),\n\t\t\t\t\t\t  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 2.0 * dy ), shadowCoord.z ),\n\t\t\t\t\t\t  f.x ),\n\t\t\t\t\t f.y )\n\t\t\t) * ( 1.0 / 9.0 );\n\t\t#elif defined( SHADOWMAP_TYPE_VSM )\n\t\t\tshadow = VSMShadow( shadowMap, shadowCoord.xy, shadowCoord.z );\n\t\t#else\n\t\t\tshadow = texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );\n\t\t#endif\n\t\t}\n\t\treturn mix( 1.0, shadow, shadowIntensity );\n\t}\n\tvec2 cubeToUV( vec3 v, float texelSizeY ) {\n\t\tvec3 absV = abs( v );\n\t\tfloat scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );\n\t\tabsV *= scaleToCube;\n\t\tv *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );\n\t\tvec2 planar = v.xy;\n\t\tfloat almostATexel = 1.5 * texelSizeY;\n\t\tfloat almostOne = 1.0 - almostATexel;\n\t\tif ( absV.z >= almostOne ) {\n\t\t\tif ( v.z > 0.0 )\n\t\t\t\tplanar.x = 4.0 - v.x;\n\t\t} else if ( absV.x >= almostOne ) {\n\t\t\tfloat signX = sign( v.x );\n\t\t\tplanar.x = v.z * signX + 2.0 * signX;\n\t\t} else if ( absV.y >= almostOne ) {\n\t\t\tfloat signY = sign( v.y );\n\t\t\tplanar.x = v.x + 2.0 * signY + 2.0;\n\t\t\tplanar.y = v.z * signY - 2.0;\n\t\t}\n\t\treturn vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );\n\t}\n\tfloat getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowIntensity, float shadowBias, float shadowRadius, vec4 shadowCoord, float shadowCameraNear, float shadowCameraFar ) {\n\t\tfloat shadow = 1.0;\n\t\tvec3 lightToPosition = shadowCoord.xyz;\n\t\t\n\t\tfloat lightToPositionLength = length( lightToPosition );\n\t\tif ( lightToPositionLength - shadowCameraFar <= 0.0 && lightToPositionLength - shadowCameraNear >= 0.0 ) {\n\t\t\tfloat dp = ( lightToPositionLength - shadowCameraNear ) / ( shadowCameraFar - shadowCameraNear );\t\t\tdp += shadowBias;\n\t\t\tvec3 bd3D = normalize( lightToPosition );\n\t\t\tvec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );\n\t\t\t#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT ) || defined( SHADOWMAP_TYPE_VSM )\n\t\t\t\tvec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;\n\t\t\t\tshadow = (\n\t\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +\n\t\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +\n\t\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +\n\t\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +\n\t\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +\n\t\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +\n\t\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +\n\t\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +\n\t\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )\n\t\t\t\t) * ( 1.0 / 9.0 );\n\t\t\t#else\n\t\t\t\tshadow = texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );\n\t\t\t#endif\n\t\t}\n\t\treturn mix( 1.0, shadow, shadowIntensity );\n\t}\n#endif";var Ya="#if NUM_SPOT_LIGHT_COORDS > 0\n\tuniform mat4 spotLightMatrix[ NUM_SPOT_LIGHT_COORDS ];\n\tvarying vec4 vSpotLightCoord[ NUM_SPOT_LIGHT_COORDS ];\n#endif\n#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\t\tuniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHT_SHADOWS ];\n\t\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\n\t\tstruct DirectionalLightShadow {\n\t\t\tfloat shadowIntensity;\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t};\n\t\tuniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_SPOT_LIGHT_SHADOWS > 0\n\t\tstruct SpotLightShadow {\n\t\t\tfloat shadowIntensity;\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t};\n\t\tuniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\t\tuniform mat4 pointShadowMatrix[ NUM_POINT_LIGHT_SHADOWS ];\n\t\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\n\t\tstruct PointLightShadow {\n\t\t\tfloat shadowIntensity;\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t\tfloat shadowCameraNear;\n\t\t\tfloat shadowCameraFar;\n\t\t};\n\t\tuniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];\n\t#endif\n#endif";var qa="#if ( defined( USE_SHADOWMAP ) && ( NUM_DIR_LIGHT_SHADOWS > 0 || NUM_POINT_LIGHT_SHADOWS > 0 ) ) || ( NUM_SPOT_LIGHT_COORDS > 0 )\n\tvec3 shadowWorldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\n\tvec4 shadowWorldPosition;\n#endif\n#if defined( USE_SHADOWMAP )\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\t\t#pragma unroll_loop_start\n\t\tfor ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {\n\t\t\tshadowWorldPosition = worldPosition + vec4( shadowWorldNormal * directionalLightShadows[ i ].shadowNormalBias, 0 );\n\t\t\tvDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * shadowWorldPosition;\n\t\t}\n\t\t#pragma unroll_loop_end\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\t\t#pragma unroll_loop_start\n\t\tfor ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {\n\t\t\tshadowWorldPosition = worldPosition + vec4( shadowWorldNormal * pointLightShadows[ i ].shadowNormalBias, 0 );\n\t\t\tvPointShadowCoord[ i ] = pointShadowMatrix[ i ] * shadowWorldPosition;\n\t\t}\n\t\t#pragma unroll_loop_end\n\t#endif\n#endif\n#if NUM_SPOT_LIGHT_COORDS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_SPOT_LIGHT_COORDS; i ++ ) {\n\t\tshadowWorldPosition = worldPosition;\n\t\t#if ( defined( USE_SHADOWMAP ) && UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )\n\t\t\tshadowWorldPosition.xyz += shadowWorldNormal * spotLightShadows[ i ].shadowNormalBias;\n\t\t#endif\n\t\tvSpotLightCoord[ i ] = spotLightMatrix[ i ] * shadowWorldPosition;\n\t}\n\t#pragma unroll_loop_end\n#endif";var Ka="float getShadowMask() {\n\tfloat shadow = 1.0;\n\t#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\tDirectionalLightShadow directionalLight;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {\n\t\tdirectionalLight = directionalLightShadows[ i ];\n\t\tshadow *= receiveShadow ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowIntensity, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n\t#if NUM_SPOT_LIGHT_SHADOWS > 0\n\tSpotLightShadow spotLight;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {\n\t\tspotLight = spotLightShadows[ i ];\n\t\tshadow *= receiveShadow ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowIntensity, spotLight.shadowBias, spotLight.shadowRadius, vSpotLightCoord[ i ] ) : 1.0;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\tPointLightShadow pointLight;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {\n\t\tpointLight = pointLightShadows[ i ];\n\t\tshadow *= receiveShadow ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowIntensity, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n\t#endif\n\treturn shadow;\n}";var Za="#ifdef USE_SKINNING\n\tmat4 boneMatX = getBoneMatrix( skinIndex.x );\n\tmat4 boneMatY = getBoneMatrix( skinIndex.y );\n\tmat4 boneMatZ = getBoneMatrix( skinIndex.z );\n\tmat4 boneMatW = getBoneMatrix( skinIndex.w );\n#endif";var $a="#ifdef USE_SKINNING\n\tuniform mat4 bindMatrix;\n\tuniform mat4 bindMatrixInverse;\n\tuniform highp sampler2D boneTexture;\n\tmat4 getBoneMatrix( const in float i ) {\n\t\tint size = textureSize( boneTexture, 0 ).x;\n\t\tint j = int( i ) * 4;\n\t\tint x = j % size;\n\t\tint y = j / size;\n\t\tvec4 v1 = texelFetch( boneTexture, ivec2( x, y ), 0 );\n\t\tvec4 v2 = texelFetch( boneTexture, ivec2( x + 1, y ), 0 );\n\t\tvec4 v3 = texelFetch( boneTexture, ivec2( x + 2, y ), 0 );\n\t\tvec4 v4 = texelFetch( boneTexture, ivec2( x + 3, y ), 0 );\n\t\treturn mat4( v1, v2, v3, v4 );\n\t}\n#endif";var Qa="#ifdef USE_SKINNING\n\tvec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );\n\tvec4 skinned = vec4( 0.0 );\n\tskinned += boneMatX * skinVertex * skinWeight.x;\n\tskinned += boneMatY * skinVertex * skinWeight.y;\n\tskinned += boneMatZ * skinVertex * skinWeight.z;\n\tskinned += boneMatW * skinVertex * skinWeight.w;\n\ttransformed = ( bindMatrixInverse * skinned ).xyz;\n#endif";var Ja="#ifdef USE_SKINNING\n\tmat4 skinMatrix = mat4( 0.0 );\n\tskinMatrix += skinWeight.x * boneMatX;\n\tskinMatrix += skinWeight.y * boneMatY;\n\tskinMatrix += skinWeight.z * boneMatZ;\n\tskinMatrix += skinWeight.w * boneMatW;\n\tskinMatrix = bindMatrixInverse * skinMatrix * bindMatrix;\n\tobjectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;\n\t#ifdef USE_TANGENT\n\t\tobjectTangent = vec4( skinMatrix * vec4( objectTangent, 0.0 ) ).xyz;\n\t#endif\n#endif";var ti="float specularStrength;\n#ifdef USE_SPECULARMAP\n\tvec4 texelSpecular = texture2D( specularMap, vSpecularMapUv );\n\tspecularStrength = texelSpecular.r;\n#else\n\tspecularStrength = 1.0;\n#endif";var ni="#ifdef USE_SPECULARMAP\n\tuniform sampler2D specularMap;\n#endif";var ri="#if defined( TONE_MAPPING )\n\tgl_FragColor.rgb = toneMapping( gl_FragColor.rgb );\n#endif";var ii="#ifndef saturate\n#define saturate( a ) clamp( a, 0.0, 1.0 )\n#endif\nuniform float toneMappingExposure;\nvec3 LinearToneMapping( vec3 color ) {\n\treturn saturate( toneMappingExposure * color );\n}\nvec3 ReinhardToneMapping( vec3 color ) {\n\tcolor *= toneMappingExposure;\n\treturn saturate( color / ( vec3( 1.0 ) + color ) );\n}\nvec3 CineonToneMapping( vec3 color ) {\n\tcolor *= toneMappingExposure;\n\tcolor = max( vec3( 0.0 ), color - 0.004 );\n\treturn pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );\n}\nvec3 RRTAndODTFit( vec3 v ) {\n\tvec3 a = v * ( v + 0.0245786 ) - 0.000090537;\n\tvec3 b = v * ( 0.983729 * v + 0.4329510 ) + 0.238081;\n\treturn a / b;\n}\nvec3 ACESFilmicToneMapping( vec3 color ) {\n\tconst mat3 ACESInputMat = mat3(\n\t\tvec3( 0.59719, 0.07600, 0.02840 ),\t\tvec3( 0.35458, 0.90834, 0.13383 ),\n\t\tvec3( 0.04823, 0.01566, 0.83777 )\n\t);\n\tconst mat3 ACESOutputMat = mat3(\n\t\tvec3(  1.60475, -0.10208, -0.00327 ),\t\tvec3( -0.53108,  1.10813, -0.07276 ),\n\t\tvec3( -0.07367, -0.00605,  1.07602 )\n\t);\n\tcolor *= toneMappingExposure / 0.6;\n\tcolor = ACESInputMat * color;\n\tcolor = RRTAndODTFit( color );\n\tcolor = ACESOutputMat * color;\n\treturn saturate( color );\n}\nconst mat3 LINEAR_REC2020_TO_LINEAR_SRGB = mat3(\n\tvec3( 1.6605, - 0.1246, - 0.0182 ),\n\tvec3( - 0.5876, 1.1329, - 0.1006 ),\n\tvec3( - 0.0728, - 0.0083, 1.1187 )\n);\nconst mat3 LINEAR_SRGB_TO_LINEAR_REC2020 = mat3(\n\tvec3( 0.6274, 0.0691, 0.0164 ),\n\tvec3( 0.3293, 0.9195, 0.0880 ),\n\tvec3( 0.0433, 0.0113, 0.8956 )\n);\nvec3 agxDefaultContrastApprox( vec3 x ) {\n\tvec3 x2 = x * x;\n\tvec3 x4 = x2 * x2;\n\treturn + 15.5 * x4 * x2\n\t\t- 40.14 * x4 * x\n\t\t+ 31.96 * x4\n\t\t- 6.868 * x2 * x\n\t\t+ 0.4298 * x2\n\t\t+ 0.1191 * x\n\t\t- 0.00232;\n}\nvec3 AgXToneMapping( vec3 color ) {\n\tconst mat3 AgXInsetMatrix = mat3(\n\t\tvec3( 0.856627153315983, 0.137318972929847, 0.11189821299995 ),\n\t\tvec3( 0.0951212405381588, 0.761241990602591, 0.0767994186031903 ),\n\t\tvec3( 0.0482516061458583, 0.101439036467562, 0.811302368396859 )\n\t);\n\tconst mat3 AgXOutsetMatrix = mat3(\n\t\tvec3( 1.1271005818144368, - 0.1413297634984383, - 0.14132976349843826 ),\n\t\tvec3( - 0.11060664309660323, 1.157823702216272, - 0.11060664309660294 ),\n\t\tvec3( - 0.016493938717834573, - 0.016493938717834257, 1.2519364065950405 )\n\t);\n\tconst float AgxMinEv = - 12.47393;\tconst float AgxMaxEv = 4.026069;\n\tcolor *= toneMappingExposure;\n\tcolor = LINEAR_SRGB_TO_LINEAR_REC2020 * color;\n\tcolor = AgXInsetMatrix * color;\n\tcolor = max( color, 1e-10 );\tcolor = log2( color );\n\tcolor = ( color - AgxMinEv ) / ( AgxMaxEv - AgxMinEv );\n\tcolor = clamp( color, 0.0, 1.0 );\n\tcolor = agxDefaultContrastApprox( color );\n\tcolor = AgXOutsetMatrix * color;\n\tcolor = pow( max( vec3( 0.0 ), color ), vec3( 2.2 ) );\n\tcolor = LINEAR_REC2020_TO_LINEAR_SRGB * color;\n\tcolor = clamp( color, 0.0, 1.0 );\n\treturn color;\n}\nvec3 NeutralToneMapping( vec3 color ) {\n\tconst float StartCompression = 0.8 - 0.04;\n\tconst float Desaturation = 0.15;\n\tcolor *= toneMappingExposure;\n\tfloat x = min( color.r, min( color.g, color.b ) );\n\tfloat offset = x < 0.08 ? x - 6.25 * x * x : 0.04;\n\tcolor -= offset;\n\tfloat peak = max( color.r, max( color.g, color.b ) );\n\tif ( peak < StartCompression ) return color;\n\tfloat d = 1. - StartCompression;\n\tfloat newPeak = 1. - d * d / ( peak + d - StartCompression );\n\tcolor *= newPeak / peak;\n\tfloat g = 1. - 1. / ( Desaturation * ( peak - newPeak ) + 1. );\n\treturn mix( color, vec3( newPeak ), g );\n}\nvec3 CustomToneMapping( vec3 color ) { return color; }";var oi="#ifdef USE_TRANSMISSION\n\tmaterial.transmission = transmission;\n\tmaterial.transmissionAlpha = 1.0;\n\tmaterial.thickness = thickness;\n\tmaterial.attenuationDistance = attenuationDistance;\n\tmaterial.attenuationColor = attenuationColor;\n\t#ifdef USE_TRANSMISSIONMAP\n\t\tmaterial.transmission *= texture2D( transmissionMap, vTransmissionMapUv ).r;\n\t#endif\n\t#ifdef USE_THICKNESSMAP\n\t\tmaterial.thickness *= texture2D( thicknessMap, vThicknessMapUv ).g;\n\t#endif\n\tvec3 pos = vWorldPosition;\n\tvec3 v = normalize( cameraPosition - pos );\n\tvec3 n = inverseTransformDirection( normal, viewMatrix );\n\tvec4 transmitted = getIBLVolumeRefraction(\n\t\tn, v, material.roughness, material.diffuseColor, material.specularColor, material.specularF90,\n\t\tpos, modelMatrix, viewMatrix, projectionMatrix, material.dispersion, material.ior, material.thickness,\n\t\tmaterial.attenuationColor, material.attenuationDistance );\n\tmaterial.transmissionAlpha = mix( material.transmissionAlpha, transmitted.a, material.transmission );\n\ttotalDiffuse = mix( totalDiffuse, transmitted.rgb, material.transmission );\n#endif";var si="#ifdef USE_TRANSMISSION\n\tuniform float transmission;\n\tuniform float thickness;\n\tuniform float attenuationDistance;\n\tuniform vec3 attenuationColor;\n\t#ifdef USE_TRANSMISSIONMAP\n\t\tuniform sampler2D transmissionMap;\n\t#endif\n\t#ifdef USE_THICKNESSMAP\n\t\tuniform sampler2D thicknessMap;\n\t#endif\n\tuniform vec2 transmissionSamplerSize;\n\tuniform sampler2D transmissionSamplerMap;\n\tuniform mat4 modelMatrix;\n\tuniform mat4 projectionMatrix;\n\tvarying vec3 vWorldPosition;\n\tfloat w0( float a ) {\n\t\treturn ( 1.0 / 6.0 ) * ( a * ( a * ( - a + 3.0 ) - 3.0 ) + 1.0 );\n\t}\n\tfloat w1( float a ) {\n\t\treturn ( 1.0 / 6.0 ) * ( a *  a * ( 3.0 * a - 6.0 ) + 4.0 );\n\t}\n\tfloat w2( float a ){\n\t\treturn ( 1.0 / 6.0 ) * ( a * ( a * ( - 3.0 * a + 3.0 ) + 3.0 ) + 1.0 );\n\t}\n\tfloat w3( float a ) {\n\t\treturn ( 1.0 / 6.0 ) * ( a * a * a );\n\t}\n\tfloat g0( float a ) {\n\t\treturn w0( a ) + w1( a );\n\t}\n\tfloat g1( float a ) {\n\t\treturn w2( a ) + w3( a );\n\t}\n\tfloat h0( float a ) {\n\t\treturn - 1.0 + w1( a ) / ( w0( a ) + w1( a ) );\n\t}\n\tfloat h1( float a ) {\n\t\treturn 1.0 + w3( a ) / ( w2( a ) + w3( a ) );\n\t}\n\tvec4 bicubic( sampler2D tex, vec2 uv, vec4 texelSize, float lod ) {\n\t\tuv = uv * texelSize.zw + 0.5;\n\t\tvec2 iuv = floor( uv );\n\t\tvec2 fuv = fract( uv );\n\t\tfloat g0x = g0( fuv.x );\n\t\tfloat g1x = g1( fuv.x );\n\t\tfloat h0x = h0( fuv.x );\n\t\tfloat h1x = h1( fuv.x );\n\t\tfloat h0y = h0( fuv.y );\n\t\tfloat h1y = h1( fuv.y );\n\t\tvec2 p0 = ( vec2( iuv.x + h0x, iuv.y + h0y ) - 0.5 ) * texelSize.xy;\n\t\tvec2 p1 = ( vec2( iuv.x + h1x, iuv.y + h0y ) - 0.5 ) * texelSize.xy;\n\t\tvec2 p2 = ( vec2( iuv.x + h0x, iuv.y + h1y ) - 0.5 ) * texelSize.xy;\n\t\tvec2 p3 = ( vec2( iuv.x + h1x, iuv.y + h1y ) - 0.5 ) * texelSize.xy;\n\t\treturn g0( fuv.y ) * ( g0x * textureLod( tex, p0, lod ) + g1x * textureLod( tex, p1, lod ) ) +\n\t\t\tg1( fuv.y ) * ( g0x * textureLod( tex, p2, lod ) + g1x * textureLod( tex, p3, lod ) );\n\t}\n\tvec4 textureBicubic( sampler2D sampler, vec2 uv, float lod ) {\n\t\tvec2 fLodSize = vec2( textureSize( sampler, int( lod ) ) );\n\t\tvec2 cLodSize = vec2( textureSize( sampler, int( lod + 1.0 ) ) );\n\t\tvec2 fLodSizeInv = 1.0 / fLodSize;\n\t\tvec2 cLodSizeInv = 1.0 / cLodSize;\n\t\tvec4 fSample = bicubic( sampler, uv, vec4( fLodSizeInv, fLodSize ), floor( lod ) );\n\t\tvec4 cSample = bicubic( sampler, uv, vec4( cLodSizeInv, cLodSize ), ceil( lod ) );\n\t\treturn mix( fSample, cSample, fract( lod ) );\n\t}\n\tvec3 getVolumeTransmissionRay( const in vec3 n, const in vec3 v, const in float thickness, const in float ior, const in mat4 modelMatrix ) {\n\t\tvec3 refractionVector = refract( - v, normalize( n ), 1.0 / ior );\n\t\tvec3 modelScale;\n\t\tmodelScale.x = length( vec3( modelMatrix[ 0 ].xyz ) );\n\t\tmodelScale.y = length( vec3( modelMatrix[ 1 ].xyz ) );\n\t\tmodelScale.z = length( vec3( modelMatrix[ 2 ].xyz ) );\n\t\treturn normalize( refractionVector ) * thickness * modelScale;\n\t}\n\tfloat applyIorToRoughness( const in float roughness, const in float ior ) {\n\t\treturn roughness * clamp( ior * 2.0 - 2.0, 0.0, 1.0 );\n\t}\n\tvec4 getTransmissionSample( const in vec2 fragCoord, const in float roughness, const in float ior ) {\n\t\tfloat lod = log2( transmissionSamplerSize.x ) * applyIorToRoughness( roughness, ior );\n\t\treturn textureBicubic( transmissionSamplerMap, fragCoord.xy, lod );\n\t}\n\tvec3 volumeAttenuation( const in float transmissionDistance, const in vec3 attenuationColor, const in float attenuationDistance ) {\n\t\tif ( isinf( attenuationDistance ) ) {\n\t\t\treturn vec3( 1.0 );\n\t\t} else {\n\t\t\tvec3 attenuationCoefficient = -log( attenuationColor ) / attenuationDistance;\n\t\t\tvec3 transmittance = exp( - attenuationCoefficient * transmissionDistance );\t\t\treturn transmittance;\n\t\t}\n\t}\n\tvec4 getIBLVolumeRefraction( const in vec3 n, const in vec3 v, const in float roughness, const in vec3 diffuseColor,\n\t\tconst in vec3 specularColor, const in float specularF90, const in vec3 position, const in mat4 modelMatrix,\n\t\tconst in mat4 viewMatrix, const in mat4 projMatrix, const in float dispersion, const in float ior, const in float thickness,\n\t\tconst in vec3 attenuationColor, const in float attenuationDistance ) {\n\t\tvec4 transmittedLight;\n\t\tvec3 transmittance;\n\t\t#ifdef USE_DISPERSION\n\t\t\tfloat halfSpread = ( ior - 1.0 ) * 0.025 * dispersion;\n\t\t\tvec3 iors = vec3( ior - halfSpread, ior, ior + halfSpread );\n\t\t\tfor ( int i = 0; i < 3; i ++ ) {\n\t\t\t\tvec3 transmissionRay = getVolumeTransmissionRay( n, v, thickness, iors[ i ], modelMatrix );\n\t\t\t\tvec3 refractedRayExit = position + transmissionRay;\n\t\t\t\tvec4 ndcPos = projMatrix * viewMatrix * vec4( refractedRayExit, 1.0 );\n\t\t\t\tvec2 refractionCoords = ndcPos.xy / ndcPos.w;\n\t\t\t\trefractionCoords += 1.0;\n\t\t\t\trefractionCoords /= 2.0;\n\t\t\t\tvec4 transmissionSample = getTransmissionSample( refractionCoords, roughness, iors[ i ] );\n\t\t\t\ttransmittedLight[ i ] = transmissionSample[ i ];\n\t\t\t\ttransmittedLight.a += transmissionSample.a;\n\t\t\t\ttransmittance[ i ] = diffuseColor[ i ] * volumeAttenuation( length( transmissionRay ), attenuationColor, attenuationDistance )[ i ];\n\t\t\t}\n\t\t\ttransmittedLight.a /= 3.0;\n\t\t#else\n\t\t\tvec3 transmissionRay = getVolumeTransmissionRay( n, v, thickness, ior, modelMatrix );\n\t\t\tvec3 refractedRayExit = position + transmissionRay;\n\t\t\tvec4 ndcPos = projMatrix * viewMatrix * vec4( refractedRayExit, 1.0 );\n\t\t\tvec2 refractionCoords = ndcPos.xy / ndcPos.w;\n\t\t\trefractionCoords += 1.0;\n\t\t\trefractionCoords /= 2.0;\n\t\t\ttransmittedLight = getTransmissionSample( refractionCoords, roughness, ior );\n\t\t\ttransmittance = diffuseColor * volumeAttenuation( length( transmissionRay ), attenuationColor, attenuationDistance );\n\t\t#endif\n\t\tvec3 attenuatedColor = transmittance * transmittedLight.rgb;\n\t\tvec3 F = EnvironmentBRDF( n, v, specularColor, specularF90, roughness );\n\t\tfloat transmittanceFactor = ( transmittance.r + transmittance.g + transmittance.b ) / 3.0;\n\t\treturn vec4( ( 1.0 - F ) * attenuatedColor, 1.0 - ( 1.0 - transmittedLight.a ) * transmittanceFactor );\n\t}\n#endif";var li="#if defined( USE_UV ) || defined( USE_ANISOTROPY )\n\tvarying vec2 vUv;\n#endif\n#ifdef USE_MAP\n\tvarying vec2 vMapUv;\n#endif\n#ifdef USE_ALPHAMAP\n\tvarying vec2 vAlphaMapUv;\n#endif\n#ifdef USE_LIGHTMAP\n\tvarying vec2 vLightMapUv;\n#endif\n#ifdef USE_AOMAP\n\tvarying vec2 vAoMapUv;\n#endif\n#ifdef USE_BUMPMAP\n\tvarying vec2 vBumpMapUv;\n#endif\n#ifdef USE_NORMALMAP\n\tvarying vec2 vNormalMapUv;\n#endif\n#ifdef USE_EMISSIVEMAP\n\tvarying vec2 vEmissiveMapUv;\n#endif\n#ifdef USE_METALNESSMAP\n\tvarying vec2 vMetalnessMapUv;\n#endif\n#ifdef USE_ROUGHNESSMAP\n\tvarying vec2 vRoughnessMapUv;\n#endif\n#ifdef USE_ANISOTROPYMAP\n\tvarying vec2 vAnisotropyMapUv;\n#endif\n#ifdef USE_CLEARCOATMAP\n\tvarying vec2 vClearcoatMapUv;\n#endif\n#ifdef USE_CLEARCOAT_NORMALMAP\n\tvarying vec2 vClearcoatNormalMapUv;\n#endif\n#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n\tvarying vec2 vClearcoatRoughnessMapUv;\n#endif\n#ifdef USE_IRIDESCENCEMAP\n\tvarying vec2 vIridescenceMapUv;\n#endif\n#ifdef USE_IRIDESCENCE_THICKNESSMAP\n\tvarying vec2 vIridescenceThicknessMapUv;\n#endif\n#ifdef USE_SHEEN_COLORMAP\n\tvarying vec2 vSheenColorMapUv;\n#endif\n#ifdef USE_SHEEN_ROUGHNESSMAP\n\tvarying vec2 vSheenRoughnessMapUv;\n#endif\n#ifdef USE_SPECULARMAP\n\tvarying vec2 vSpecularMapUv;\n#endif\n#ifdef USE_SPECULAR_COLORMAP\n\tvarying vec2 vSpecularColorMapUv;\n#endif\n#ifdef USE_SPECULAR_INTENSITYMAP\n\tvarying vec2 vSpecularIntensityMapUv;\n#endif\n#ifdef USE_TRANSMISSIONMAP\n\tuniform mat3 transmissionMapTransform;\n\tvarying vec2 vTransmissionMapUv;\n#endif\n#ifdef USE_THICKNESSMAP\n\tuniform mat3 thicknessMapTransform;\n\tvarying vec2 vThicknessMapUv;\n#endif";var ui="#if defined( USE_UV ) || defined( USE_ANISOTROPY )\n\tvarying vec2 vUv;\n#endif\n#ifdef USE_MAP\n\tuniform mat3 mapTransform;\n\tvarying vec2 vMapUv;\n#endif\n#ifdef USE_ALPHAMAP\n\tuniform mat3 alphaMapTransform;\n\tvarying vec2 vAlphaMapUv;\n#endif\n#ifdef USE_LIGHTMAP\n\tuniform mat3 lightMapTransform;\n\tvarying vec2 vLightMapUv;\n#endif\n#ifdef USE_AOMAP\n\tuniform mat3 aoMapTransform;\n\tvarying vec2 vAoMapUv;\n#endif\n#ifdef USE_BUMPMAP\n\tuniform mat3 bumpMapTransform;\n\tvarying vec2 vBumpMapUv;\n#endif\n#ifdef USE_NORMALMAP\n\tuniform mat3 normalMapTransform;\n\tvarying vec2 vNormalMapUv;\n#endif\n#ifdef USE_DISPLACEMENTMAP\n\tuniform mat3 displacementMapTransform;\n\tvarying vec2 vDisplacementMapUv;\n#endif\n#ifdef USE_EMISSIVEMAP\n\tuniform mat3 emissiveMapTransform;\n\tvarying vec2 vEmissiveMapUv;\n#endif\n#ifdef USE_METALNESSMAP\n\tuniform mat3 metalnessMapTransform;\n\tvarying vec2 vMetalnessMapUv;\n#endif\n#ifdef USE_ROUGHNESSMAP\n\tuniform mat3 roughnessMapTransform;\n\tvarying vec2 vRoughnessMapUv;\n#endif\n#ifdef USE_ANISOTROPYMAP\n\tuniform mat3 anisotropyMapTransform;\n\tvarying vec2 vAnisotropyMapUv;\n#endif\n#ifdef USE_CLEARCOATMAP\n\tuniform mat3 clearcoatMapTransform;\n\tvarying vec2 vClearcoatMapUv;\n#endif\n#ifdef USE_CLEARCOAT_NORMALMAP\n\tuniform mat3 clearcoatNormalMapTransform;\n\tvarying vec2 vClearcoatNormalMapUv;\n#endif\n#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n\tuniform mat3 clearcoatRoughnessMapTransform;\n\tvarying vec2 vClearcoatRoughnessMapUv;\n#endif\n#ifdef USE_SHEEN_COLORMAP\n\tuniform mat3 sheenColorMapTransform;\n\tvarying vec2 vSheenColorMapUv;\n#endif\n#ifdef USE_SHEEN_ROUGHNESSMAP\n\tuniform mat3 sheenRoughnessMapTransform;\n\tvarying vec2 vSheenRoughnessMapUv;\n#endif\n#ifdef USE_IRIDESCENCEMAP\n\tuniform mat3 iridescenceMapTransform;\n\tvarying vec2 vIridescenceMapUv;\n#endif\n#ifdef USE_IRIDESCENCE_THICKNESSMAP\n\tuniform mat3 iridescenceThicknessMapTransform;\n\tvarying vec2 vIridescenceThicknessMapUv;\n#endif\n#ifdef USE_SPECULARMAP\n\tuniform mat3 specularMapTransform;\n\tvarying vec2 vSpecularMapUv;\n#endif\n#ifdef USE_SPECULAR_COLORMAP\n\tuniform mat3 specularColorMapTransform;\n\tvarying vec2 vSpecularColorMapUv;\n#endif\n#ifdef USE_SPECULAR_INTENSITYMAP\n\tuniform mat3 specularIntensityMapTransform;\n\tvarying vec2 vSpecularIntensityMapUv;\n#endif\n#ifdef USE_TRANSMISSIONMAP\n\tuniform mat3 transmissionMapTransform;\n\tvarying vec2 vTransmissionMapUv;\n#endif\n#ifdef USE_THICKNESSMAP\n\tuniform mat3 thicknessMapTransform;\n\tvarying vec2 vThicknessMapUv;\n#endif";var pi="#if defined( USE_UV ) || defined( USE_ANISOTROPY )\n\tvUv = vec3( uv, 1 ).xy;\n#endif\n#ifdef USE_MAP\n\tvMapUv = ( mapTransform * vec3( MAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_ALPHAMAP\n\tvAlphaMapUv = ( alphaMapTransform * vec3( ALPHAMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_LIGHTMAP\n\tvLightMapUv = ( lightMapTransform * vec3( LIGHTMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_AOMAP\n\tvAoMapUv = ( aoMapTransform * vec3( AOMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_BUMPMAP\n\tvBumpMapUv = ( bumpMapTransform * vec3( BUMPMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_NORMALMAP\n\tvNormalMapUv = ( normalMapTransform * vec3( NORMALMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_DISPLACEMENTMAP\n\tvDisplacementMapUv = ( displacementMapTransform * vec3( DISPLACEMENTMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_EMISSIVEMAP\n\tvEmissiveMapUv = ( emissiveMapTransform * vec3( EMISSIVEMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_METALNESSMAP\n\tvMetalnessMapUv = ( metalnessMapTransform * vec3( METALNESSMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_ROUGHNESSMAP\n\tvRoughnessMapUv = ( roughnessMapTransform * vec3( ROUGHNESSMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_ANISOTROPYMAP\n\tvAnisotropyMapUv = ( anisotropyMapTransform * vec3( ANISOTROPYMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_CLEARCOATMAP\n\tvClearcoatMapUv = ( clearcoatMapTransform * vec3( CLEARCOATMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_CLEARCOAT_NORMALMAP\n\tvClearcoatNormalMapUv = ( clearcoatNormalMapTransform * vec3( CLEARCOAT_NORMALMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n\tvClearcoatRoughnessMapUv = ( clearcoatRoughnessMapTransform * vec3( CLEARCOAT_ROUGHNESSMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_IRIDESCENCEMAP\n\tvIridescenceMapUv = ( iridescenceMapTransform * vec3( IRIDESCENCEMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_IRIDESCENCE_THICKNESSMAP\n\tvIridescenceThicknessMapUv = ( iridescenceThicknessMapTransform * vec3( IRIDESCENCE_THICKNESSMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_SHEEN_COLORMAP\n\tvSheenColorMapUv = ( sheenColorMapTransform * vec3( SHEEN_COLORMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_SHEEN_ROUGHNESSMAP\n\tvSheenRoughnessMapUv = ( sheenRoughnessMapTransform * vec3( SHEEN_ROUGHNESSMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_SPECULARMAP\n\tvSpecularMapUv = ( specularMapTransform * vec3( SPECULARMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_SPECULAR_COLORMAP\n\tvSpecularColorMapUv = ( specularColorMapTransform * vec3( SPECULAR_COLORMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_SPECULAR_INTENSITYMAP\n\tvSpecularIntensityMapUv = ( specularIntensityMapTransform * vec3( SPECULAR_INTENSITYMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_TRANSMISSIONMAP\n\tvTransmissionMapUv = ( transmissionMapTransform * vec3( TRANSMISSIONMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_THICKNESSMAP\n\tvThicknessMapUv = ( thicknessMapTransform * vec3( THICKNESSMAP_UV, 1 ) ).xy;\n#endif";var mi="#if defined( USE_ENVMAP ) || defined( DISTANCE ) || defined ( USE_SHADOWMAP ) || defined ( USE_TRANSMISSION ) || NUM_SPOT_LIGHT_COORDS > 0\n\tvec4 worldPosition = vec4( transformed, 1.0 );\n\t#ifdef USE_BATCHING\n\t\tworldPosition = batchingMatrix * worldPosition;\n\t#endif\n\t#ifdef USE_INSTANCING\n\t\tworldPosition = instanceMatrix * worldPosition;\n\t#endif\n\tworldPosition = modelMatrix * worldPosition;\n#endif";const hi="varying vec2 vUv;\nuniform mat3 uvTransform;\nvoid main() {\n\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\n\tgl_Position = vec4( position.xy, 1.0, 1.0 );\n}";const gi="uniform sampler2D t2D;\nuniform float backgroundIntensity;\nvarying vec2 vUv;\nvoid main() {\n\tvec4 texColor = texture2D( t2D, vUv );\n\t#ifdef DECODE_VIDEO_TEXTURE\n\t\ttexColor = vec4( mix( pow( texColor.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), texColor.rgb * 0.0773993808, vec3( lessThanEqual( texColor.rgb, vec3( 0.04045 ) ) ) ), texColor.w );\n\t#endif\n\ttexColor.rgb *= backgroundIntensity;\n\tgl_FragColor = texColor;\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n}";const _i="varying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n\tvWorldDirection = transformDirection( position, modelMatrix );\n\t#include <begin_vertex>\n\t#include <project_vertex>\n\tgl_Position.z = gl_Position.w;\n}";const vi="#ifdef ENVMAP_TYPE_CUBE\n\tuniform samplerCube envMap;\n#elif defined( ENVMAP_TYPE_CUBE_UV )\n\tuniform sampler2D envMap;\n#endif\nuniform float flipEnvMap;\nuniform float backgroundBlurriness;\nuniform float backgroundIntensity;\nuniform mat3 backgroundRotation;\nvarying vec3 vWorldDirection;\n#include <cube_uv_reflection_fragment>\nvoid main() {\n\t#ifdef ENVMAP_TYPE_CUBE\n\t\tvec4 texColor = textureCube( envMap, backgroundRotation * vec3( flipEnvMap * vWorldDirection.x, vWorldDirection.yz ) );\n\t#elif defined( ENVMAP_TYPE_CUBE_UV )\n\t\tvec4 texColor = textureCubeUV( envMap, backgroundRotation * vWorldDirection, backgroundBlurriness );\n\t#else\n\t\tvec4 texColor = vec4( 0.0, 0.0, 0.0, 1.0 );\n\t#endif\n\ttexColor.rgb *= backgroundIntensity;\n\tgl_FragColor = texColor;\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n}";const Ei="varying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n\tvWorldDirection = transformDirection( position, modelMatrix );\n\t#include <begin_vertex>\n\t#include <project_vertex>\n\tgl_Position.z = gl_Position.w;\n}";const Si="uniform samplerCube tCube;\nuniform float tFlip;\nuniform float opacity;\nvarying vec3 vWorldDirection;\nvoid main() {\n\tvec4 texColor = textureCube( tCube, vec3( tFlip * vWorldDirection.x, vWorldDirection.yz ) );\n\tgl_FragColor = texColor;\n\tgl_FragColor.a *= opacity;\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n}";const Ti="#include <common>\n#include <batching_pars_vertex>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvarying vec2 vHighPrecisionZW;\nvoid main() {\n\t#include <uv_vertex>\n\t#include <batching_vertex>\n\t#include <skinbase_vertex>\n\t#include <morphinstance_vertex>\n\t#ifdef USE_DISPLACEMENTMAP\n\t\t#include <beginnormal_vertex>\n\t\t#include <morphnormal_vertex>\n\t\t#include <skinnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvHighPrecisionZW = gl_Position.zw;\n}";const Mi="#if DEPTH_PACKING == 3200\n\tuniform float opacity;\n#endif\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvarying vec2 vHighPrecisionZW;\nvoid main() {\n\tvec4 diffuseColor = vec4( 1.0 );\n\t#include <clipping_planes_fragment>\n\t#if DEPTH_PACKING == 3200\n\t\tdiffuseColor.a = opacity;\n\t#endif\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <alphahash_fragment>\n\t#include <logdepthbuf_fragment>\n\tfloat fragCoordZ = 0.5 * vHighPrecisionZW[0] / vHighPrecisionZW[1] + 0.5;\n\t#if DEPTH_PACKING == 3200\n\t\tgl_FragColor = vec4( vec3( 1.0 - fragCoordZ ), opacity );\n\t#elif DEPTH_PACKING == 3201\n\t\tgl_FragColor = packDepthToRGBA( fragCoordZ );\n\t#elif DEPTH_PACKING == 3202\n\t\tgl_FragColor = vec4( packDepthToRGB( fragCoordZ ), 1.0 );\n\t#elif DEPTH_PACKING == 3203\n\t\tgl_FragColor = vec4( packDepthToRG( fragCoordZ ), 0.0, 1.0 );\n\t#endif\n}";const xi="#define DISTANCE\nvarying vec3 vWorldPosition;\n#include <common>\n#include <batching_pars_vertex>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <batching_vertex>\n\t#include <skinbase_vertex>\n\t#include <morphinstance_vertex>\n\t#ifdef USE_DISPLACEMENTMAP\n\t\t#include <beginnormal_vertex>\n\t\t#include <morphnormal_vertex>\n\t\t#include <skinnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <worldpos_vertex>\n\t#include <clipping_planes_vertex>\n\tvWorldPosition = worldPosition.xyz;\n}";const bi="#define DISTANCE\nuniform vec3 referencePosition;\nuniform float nearDistance;\nuniform float farDistance;\nvarying vec3 vWorldPosition;\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main () {\n\tvec4 diffuseColor = vec4( 1.0 );\n\t#include <clipping_planes_fragment>\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <alphahash_fragment>\n\tfloat dist = length( vWorldPosition - referencePosition );\n\tdist = ( dist - nearDistance ) / ( farDistance - nearDistance );\n\tdist = saturate( dist );\n\tgl_FragColor = packDepthToRGBA( dist );\n}";const Ri="varying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n\tvWorldDirection = transformDirection( position, modelMatrix );\n\t#include <begin_vertex>\n\t#include <project_vertex>\n}";const Ai="uniform sampler2D tEquirect;\nvarying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n\tvec3 direction = normalize( vWorldDirection );\n\tvec2 sampleUV = equirectUv( direction );\n\tgl_FragColor = texture2D( tEquirect, sampleUV );\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n}";const Ci="uniform float scale;\nattribute float lineDistance;\nvarying float vLineDistance;\n#include <common>\n#include <uv_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\tvLineDistance = scale * lineDistance;\n\t#include <uv_vertex>\n\t#include <color_vertex>\n\t#include <morphinstance_vertex>\n\t#include <morphcolor_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n}";const Li="uniform vec3 diffuse;\nuniform float opacity;\nuniform float dashSize;\nuniform float totalSize;\nvarying float vLineDistance;\n#include <common>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <clipping_planes_fragment>\n\tif ( mod( vLineDistance, totalSize ) > dashSize ) {\n\t\tdiscard;\n\t}\n\tvec3 outgoingLight = vec3( 0.0 );\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\t#include <opaque_fragment>\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n}";const Ui="#include <common>\n#include <batching_pars_vertex>\n#include <uv_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <color_vertex>\n\t#include <morphinstance_vertex>\n\t#include <morphcolor_vertex>\n\t#include <batching_vertex>\n\t#if defined ( USE_ENVMAP ) || defined ( USE_SKINNING )\n\t\t#include <beginnormal_vertex>\n\t\t#include <morphnormal_vertex>\n\t\t#include <skinbase_vertex>\n\t\t#include <skinnormal_vertex>\n\t\t#include <defaultnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <fog_vertex>\n}";const Pi="uniform vec3 diffuse;\nuniform float opacity;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <clipping_planes_fragment>\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <alphahash_fragment>\n\t#include <specularmap_fragment>\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\t#ifdef USE_LIGHTMAP\n\t\tvec4 lightMapTexel = texture2D( lightMap, vLightMapUv );\n\t\treflectedLight.indirectDiffuse += lightMapTexel.rgb * lightMapIntensity * RECIPROCAL_PI;\n\t#else\n\t\treflectedLight.indirectDiffuse += vec3( 1.0 );\n\t#endif\n\t#include <aomap_fragment>\n\treflectedLight.indirectDiffuse *= diffuseColor.rgb;\n\tvec3 outgoingLight = reflectedLight.indirectDiffuse;\n\t#include <envmap_fragment>\n\t#include <opaque_fragment>\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}";const yi="#define LAMBERT\nvarying vec3 vViewPosition;\n#include <common>\n#include <batching_pars_vertex>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <color_vertex>\n\t#include <morphinstance_vertex>\n\t#include <morphcolor_vertex>\n\t#include <batching_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <normal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}";const Di="#define LAMBERT\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <normal_pars_fragment>\n#include <lights_lambert_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <clipping_planes_fragment>\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <alphahash_fragment>\n\t#include <specularmap_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\t#include <lights_lambert_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\n\t#include <envmap_fragment>\n\t#include <opaque_fragment>\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}";const wi="#define MATCAP\nvarying vec3 vViewPosition;\n#include <common>\n#include <batching_pars_vertex>\n#include <uv_pars_vertex>\n#include <color_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <color_vertex>\n\t#include <morphinstance_vertex>\n\t#include <morphcolor_vertex>\n\t#include <batching_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <normal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n\tvViewPosition = - mvPosition.xyz;\n}";const Ii="#define MATCAP\nuniform vec3 diffuse;\nuniform float opacity;\nuniform sampler2D matcap;\nvarying vec3 vViewPosition;\n#include <common>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <fog_pars_fragment>\n#include <normal_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <clipping_planes_fragment>\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <alphahash_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\tvec3 viewDir = normalize( vViewPosition );\n\tvec3 x = normalize( vec3( viewDir.z, 0.0, - viewDir.x ) );\n\tvec3 y = cross( viewDir, x );\n\tvec2 uv = vec2( dot( x, normal ), dot( y, normal ) ) * 0.495 + 0.5;\n\t#ifdef USE_MATCAP\n\t\tvec4 matcapColor = texture2D( matcap, uv );\n\t#else\n\t\tvec4 matcapColor = vec4( vec3( mix( 0.2, 0.8, uv.y ) ), 1.0 );\n\t#endif\n\tvec3 outgoingLight = diffuseColor.rgb * matcapColor.rgb;\n\t#include <opaque_fragment>\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}";const Ni="#define NORMAL\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP_TANGENTSPACE )\n\tvarying vec3 vViewPosition;\n#endif\n#include <common>\n#include <batching_pars_vertex>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <batching_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphinstance_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <normal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP_TANGENTSPACE )\n\tvViewPosition = - mvPosition.xyz;\n#endif\n}";const Oi="#define NORMAL\nuniform float opacity;\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP_TANGENTSPACE )\n\tvarying vec3 vViewPosition;\n#endif\n#include <packing>\n#include <uv_pars_fragment>\n#include <normal_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\tvec4 diffuseColor = vec4( 0.0, 0.0, 0.0, opacity );\n\t#include <clipping_planes_fragment>\n\t#include <logdepthbuf_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\tgl_FragColor = vec4( packNormalToRGB( normal ), diffuseColor.a );\n\t#ifdef OPAQUE\n\t\tgl_FragColor.a = 1.0;\n\t#endif\n}";const Fi="#define PHONG\nvarying vec3 vViewPosition;\n#include <common>\n#include <batching_pars_vertex>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <color_vertex>\n\t#include <morphcolor_vertex>\n\t#include <batching_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphinstance_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <normal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}";const Bi="#define PHONG\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform vec3 specular;\nuniform float shininess;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <normal_pars_fragment>\n#include <lights_phong_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <clipping_planes_fragment>\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <alphahash_fragment>\n\t#include <specularmap_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\t#include <lights_phong_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n\t#include <envmap_fragment>\n\t#include <opaque_fragment>\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}";const Gi="#define STANDARD\nvarying vec3 vViewPosition;\n#ifdef USE_TRANSMISSION\n\tvarying vec3 vWorldPosition;\n#endif\n#include <common>\n#include <batching_pars_vertex>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <color_vertex>\n\t#include <morphinstance_vertex>\n\t#include <morphcolor_vertex>\n\t#include <batching_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <normal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n#ifdef USE_TRANSMISSION\n\tvWorldPosition = worldPosition.xyz;\n#endif\n}";const Vi="#define STANDARD\n#ifdef PHYSICAL\n\t#define IOR\n\t#define USE_SPECULAR\n#endif\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float roughness;\nuniform float metalness;\nuniform float opacity;\n#ifdef IOR\n\tuniform float ior;\n#endif\n#ifdef USE_SPECULAR\n\tuniform float specularIntensity;\n\tuniform vec3 specularColor;\n\t#ifdef USE_SPECULAR_COLORMAP\n\t\tuniform sampler2D specularColorMap;\n\t#endif\n\t#ifdef USE_SPECULAR_INTENSITYMAP\n\t\tuniform sampler2D specularIntensityMap;\n\t#endif\n#endif\n#ifdef USE_CLEARCOAT\n\tuniform float clearcoat;\n\tuniform float clearcoatRoughness;\n#endif\n#ifdef USE_DISPERSION\n\tuniform float dispersion;\n#endif\n#ifdef USE_IRIDESCENCE\n\tuniform float iridescence;\n\tuniform float iridescenceIOR;\n\tuniform float iridescenceThicknessMinimum;\n\tuniform float iridescenceThicknessMaximum;\n#endif\n#ifdef USE_SHEEN\n\tuniform vec3 sheenColor;\n\tuniform float sheenRoughness;\n\t#ifdef USE_SHEEN_COLORMAP\n\t\tuniform sampler2D sheenColorMap;\n\t#endif\n\t#ifdef USE_SHEEN_ROUGHNESSMAP\n\t\tuniform sampler2D sheenRoughnessMap;\n\t#endif\n#endif\n#ifdef USE_ANISOTROPY\n\tuniform vec2 anisotropyVector;\n\t#ifdef USE_ANISOTROPYMAP\n\t\tuniform sampler2D anisotropyMap;\n\t#endif\n#endif\nvarying vec3 vViewPosition;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <iridescence_fragment>\n#include <cube_uv_reflection_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_physical_pars_fragment>\n#include <fog_pars_fragment>\n#include <lights_pars_begin>\n#include <normal_pars_fragment>\n#include <lights_physical_pars_fragment>\n#include <transmission_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <clearcoat_pars_fragment>\n#include <iridescence_pars_fragment>\n#include <roughnessmap_pars_fragment>\n#include <metalnessmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <clipping_planes_fragment>\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <alphahash_fragment>\n\t#include <roughnessmap_fragment>\n\t#include <metalnessmap_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <clearcoat_normal_fragment_begin>\n\t#include <clearcoat_normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\t#include <lights_physical_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\t#include <aomap_fragment>\n\tvec3 totalDiffuse = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse;\n\tvec3 totalSpecular = reflectedLight.directSpecular + reflectedLight.indirectSpecular;\n\t#include <transmission_fragment>\n\tvec3 outgoingLight = totalDiffuse + totalSpecular + totalEmissiveRadiance;\n\t#ifdef USE_SHEEN\n\t\tfloat sheenEnergyComp = 1.0 - 0.157 * max3( material.sheenColor );\n\t\toutgoingLight = outgoingLight * sheenEnergyComp + sheenSpecularDirect + sheenSpecularIndirect;\n\t#endif\n\t#ifdef USE_CLEARCOAT\n\t\tfloat dotNVcc = saturate( dot( geometryClearcoatNormal, geometryViewDir ) );\n\t\tvec3 Fcc = F_Schlick( material.clearcoatF0, material.clearcoatF90, dotNVcc );\n\t\toutgoingLight = outgoingLight * ( 1.0 - material.clearcoat * Fcc ) + ( clearcoatSpecularDirect + clearcoatSpecularIndirect ) * material.clearcoat;\n\t#endif\n\t#include <opaque_fragment>\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}";const Hi="#define TOON\nvarying vec3 vViewPosition;\n#include <common>\n#include <batching_pars_vertex>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <color_vertex>\n\t#include <morphinstance_vertex>\n\t#include <morphcolor_vertex>\n\t#include <batching_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <normal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}";const Wi="#define TOON\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <gradientmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <normal_pars_fragment>\n#include <lights_toon_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <clipping_planes_fragment>\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <alphahash_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\t#include <lights_toon_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\n\t#include <opaque_fragment>\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}";const ki="uniform float size;\nuniform float scale;\n#include <common>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\n#ifdef USE_POINTS_UV\n\tvarying vec2 vUv;\n\tuniform mat3 uvTransform;\n#endif\nvoid main() {\n\t#ifdef USE_POINTS_UV\n\t\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\n\t#endif\n\t#include <color_vertex>\n\t#include <morphinstance_vertex>\n\t#include <morphcolor_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <project_vertex>\n\tgl_PointSize = size;\n\t#ifdef USE_SIZEATTENUATION\n\t\tbool isPerspective = isPerspectiveMatrix( projectionMatrix );\n\t\tif ( isPerspective ) gl_PointSize *= ( scale / - mvPosition.z );\n\t#endif\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <worldpos_vertex>\n\t#include <fog_vertex>\n}";const zi="uniform vec3 diffuse;\nuniform float opacity;\n#include <common>\n#include <color_pars_fragment>\n#include <map_particle_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <clipping_planes_fragment>\n\tvec3 outgoingLight = vec3( 0.0 );\n\t#include <logdepthbuf_fragment>\n\t#include <map_particle_fragment>\n\t#include <color_fragment>\n\t#include <alphatest_fragment>\n\t#include <alphahash_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\t#include <opaque_fragment>\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n}";const Xi="#include <common>\n#include <batching_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <shadowmap_pars_vertex>\nvoid main() {\n\t#include <batching_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphinstance_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}";const ji="uniform vec3 color;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <logdepthbuf_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <shadowmask_pars_fragment>\nvoid main() {\n\t#include <logdepthbuf_fragment>\n\tgl_FragColor = vec4( color, opacity * ( 1.0 - getShadowMask() ) );\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n\t#include <fog_fragment>\n}";const Yi="uniform float rotation;\nuniform vec2 center;\n#include <common>\n#include <uv_pars_vertex>\n#include <fog_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\tvec4 mvPosition = modelViewMatrix[ 3 ];\n\tvec2 scale = vec2( length( modelMatrix[ 0 ].xyz ), length( modelMatrix[ 1 ].xyz ) );\n\t#ifndef USE_SIZEATTENUATION\n\t\tbool isPerspective = isPerspectiveMatrix( projectionMatrix );\n\t\tif ( isPerspective ) scale *= - mvPosition.z;\n\t#endif\n\tvec2 alignedPosition = ( position.xy - ( center - vec2( 0.5 ) ) ) * scale;\n\tvec2 rotatedPosition;\n\trotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;\n\trotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;\n\tmvPosition.xy += rotatedPosition;\n\tgl_Position = projectionMatrix * mvPosition;\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n}";const qi="uniform vec3 diffuse;\nuniform float opacity;\n#include <common>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <clipping_planes_fragment>\n\tvec3 outgoingLight = vec3( 0.0 );\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <alphahash_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\t#include <opaque_fragment>\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n\t#include <fog_fragment>\n}";const Ki={alphahash_fragment:ar,alphahash_pars_fragment:ir,alphamap_fragment:or,alphamap_pars_fragment:sr,alphatest_fragment:lr,alphatest_pars_fragment:ur,aomap_fragment:pr,aomap_pars_fragment:mr,batching_pars_vertex:hr,batching_vertex:gr,begin_vertex:_r,beginnormal_vertex:vr,bsdfs:Er,iridescence_fragment:Sr,bumpmap_pars_fragment:Tr,clipping_planes_fragment:Mr,clipping_planes_pars_fragment:xr,clipping_planes_pars_vertex:br,clipping_planes_vertex:Rr,color_fragment:Ar,color_pars_fragment:Cr,color_pars_vertex:Lr,color_vertex:Ur,common:Pr,cube_uv_reflection_fragment:yr,defaultnormal_vertex:Dr,displacementmap_pars_vertex:wr,displacementmap_vertex:Ir,emissivemap_fragment:Nr,emissivemap_pars_fragment:Or,colorspace_fragment:Fr,colorspace_pars_fragment:Br,envmap_fragment:Gr,envmap_common_pars_fragment:Vr,envmap_pars_fragment:Hr,envmap_pars_vertex:Wr,envmap_physical_pars_fragment:Jr,envmap_vertex:kr,fog_vertex:zr,fog_pars_vertex:Xr,fog_fragment:jr,fog_pars_fragment:Yr,gradientmap_pars_fragment:qr,lightmap_pars_fragment:Kr,lights_lambert_fragment:Zr,lights_lambert_pars_fragment:$r,lights_pars_begin:Qr,lights_toon_fragment:ta,lights_toon_pars_fragment:na,lights_phong_fragment:ra,lights_phong_pars_fragment:aa,lights_physical_fragment:ia,lights_physical_pars_fragment:oa,lights_fragment_begin:sa,lights_fragment_maps:la,lights_fragment_end:ua,logdepthbuf_fragment:pa,logdepthbuf_pars_fragment:ma,logdepthbuf_pars_vertex:ha,logdepthbuf_vertex:ga,map_fragment:_a,map_pars_fragment:va,map_particle_fragment:Ea,map_particle_pars_fragment:Sa,metalnessmap_fragment:Ta,metalnessmap_pars_fragment:Ma,morphinstance_vertex:xa,morphcolor_vertex:ba,morphnormal_vertex:Ra,morphtarget_pars_vertex:Aa,morphtarget_vertex:Ca,normal_fragment_begin:La,normal_fragment_maps:Ua,normal_pars_fragment:Pa,normal_pars_vertex:ya,normal_vertex:Da,normalmap_pars_fragment:wa,clearcoat_normal_fragment_begin:Ia,clearcoat_normal_fragment_maps:Na,clearcoat_pars_fragment:Oa,iridescence_pars_fragment:Fa,opaque_fragment:Ba,packing:Ga,premultiplied_alpha_fragment:Va,project_vertex:Ha,dithering_fragment:Wa,dithering_pars_fragment:ka,roughnessmap_fragment:za,roughnessmap_pars_fragment:Xa,shadowmap_pars_fragment:ja,shadowmap_pars_vertex:Ya,shadowmap_vertex:qa,shadowmask_pars_fragment:Ka,skinbase_vertex:Za,skinning_pars_vertex:$a,skinning_vertex:Qa,skinnormal_vertex:Ja,specularmap_fragment:ti,specularmap_pars_fragment:ni,tonemapping_fragment:ri,tonemapping_pars_fragment:ii,transmission_fragment:oi,transmission_pars_fragment:si,uv_pars_fragment:li,uv_pars_vertex:ui,uv_vertex:pi,worldpos_vertex:mi,background_vert:hi,background_frag:gi,backgroundCube_vert:_i,backgroundCube_frag:vi,cube_vert:Ei,cube_frag:Si,depth_vert:Ti,depth_frag:Mi,distanceRGBA_vert:xi,distanceRGBA_frag:bi,equirect_vert:Ri,equirect_frag:Ai,linedashed_vert:Ci,linedashed_frag:Li,meshbasic_vert:Ui,meshbasic_frag:Pi,meshlambert_vert:yi,meshlambert_frag:Di,meshmatcap_vert:wi,meshmatcap_frag:Ii,meshnormal_vert:Ni,meshnormal_frag:Oi,meshphong_vert:Fi,meshphong_frag:Bi,meshphysical_vert:Gi,meshphysical_frag:Vi,meshtoon_vert:Hi,meshtoon_frag:Wi,points_vert:ki,points_frag:zi,shadow_vert:Xi,shadow_frag:ji,sprite_vert:Yi,sprite_frag:qi};const Zi={common:{diffuse:{value:new a(16777215)},opacity:{value:1},map:{value:null},mapTransform:{value:new i},alphaMap:{value:null},alphaMapTransform:{value:new i},alphaTest:{value:0}},specularmap:{specularMap:{value:null},specularMapTransform:{value:new i}},envmap:{envMap:{value:null},envMapRotation:{value:new i},flipEnvMap:{value:-1},reflectivity:{value:1},ior:{value:1.5},refractionRatio:{value:.98}},aomap:{aoMap:{value:null},aoMapIntensity:{value:1},aoMapTransform:{value:new i}},lightmap:{lightMap:{value:null},lightMapIntensity:{value:1},lightMapTransform:{value:new i}},bumpmap:{bumpMap:{value:null},bumpMapTransform:{value:new i},bumpScale:{value:1}},normalmap:{normalMap:{value:null},normalMapTransform:{value:new i},normalScale:{value:new o(1,1)}},displacementmap:{displacementMap:{value:null},displacementMapTransform:{value:new i},displacementScale:{value:1},displacementBias:{value:0}},emissivemap:{emissiveMap:{value:null},emissiveMapTransform:{value:new i}},metalnessmap:{metalnessMap:{value:null},metalnessMapTransform:{value:new i}},roughnessmap:{roughnessMap:{value:null},roughnessMapTransform:{value:new i}},gradientmap:{gradientMap:{value:null}},fog:{fogDensity:{value:25e-5},fogNear:{value:1},fogFar:{value:2e3},fogColor:{value:new a(16777215)}},lights:{ambientLightColor:{value:[]},lightProbe:{value:[]},directionalLights:{value:[],properties:{direction:{},color:{}}},directionalLightShadows:{value:[],properties:{shadowIntensity:1,shadowBias:{},shadowNormalBias:{},shadowRadius:{},shadowMapSize:{}}},directionalShadowMap:{value:[]},directionalShadowMatrix:{value:[]},spotLights:{value:[],properties:{color:{},position:{},direction:{},distance:{},coneCos:{},penumbraCos:{},decay:{}}},spotLightShadows:{value:[],properties:{shadowIntensity:1,shadowBias:{},shadowNormalBias:{},shadowRadius:{},shadowMapSize:{}}},spotLightMap:{value:[]},spotShadowMap:{value:[]},spotLightMatrix:{value:[]},pointLights:{value:[],properties:{color:{},position:{},decay:{},distance:{}}},pointLightShadows:{value:[],properties:{shadowIntensity:1,shadowBias:{},shadowNormalBias:{},shadowRadius:{},shadowMapSize:{},shadowCameraNear:{},shadowCameraFar:{}}},pointShadowMap:{value:[]},pointShadowMatrix:{value:[]},hemisphereLights:{value:[],properties:{direction:{},skyColor:{},groundColor:{}}},rectAreaLights:{value:[],properties:{color:{},position:{},width:{},height:{}}},ltc_1:{value:null},ltc_2:{value:null}},points:{diffuse:{value:new a(16777215)},opacity:{value:1},size:{value:1},scale:{value:1},map:{value:null},alphaMap:{value:null},alphaMapTransform:{value:new i},alphaTest:{value:0},uvTransform:{value:new i}},sprite:{diffuse:{value:new a(16777215)},opacity:{value:1},center:{value:new o(.5,.5)},rotation:{value:0},map:{value:null},mapTransform:{value:new i},alphaMap:{value:null},alphaMapTransform:{value:new i},alphaTest:{value:0}}};const $i={basic:{uniforms:s([Zi.common,Zi.specularmap,Zi.envmap,Zi.aomap,Zi.lightmap,Zi.fog]),vertexShader:Ki.meshbasic_vert,fragmentShader:Ki.meshbasic_frag},lambert:{uniforms:s([Zi.common,Zi.specularmap,Zi.envmap,Zi.aomap,Zi.lightmap,Zi.emissivemap,Zi.bumpmap,Zi.normalmap,Zi.displacementmap,Zi.fog,Zi.lights,{emissive:{value:new a(0)}}]),vertexShader:Ki.meshlambert_vert,fragmentShader:Ki.meshlambert_frag},phong:{uniforms:s([Zi.common,Zi.specularmap,Zi.envmap,Zi.aomap,Zi.lightmap,Zi.emissivemap,Zi.bumpmap,Zi.normalmap,Zi.displacementmap,Zi.fog,Zi.lights,{emissive:{value:new a(0)},specular:{value:new a(1118481)},shininess:{value:30}}]),vertexShader:Ki.meshphong_vert,fragmentShader:Ki.meshphong_frag},standard:{uniforms:s([Zi.common,Zi.envmap,Zi.aomap,Zi.lightmap,Zi.emissivemap,Zi.bumpmap,Zi.normalmap,Zi.displacementmap,Zi.roughnessmap,Zi.metalnessmap,Zi.fog,Zi.lights,{emissive:{value:new a(0)},roughness:{value:1},metalness:{value:0},envMapIntensity:{value:1}}]),vertexShader:Ki.meshphysical_vert,fragmentShader:Ki.meshphysical_frag},toon:{uniforms:s([Zi.common,Zi.aomap,Zi.lightmap,Zi.emissivemap,Zi.bumpmap,Zi.normalmap,Zi.displacementmap,Zi.gradientmap,Zi.fog,Zi.lights,{emissive:{value:new a(0)}}]),vertexShader:Ki.meshtoon_vert,fragmentShader:Ki.meshtoon_frag},matcap:{uniforms:s([Zi.common,Zi.bumpmap,Zi.normalmap,Zi.displacementmap,Zi.fog,{matcap:{value:null}}]),vertexShader:Ki.meshmatcap_vert,fragmentShader:Ki.meshmatcap_frag},points:{uniforms:s([Zi.points,Zi.fog]),vertexShader:Ki.points_vert,fragmentShader:Ki.points_frag},dashed:{uniforms:s([Zi.common,Zi.fog,{scale:{value:1},dashSize:{value:1},totalSize:{value:2}}]),vertexShader:Ki.linedashed_vert,fragmentShader:Ki.linedashed_frag},depth:{uniforms:s([Zi.common,Zi.displacementmap]),vertexShader:Ki.depth_vert,fragmentShader:Ki.depth_frag},normal:{uniforms:s([Zi.common,Zi.bumpmap,Zi.normalmap,Zi.displacementmap,{opacity:{value:1}}]),vertexShader:Ki.meshnormal_vert,fragmentShader:Ki.meshnormal_frag},sprite:{uniforms:s([Zi.sprite,Zi.fog]),vertexShader:Ki.sprite_vert,fragmentShader:Ki.sprite_frag},background:{uniforms:{uvTransform:{value:new i},t2D:{value:null},backgroundIntensity:{value:1}},vertexShader:Ki.background_vert,fragmentShader:Ki.background_frag},backgroundCube:{uniforms:{envMap:{value:null},flipEnvMap:{value:-1},backgroundBlurriness:{value:0},backgroundIntensity:{value:1},backgroundRotation:{value:new i}},vertexShader:Ki.backgroundCube_vert,fragmentShader:Ki.backgroundCube_frag},cube:{uniforms:{tCube:{value:null},tFlip:{value:-1},opacity:{value:1}},vertexShader:Ki.cube_vert,fragmentShader:Ki.cube_frag},equirect:{uniforms:{tEquirect:{value:null}},vertexShader:Ki.equirect_vert,fragmentShader:Ki.equirect_frag},distanceRGBA:{uniforms:s([Zi.common,Zi.displacementmap,{referencePosition:{value:new l},nearDistance:{value:1},farDistance:{value:1e3}}]),vertexShader:Ki.distanceRGBA_vert,fragmentShader:Ki.distanceRGBA_frag},shadow:{uniforms:s([Zi.lights,Zi.fog,{color:{value:new a(0)},opacity:{value:1}}]),vertexShader:Ki.shadow_vert,fragmentShader:Ki.shadow_frag}};$i.physical={uniforms:s([$i.standard.uniforms,{clearcoat:{value:0},clearcoatMap:{value:null},clearcoatMapTransform:{value:new i},clearcoatNormalMap:{value:null},clearcoatNormalMapTransform:{value:new i},clearcoatNormalScale:{value:new o(1,1)},clearcoatRoughness:{value:0},clearcoatRoughnessMap:{value:null},clearcoatRoughnessMapTransform:{value:new i},dispersion:{value:0},iridescence:{value:0},iridescenceMap:{value:null},iridescenceMapTransform:{value:new i},iridescenceIOR:{value:1.3},iridescenceThicknessMinimum:{value:100},iridescenceThicknessMaximum:{value:400},iridescenceThicknessMap:{value:null},iridescenceThicknessMapTransform:{value:new i},sheen:{value:0},sheenColor:{value:new a(0)},sheenColorMap:{value:null},sheenColorMapTransform:{value:new i},sheenRoughness:{value:1},sheenRoughnessMap:{value:null},sheenRoughnessMapTransform:{value:new i},transmission:{value:0},transmissionMap:{value:null},transmissionMapTransform:{value:new i},transmissionSamplerSize:{value:new o},transmissionSamplerMap:{value:null},thickness:{value:0},thicknessMap:{value:null},thicknessMapTransform:{value:new i},attenuationDistance:{value:0},attenuationColor:{value:new a(0)},specularColor:{value:new a(1,1,1)},specularColorMap:{value:null},specularColorMapTransform:{value:new i},specularIntensity:{value:1},specularIntensityMap:{value:null},specularIntensityMapTransform:{value:new i},anisotropyVector:{value:new o},anisotropyMap:{value:null},anisotropyMapTransform:{value:new i}}]),vertexShader:Ki.meshphysical_vert,fragmentShader:Ki.meshphysical_frag};const Qi={r:0,b:0,g:0};const Ji=new c;const to=new f;function WebGLBackground(e,t,n,r,i,o,s){const l=new a(0);let c=o===true?0:1;let u;let d;let f=null;let p=0;let m=null;function getBackground(e){let r=e.isScene===true?e.background:null;if(r&&r.isTexture){const a=e.backgroundBlurriness>0;r=(a?n:t).get(r)}return r}function render(t){let n=false;const a=getBackground(t);if(a===null)setClear(l,c);else if(a&&a.isColor){setClear(a,1);n=true}const i=e.xr.getEnvironmentBlendMode();i==="additive"?r.buffers.color.setClear(0,0,0,1,s):i==="alpha-blend"&&r.buffers.color.setClear(0,0,0,0,s);if(e.autoClear||n){r.buffers.depth.setTest(true);r.buffers.depth.setMask(true);r.buffers.color.setMask(true);e.clear(e.autoClearColor,e.autoClearDepth,e.autoClearStencil)}}function addToRenderList(t,n){const r=getBackground(n);if(r&&(r.isCubeTexture||r.mapping===v)){if(d===void 0){d=new E(new S(1,1,1),new T({name:"BackgroundCubeMaterial",uniforms:M($i.backgroundCube.uniforms),vertexShader:$i.backgroundCube.vertexShader,fragmentShader:$i.backgroundCube.fragmentShader,side:x,depthTest:false,depthWrite:false,fog:false}));d.geometry.deleteAttribute("normal");d.geometry.deleteAttribute("uv");d.onBeforeRender=function(e,t,n){this.matrixWorld.copyPosition(n.matrixWorld)};Object.defineProperty(d.material,"envMap",{get:function(){return this.uniforms.envMap.value}});i.update(d)}Ji.copy(n.backgroundRotation);Ji.x*=-1;Ji.y*=-1;Ji.z*=-1;if(r.isCubeTexture&&r.isRenderTargetTexture===false){Ji.y*=-1;Ji.z*=-1}d.material.uniforms.envMap.value=r;d.material.uniforms.flipEnvMap.value=r.isCubeTexture&&r.isRenderTargetTexture===false?-1:1;d.material.uniforms.backgroundBlurriness.value=n.backgroundBlurriness;d.material.uniforms.backgroundIntensity.value=n.backgroundIntensity;d.material.uniforms.backgroundRotation.value.setFromMatrix4(to.makeRotationFromEuler(Ji));d.material.toneMapped=b.getTransfer(r.colorSpace)!==R;if(f!==r||p!==r.version||m!==e.toneMapping){d.material.needsUpdate=true;f=r;p=r.version;m=e.toneMapping}d.layers.enableAll();t.unshift(d,d.geometry,d.material,0,0,null)}else if(r&&r.isTexture){if(u===void 0){u=new E(new C(2,2),new T({name:"BackgroundMaterial",uniforms:M($i.background.uniforms),vertexShader:$i.background.vertexShader,fragmentShader:$i.background.fragmentShader,side:L,depthTest:false,depthWrite:false,fog:false}));u.geometry.deleteAttribute("normal");Object.defineProperty(u.material,"map",{get:function(){return this.uniforms.t2D.value}});i.update(u)}u.material.uniforms.t2D.value=r;u.material.uniforms.backgroundIntensity.value=n.backgroundIntensity;u.material.toneMapped=b.getTransfer(r.colorSpace)!==R;r.matrixAutoUpdate===true&&r.updateMatrix();u.material.uniforms.uvTransform.value.copy(r.matrix);if(f!==r||p!==r.version||m!==e.toneMapping){u.material.needsUpdate=true;f=r;p=r.version;m=e.toneMapping}u.layers.enableAll();t.unshift(u,u.geometry,u.material,0,0,null)}}function setClear(t,n){t.getRGB(Qi,U(e));r.buffers.color.setClear(Qi.r,Qi.g,Qi.b,n,s)}function dispose(){if(d!==void 0){d.geometry.dispose();d.material.dispose()}if(u!==void 0){u.geometry.dispose();u.material.dispose()}}return{getClearColor:function(){return l},setClearColor:function(e,t=1){l.set(e);c=t;setClear(l,c)},getClearAlpha:function(){return c},setClearAlpha:function(e){c=e;setClear(l,c)},render:render,addToRenderList:addToRenderList,dispose:dispose}}function WebGLBindingStates(e,t){const n=e.getParameter(e.MAX_VERTEX_ATTRIBS);const r={};const a=createBindingState(null);let i=a;let o=false;function setup(n,r,a,s,l){let c=false;const u=getBindingState(s,a,r);if(i!==u){i=u;bindVertexArrayObject(i.object)}c=needsUpdate(n,s,a,l);c&&saveCache(n,s,a,l);l!==null&&t.update(l,e.ELEMENT_ARRAY_BUFFER);if(c||o){o=false;setupVertexAttributes(n,r,a,s);l!==null&&e.bindBuffer(e.ELEMENT_ARRAY_BUFFER,t.get(l).buffer)}}function createVertexArrayObject(){return e.createVertexArray()}function bindVertexArrayObject(t){return e.bindVertexArray(t)}function deleteVertexArrayObject(t){return e.deleteVertexArray(t)}function getBindingState(e,t,n){const a=n.wireframe===true;let i=r[e.id];if(i===void 0){i={};r[e.id]=i}let o=i[t.id];if(o===void 0){o={};i[t.id]=o}let s=o[a];if(s===void 0){s=createBindingState(createVertexArrayObject());o[a]=s}return s}function createBindingState(e){const t=[];const r=[];const a=[];for(let e=0;e<n;e++){t[e]=0;r[e]=0;a[e]=0}return{geometry:null,program:null,wireframe:false,newAttributes:t,enabledAttributes:r,attributeDivisors:a,object:e,attributes:{},index:null}}function needsUpdate(e,t,n,r){const a=i.attributes;const o=t.attributes;let s=0;const l=n.getAttributes();for(const t in l){const n=l[t];if(n.location>=0){const n=a[t];let r=o[t];if(r===void 0){t==="instanceMatrix"&&e.instanceMatrix&&(r=e.instanceMatrix);t==="instanceColor"&&e.instanceColor&&(r=e.instanceColor)}if(n===void 0)return true;if(n.attribute!==r)return true;if(r&&n.data!==r.data)return true;s++}}return i.attributesNum!==s||i.index!==r}function saveCache(e,t,n,r){const a={};const o=t.attributes;let s=0;const l=n.getAttributes();for(const t in l){const n=l[t];if(n.location>=0){let n=o[t];if(n===void 0){t==="instanceMatrix"&&e.instanceMatrix&&(n=e.instanceMatrix);t==="instanceColor"&&e.instanceColor&&(n=e.instanceColor)}const r={};r.attribute=n;n&&n.data&&(r.data=n.data);a[t]=r;s++}}i.attributes=a;i.attributesNum=s;i.index=r}function initAttributes(){const e=i.newAttributes;for(let t=0,n=e.length;t<n;t++)e[t]=0}function enableAttribute(e){enableAttributeAndDivisor(e,0)}function enableAttributeAndDivisor(t,n){const r=i.newAttributes;const a=i.enabledAttributes;const o=i.attributeDivisors;r[t]=1;if(a[t]===0){e.enableVertexAttribArray(t);a[t]=1}if(o[t]!==n){e.vertexAttribDivisor(t,n);o[t]=n}}function disableUnusedAttributes(){const t=i.newAttributes;const n=i.enabledAttributes;for(let r=0,a=n.length;r<a;r++)if(n[r]!==t[r]){e.disableVertexAttribArray(r);n[r]=0}}function vertexAttribPointer(t,n,r,a,i,o,s){s===true?e.vertexAttribIPointer(t,n,r,i,o):e.vertexAttribPointer(t,n,r,a,i,o)}function setupVertexAttributes(n,r,a,i){initAttributes();const o=i.attributes;const s=a.getAttributes();const l=r.defaultAttributeValues;for(const r in s){const a=s[r];if(a.location>=0){let s=o[r];if(s===void 0){r==="instanceMatrix"&&n.instanceMatrix&&(s=n.instanceMatrix);r==="instanceColor"&&n.instanceColor&&(s=n.instanceColor)}if(s!==void 0){const r=s.normalized;const o=s.itemSize;const l=t.get(s);if(l===void 0)continue;const c=l.buffer;const u=l.type;const d=l.bytesPerElement;const f=u===e.INT||u===e.UNSIGNED_INT||s.gpuType===y;if(s.isInterleavedBufferAttribute){const t=s.data;const l=t.stride;const p=s.offset;if(t.isInstancedInterleavedBuffer){for(let e=0;e<a.locationSize;e++)enableAttributeAndDivisor(a.location+e,t.meshPerAttribute);n.isInstancedMesh!==true&&i._maxInstanceCount===void 0&&(i._maxInstanceCount=t.meshPerAttribute*t.count)}else for(let e=0;e<a.locationSize;e++)enableAttribute(a.location+e);e.bindBuffer(e.ARRAY_BUFFER,c);for(let e=0;e<a.locationSize;e++)vertexAttribPointer(a.location+e,o/a.locationSize,u,r,l*d,(p+o/a.locationSize*e)*d,f)}else{if(s.isInstancedBufferAttribute){for(let e=0;e<a.locationSize;e++)enableAttributeAndDivisor(a.location+e,s.meshPerAttribute);n.isInstancedMesh!==true&&i._maxInstanceCount===void 0&&(i._maxInstanceCount=s.meshPerAttribute*s.count)}else for(let e=0;e<a.locationSize;e++)enableAttribute(a.location+e);e.bindBuffer(e.ARRAY_BUFFER,c);for(let e=0;e<a.locationSize;e++)vertexAttribPointer(a.location+e,o/a.locationSize,u,r,o*d,o/a.locationSize*e*d,f)}}else if(l!==void 0){const t=l[r];if(t!==void 0)switch(t.length){case 2:e.vertexAttrib2fv(a.location,t);break;case 3:e.vertexAttrib3fv(a.location,t);break;case 4:e.vertexAttrib4fv(a.location,t);break;default:e.vertexAttrib1fv(a.location,t)}}}}disableUnusedAttributes()}function dispose(){reset();for(const e in r){const t=r[e];for(const e in t){const n=t[e];for(const e in n){deleteVertexArrayObject(n[e].object);delete n[e]}delete t[e]}delete r[e]}}function releaseStatesOfGeometry(e){if(r[e.id]===void 0)return;const t=r[e.id];for(const e in t){const n=t[e];for(const e in n){deleteVertexArrayObject(n[e].object);delete n[e]}delete t[e]}delete r[e.id]}function releaseStatesOfProgram(e){for(const t in r){const n=r[t];if(n[e.id]===void 0)continue;const a=n[e.id];for(const e in a){deleteVertexArrayObject(a[e].object);delete a[e]}delete n[e.id]}}function reset(){resetDefaultState();o=true;if(i!==a){i=a;bindVertexArrayObject(i.object)}}function resetDefaultState(){a.geometry=null;a.program=null;a.wireframe=false}return{setup:setup,reset:reset,resetDefaultState:resetDefaultState,dispose:dispose,releaseStatesOfGeometry:releaseStatesOfGeometry,releaseStatesOfProgram:releaseStatesOfProgram,initAttributes:initAttributes,enableAttribute:enableAttribute,disableUnusedAttributes:disableUnusedAttributes}}function WebGLBufferRenderer(e,t,n){let r;function setMode(e){r=e}function render(t,a){e.drawArrays(r,t,a);n.update(a,r,1)}function renderInstances(t,a,i){if(i!==0){e.drawArraysInstanced(r,t,a,i);n.update(a,r,i)}}function renderMultiDraw(e,a,i){if(i===0)return;const o=t.get("WEBGL_multi_draw");o.multiDrawArraysWEBGL(r,e,0,a,0,i);let s=0;for(let e=0;e<i;e++)s+=a[e];n.update(s,r,1)}function renderMultiDrawInstances(e,a,i,o){if(i===0)return;const s=t.get("WEBGL_multi_draw");if(s===null)for(let t=0;t<e.length;t++)renderInstances(e[t],a[t],o[t]);else{s.multiDrawArraysInstancedWEBGL(r,e,0,a,0,o,0,i);let t=0;for(let e=0;e<i;e++)t+=a[e]*o[e];n.update(t,r,1)}}this.setMode=setMode;this.render=render;this.renderInstances=renderInstances;this.renderMultiDraw=renderMultiDraw;this.renderMultiDrawInstances=renderMultiDrawInstances}function WebGLCapabilities(e,t,n,r){let a;function getMaxAnisotropy(){if(a!==void 0)return a;if(t.has("EXT_texture_filter_anisotropic")===true){const n=t.get("EXT_texture_filter_anisotropic");a=e.getParameter(n.MAX_TEXTURE_MAX_ANISOTROPY_EXT)}else a=0;return a}function textureFormatReadable(t){return t===N||r.convert(t)===e.getParameter(e.IMPLEMENTATION_COLOR_READ_FORMAT)}function textureTypeReadable(n){const a=n===O&&(t.has("EXT_color_buffer_half_float")||t.has("EXT_color_buffer_float"));return!(n!==F&&r.convert(n)!==e.getParameter(e.IMPLEMENTATION_COLOR_READ_TYPE)&&n!==B&&!a)}function getMaxPrecision(t){if(t==="highp"){if(e.getShaderPrecisionFormat(e.VERTEX_SHADER,e.HIGH_FLOAT).precision>0&&e.getShaderPrecisionFormat(e.FRAGMENT_SHADER,e.HIGH_FLOAT).precision>0)return"highp";t="mediump"}return t==="mediump"&&e.getShaderPrecisionFormat(e.VERTEX_SHADER,e.MEDIUM_FLOAT).precision>0&&e.getShaderPrecisionFormat(e.FRAGMENT_SHADER,e.MEDIUM_FLOAT).precision>0?"mediump":"lowp"}let i=n.precision!==void 0?n.precision:"highp";const o=getMaxPrecision(i);if(o!==i){console.warn("THREE.WebGLRenderer:",i,"not supported, using",o,"instead.");i=o}const s=n.logarithmicDepthBuffer===true;const l=n.reverseDepthBuffer===true&&t.has("EXT_clip_control");const c=e.getParameter(e.MAX_TEXTURE_IMAGE_UNITS);const u=e.getParameter(e.MAX_VERTEX_TEXTURE_IMAGE_UNITS);const d=e.getParameter(e.MAX_TEXTURE_SIZE);const f=e.getParameter(e.MAX_CUBE_MAP_TEXTURE_SIZE);const p=e.getParameter(e.MAX_VERTEX_ATTRIBS);const m=e.getParameter(e.MAX_VERTEX_UNIFORM_VECTORS);const h=e.getParameter(e.MAX_VARYING_VECTORS);const g=e.getParameter(e.MAX_FRAGMENT_UNIFORM_VECTORS);const _=u>0;const v=e.getParameter(e.MAX_SAMPLES);return{isWebGL2:true,getMaxAnisotropy:getMaxAnisotropy,getMaxPrecision:getMaxPrecision,textureFormatReadable:textureFormatReadable,textureTypeReadable:textureTypeReadable,precision:i,logarithmicDepthBuffer:s,reverseDepthBuffer:l,maxTextures:c,maxVertexTextures:u,maxTextureSize:d,maxCubemapSize:f,maxAttributes:p,maxVertexUniforms:m,maxVaryings:h,maxFragmentUniforms:g,vertexTextures:_,maxSamples:v}}function WebGLClipping(e){const t=this;let n=null,r=0,a=false,o=false;const s=new G,l=new i,c={value:null,needsUpdate:false};this.uniform=c;this.numPlanes=0;this.numIntersection=0;this.init=function(e,t){const n=e.length!==0||t||r!==0||a;a=t;r=e.length;return n};this.beginShadows=function(){o=true;projectPlanes(null)};this.endShadows=function(){o=false};this.setGlobalState=function(e,t){n=projectPlanes(e,t,0)};this.setState=function(t,i,s){const l=t.clippingPlanes,u=t.clipIntersection,d=t.clipShadows;const f=e.get(t);if(!a||l===null||l.length===0||o&&!d)o?projectPlanes(null):resetGlobalState();else{const e=o?0:r,t=e*4;let a=f.clippingState||null;c.value=a;a=projectPlanes(l,i,t,s);for(let e=0;e!==t;++e)a[e]=n[e];f.clippingState=a;this.numIntersection=u?this.numPlanes:0;this.numPlanes+=e}};function resetGlobalState(){if(c.value!==n){c.value=n;c.needsUpdate=r>0}t.numPlanes=r;t.numIntersection=0}function projectPlanes(e,n,r,a){const i=e!==null?e.length:0;let o=null;if(i!==0){o=c.value;if(a!==true||o===null){const t=r+i*4,a=n.matrixWorldInverse;l.getNormalMatrix(a);(o===null||o.length<t)&&(o=new Float32Array(t));for(let t=0,n=r;t!==i;++t,n+=4){s.copy(e[t]).applyMatrix4(a,l);s.normal.toArray(o,n);o[n+3]=s.constant}}c.value=o;c.needsUpdate=true}t.numPlanes=i;t.numIntersection=0;return o}}function WebGLCubeMaps(e){let t=new WeakMap;function mapTextureMapping(e,t){t===V?e.mapping=W:t===k&&(e.mapping=z);return e}function get(n){if(n&&n.isTexture){const r=n.mapping;if(r===V||r===k){if(t.has(n)){const e=t.get(n).texture;return mapTextureMapping(e,n.mapping)}{const r=n.image;if(r&&r.height>0){const a=new X(r.height);a.fromEquirectangularTexture(e,n);t.set(n,a);n.addEventListener("dispose",onTextureDispose);return mapTextureMapping(a.texture,n.mapping)}return null}}}return n}function onTextureDispose(e){const n=e.target;n.removeEventListener("dispose",onTextureDispose);const r=t.get(n);if(r!==void 0){t.delete(n);r.dispose()}}function dispose(){t=new WeakMap}return{get:get,dispose:dispose}}const no=4;const ro=[.125,.215,.35,.446,.526,.582];const io=20;const oo=new j;const so=new a;let lo=null;let uo=0;let po=0;let mo=false;const ho=(1+Math.sqrt(5))/2;const go=1/ho;const _o=[new l(-ho,go,0),new l(ho,go,0),new l(-go,0,ho),new l(go,0,ho),new l(0,ho,-go),new l(0,ho,go),new l(-1,1,-1),new l(1,1,-1),new l(-1,1,1),new l(1,1,1)];class PMREMGenerator{constructor(e){this._renderer=e;this._pingPongRenderTarget=null;this._lodMax=0;this._cubeSize=0;this._lodPlanes=[];this._sizeLods=[];this._sigmas=[];this._blurMaterial=null;this._cubemapMaterial=null;this._equirectMaterial=null;this._compileMaterial(this._blurMaterial)}
/**
	 * Generates a PMREM from a supplied Scene, which can be faster than using an
	 * image if networking bandwidth is low. Optional sigma specifies a blur radius
	 * in radians to be applied to the scene before PMREM generation. Optional near
	 * and far planes ensure the scene is rendered in its entirety (the cubeCamera
	 * is placed at the origin).
	 *
	 * @param {Scene} scene
	 * @param {number} sigma
	 * @param {number} near
	 * @param {number} far
	 * @return {WebGLRenderTarget}
	 */fromScene(e,t=0,n=.1,r=100){lo=this._renderer.getRenderTarget();uo=this._renderer.getActiveCubeFace();po=this._renderer.getActiveMipmapLevel();mo=this._renderer.xr.enabled;this._renderer.xr.enabled=false;this._setSize(256);const a=this._allocateTargets();a.depthBuffer=true;this._sceneToCubeUV(e,n,r,a);t>0&&this._blur(a,0,0,t);this._applyPMREM(a);this._cleanup(a);return a}
/**
	 * Generates a PMREM from an equirectangular texture, which can be either LDR
	 * or HDR. The ideal input image size is 1k (1024 x 512),
	 * as this matches best with the 256 x 256 cubemap output.
	 * The smallest supported equirectangular image size is 64 x 32.
	 *
	 * @param {Texture} equirectangular
	 * @param {WebGLRenderTarget} [renderTarget=null] - Optional render target.
	 * @return {WebGLRenderTarget}
	 */fromEquirectangular(e,t=null){return this._fromTexture(e,t)}
/**
	 * Generates a PMREM from an cubemap texture, which can be either LDR
	 * or HDR. The ideal input cube size is 256 x 256,
	 * as this matches best with the 256 x 256 cubemap output.
	 * The smallest supported cube size is 16 x 16.
	 *
	 * @param {Texture} cubemap
	 * @param {null} [renderTarget=null] - Optional render target.
	 * @return {WebGLRenderTarget}
	 */fromCubemap(e,t=null){return this._fromTexture(e,t)}compileCubemapShader(){if(this._cubemapMaterial===null){this._cubemapMaterial=_getCubemapMaterial();this._compileMaterial(this._cubemapMaterial)}}compileEquirectangularShader(){if(this._equirectMaterial===null){this._equirectMaterial=_getEquirectMaterial();this._compileMaterial(this._equirectMaterial)}}dispose(){this._dispose();this._cubemapMaterial!==null&&this._cubemapMaterial.dispose();this._equirectMaterial!==null&&this._equirectMaterial.dispose()}_setSize(e){this._lodMax=Math.floor(Math.log2(e));this._cubeSize=Math.pow(2,this._lodMax)}_dispose(){this._blurMaterial!==null&&this._blurMaterial.dispose();this._pingPongRenderTarget!==null&&this._pingPongRenderTarget.dispose();for(let e=0;e<this._lodPlanes.length;e++)this._lodPlanes[e].dispose()}_cleanup(e){this._renderer.setRenderTarget(lo,uo,po);this._renderer.xr.enabled=mo;e.scissorTest=false;_setViewport(e,0,0,e.width,e.height)}_fromTexture(e,t){e.mapping===W||e.mapping===z?this._setSize(e.image.length===0?16:e.image[0].width||e.image[0].image.width):this._setSize(e.image.width/4);lo=this._renderer.getRenderTarget();uo=this._renderer.getActiveCubeFace();po=this._renderer.getActiveMipmapLevel();mo=this._renderer.xr.enabled;this._renderer.xr.enabled=false;const n=t||this._allocateTargets();this._textureToCubeUV(e,n);this._applyPMREM(n);this._cleanup(n);return n}_allocateTargets(){const e=3*Math.max(this._cubeSize,112);const t=4*this._cubeSize;const n={magFilter:Y,minFilter:Y,generateMipmaps:false,type:O,format:N,colorSpace:q,depthBuffer:false};const r=_createRenderTarget(e,t,n);if(this._pingPongRenderTarget===null||this._pingPongRenderTarget.width!==e||this._pingPongRenderTarget.height!==t){this._pingPongRenderTarget!==null&&this._dispose();this._pingPongRenderTarget=_createRenderTarget(e,t,n);const{_lodMax:r}=this;({sizeLods:this._sizeLods,lodPlanes:this._lodPlanes,sigmas:this._sigmas}=_createPlanes(r));this._blurMaterial=_getBlurShader(r,e,t)}return r}_compileMaterial(e){const t=new E(this._lodPlanes[0],e);this._renderer.compile(t,oo)}_sceneToCubeUV(e,t,n,r){const a=90;const i=1;const o=new K(a,i,t,n);const s=[1,-1,1,1,1,1];const l=[1,1,1,-1,-1,-1];const c=this._renderer;const u=c.autoClear;const d=c.toneMapping;c.getClearColor(so);c.toneMapping=Z;c.autoClear=false;const f=new Q({name:"PMREM.Background",side:x,depthWrite:false,depthTest:false});const p=new E(new S,f);let m=false;const h=e.background;if(h){if(h.isColor){f.color.copy(h);e.background=null;m=true}}else{f.color.copy(so);m=true}for(let t=0;t<6;t++){const n=t%3;if(n===0){o.up.set(0,s[t],0);o.lookAt(l[t],0,0)}else if(n===1){o.up.set(0,0,s[t]);o.lookAt(0,l[t],0)}else{o.up.set(0,s[t],0);o.lookAt(0,0,l[t])}const a=this._cubeSize;_setViewport(r,n*a,t>2?a:0,a,a);c.setRenderTarget(r);m&&c.render(p,o);c.render(e,o)}p.geometry.dispose();p.material.dispose();c.toneMapping=d;c.autoClear=u;e.background=h}_textureToCubeUV(e,t){const n=this._renderer;const r=e.mapping===W||e.mapping===z;if(r){this._cubemapMaterial===null&&(this._cubemapMaterial=_getCubemapMaterial());this._cubemapMaterial.uniforms.flipEnvMap.value=e.isRenderTargetTexture===false?-1:1}else this._equirectMaterial===null&&(this._equirectMaterial=_getEquirectMaterial());const a=r?this._cubemapMaterial:this._equirectMaterial;const i=new E(this._lodPlanes[0],a);const o=a.uniforms;o.envMap.value=e;const s=this._cubeSize;_setViewport(t,0,0,3*s,2*s);n.setRenderTarget(t);n.render(i,oo)}_applyPMREM(e){const t=this._renderer;const n=t.autoClear;t.autoClear=false;const r=this._lodPlanes.length;for(let t=1;t<r;t++){const n=Math.sqrt(this._sigmas[t]*this._sigmas[t]-this._sigmas[t-1]*this._sigmas[t-1]);const a=_o[(r-t-1)%_o.length];this._blur(e,t-1,t,n,a)}t.autoClear=n}
/**
	 * This is a two-pass Gaussian blur for a cubemap. Normally this is done
	 * vertically and horizontally, but this breaks down on a cube. Here we apply
	 * the blur latitudinally (around the poles), and then longitudinally (towards
	 * the poles) to approximate the orthogonally-separable blur. It is least
	 * accurate at the poles, but still does a decent job.
	 *
	 * @param {WebGLRenderTarget} cubeUVRenderTarget
	 * @param {number} lodIn
	 * @param {number} lodOut
	 * @param {number} sigma
	 * @param {Vector3} [poleAxis]
	 */_blur(e,t,n,r,a){const i=this._pingPongRenderTarget;this._halfBlur(e,i,t,n,r,"latitudinal",a);this._halfBlur(i,e,n,n,r,"longitudinal",a)}_halfBlur(e,t,n,r,a,i,o){const s=this._renderer;const l=this._blurMaterial;i!=="latitudinal"&&i!=="longitudinal"&&console.error("blur direction must be either latitudinal or longitudinal!");const c=3;const u=new E(this._lodPlanes[r],l);const d=l.uniforms;const f=this._sizeLods[n]-1;const p=isFinite(a)?Math.PI/(2*f):2*Math.PI/(2*io-1);const m=a/p;const h=isFinite(a)?1+Math.floor(c*m):io;h>io&&console.warn(`sigmaRadians, ${a}, is too large and will clip, as it requested ${h} samples when the maximum is set to ${io}`);const g=[];let _=0;for(let e=0;e<io;++e){const t=e/m;const n=Math.exp(-t*t/2);g.push(n);e===0?_+=n:e<h&&(_+=2*n)}for(let e=0;e<g.length;e++)g[e]=g[e]/_;d.envMap.value=e.texture;d.samples.value=h;d.weights.value=g;d.latitudinal.value=i==="latitudinal";o&&(d.poleAxis.value=o);const{_lodMax:v}=this;d.dTheta.value=p;d.mipInt.value=v-n;const S=this._sizeLods[r];const T=3*S*(r>v-no?r-v+no:0);const M=4*(this._cubeSize-S);_setViewport(t,T,M,3*S,2*S);s.setRenderTarget(t);s.render(u,oo)}}function _createPlanes(e){const t=[];const n=[];const r=[];let a=e;const i=e-no+1+ro.length;for(let o=0;o<i;o++){const i=Math.pow(2,a);n.push(i);let s=1/i;o>e-no?s=ro[o-e+no-1]:o===0&&(s=0);r.push(s);const l=1/(i-2);const c=-l;const u=1+l;const d=[c,c,u,c,u,u,c,c,u,u,c,u];const f=6;const p=6;const m=3;const h=2;const g=1;const _=new Float32Array(m*p*f);const v=new Float32Array(h*p*f);const E=new Float32Array(g*p*f);for(let e=0;e<f;e++){const t=e%3*2/3-1;const n=e>2?0:-1;const r=[t,n,0,t+2/3,n,0,t+2/3,n+1,0,t,n,0,t+2/3,n+1,0,t,n+1,0];_.set(r,m*p*e);v.set(d,h*p*e);const a=[e,e,e,e,e,e];E.set(a,g*p*e)}const S=new J;S.setAttribute("position",new te(_,m));S.setAttribute("uv",new te(v,h));S.setAttribute("faceIndex",new te(E,g));t.push(S);a>no&&a--}return{lodPlanes:t,sizeLods:n,sigmas:r}}function _createRenderTarget(e,t,n){const r=new ne(e,t,n);r.texture.mapping=v;r.texture.name="PMREM.cubeUv";r.scissorTest=true;return r}function _setViewport(e,t,n,r,a){e.viewport.set(t,n,r,a);e.scissor.set(t,n,r,a)}function _getBlurShader(e,t,n){const r=new Float32Array(io);const a=new l(0,1,0);const i=new T({name:"SphericalGaussianBlur",defines:{n:io,CUBEUV_TEXEL_WIDTH:1/t,CUBEUV_TEXEL_HEIGHT:1/n,CUBEUV_MAX_MIP:`${e}.0`},uniforms:{envMap:{value:null},samples:{value:1},weights:{value:r},latitudinal:{value:false},dTheta:{value:0},mipInt:{value:0},poleAxis:{value:a}},vertexShader:_getCommonVertexShader(),fragmentShader:"\n\n\t\t\tprecision mediump float;\n\t\t\tprecision mediump int;\n\n\t\t\tvarying vec3 vOutputDirection;\n\n\t\t\tuniform sampler2D envMap;\n\t\t\tuniform int samples;\n\t\t\tuniform float weights[ n ];\n\t\t\tuniform bool latitudinal;\n\t\t\tuniform float dTheta;\n\t\t\tuniform float mipInt;\n\t\t\tuniform vec3 poleAxis;\n\n\t\t\t#define ENVMAP_TYPE_CUBE_UV\n\t\t\t#include <cube_uv_reflection_fragment>\n\n\t\t\tvec3 getSample( float theta, vec3 axis ) {\n\n\t\t\t\tfloat cosTheta = cos( theta );\n\t\t\t\t// Rodrigues' axis-angle rotation\n\t\t\t\tvec3 sampleDirection = vOutputDirection * cosTheta\n\t\t\t\t\t+ cross( axis, vOutputDirection ) * sin( theta )\n\t\t\t\t\t+ axis * dot( axis, vOutputDirection ) * ( 1.0 - cosTheta );\n\n\t\t\t\treturn bilinearCubeUV( envMap, sampleDirection, mipInt );\n\n\t\t\t}\n\n\t\t\tvoid main() {\n\n\t\t\t\tvec3 axis = latitudinal ? poleAxis : cross( poleAxis, vOutputDirection );\n\n\t\t\t\tif ( all( equal( axis, vec3( 0.0 ) ) ) ) {\n\n\t\t\t\t\taxis = vec3( vOutputDirection.z, 0.0, - vOutputDirection.x );\n\n\t\t\t\t}\n\n\t\t\t\taxis = normalize( axis );\n\n\t\t\t\tgl_FragColor = vec4( 0.0, 0.0, 0.0, 1.0 );\n\t\t\t\tgl_FragColor.rgb += weights[ 0 ] * getSample( 0.0, axis );\n\n\t\t\t\tfor ( int i = 1; i < n; i++ ) {\n\n\t\t\t\t\tif ( i >= samples ) {\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tfloat theta = dTheta * float( i );\n\t\t\t\t\tgl_FragColor.rgb += weights[ i ] * getSample( -1.0 * theta, axis );\n\t\t\t\t\tgl_FragColor.rgb += weights[ i ] * getSample( theta, axis );\n\n\t\t\t\t}\n\n\t\t\t}\n\t\t",blending:re,depthTest:false,depthWrite:false});return i}function _getEquirectMaterial(){return new T({name:"EquirectangularToCubeUV",uniforms:{envMap:{value:null}},vertexShader:_getCommonVertexShader(),fragmentShader:"\n\n\t\t\tprecision mediump float;\n\t\t\tprecision mediump int;\n\n\t\t\tvarying vec3 vOutputDirection;\n\n\t\t\tuniform sampler2D envMap;\n\n\t\t\t#include <common>\n\n\t\t\tvoid main() {\n\n\t\t\t\tvec3 outputDirection = normalize( vOutputDirection );\n\t\t\t\tvec2 uv = equirectUv( outputDirection );\n\n\t\t\t\tgl_FragColor = vec4( texture2D ( envMap, uv ).rgb, 1.0 );\n\n\t\t\t}\n\t\t",blending:re,depthTest:false,depthWrite:false})}function _getCubemapMaterial(){return new T({name:"CubemapToCubeUV",uniforms:{envMap:{value:null},flipEnvMap:{value:-1}},vertexShader:_getCommonVertexShader(),fragmentShader:"\n\n\t\t\tprecision mediump float;\n\t\t\tprecision mediump int;\n\n\t\t\tuniform float flipEnvMap;\n\n\t\t\tvarying vec3 vOutputDirection;\n\n\t\t\tuniform samplerCube envMap;\n\n\t\t\tvoid main() {\n\n\t\t\t\tgl_FragColor = textureCube( envMap, vec3( flipEnvMap * vOutputDirection.x, vOutputDirection.yz ) );\n\n\t\t\t}\n\t\t",blending:re,depthTest:false,depthWrite:false})}function _getCommonVertexShader(){return"\n\n\t\tprecision mediump float;\n\t\tprecision mediump int;\n\n\t\tattribute float faceIndex;\n\n\t\tvarying vec3 vOutputDirection;\n\n\t\t// RH coordinate system; PMREM face-indexing convention\n\t\tvec3 getDirection( vec2 uv, float face ) {\n\n\t\t\tuv = 2.0 * uv - 1.0;\n\n\t\t\tvec3 direction = vec3( uv, 1.0 );\n\n\t\t\tif ( face == 0.0 ) {\n\n\t\t\t\tdirection = direction.zyx; // ( 1, v, u ) pos x\n\n\t\t\t} else if ( face == 1.0 ) {\n\n\t\t\t\tdirection = direction.xzy;\n\t\t\t\tdirection.xz *= -1.0; // ( -u, 1, -v ) pos y\n\n\t\t\t} else if ( face == 2.0 ) {\n\n\t\t\t\tdirection.x *= -1.0; // ( -u, v, 1 ) pos z\n\n\t\t\t} else if ( face == 3.0 ) {\n\n\t\t\t\tdirection = direction.zyx;\n\t\t\t\tdirection.xz *= -1.0; // ( -1, v, -u ) neg x\n\n\t\t\t} else if ( face == 4.0 ) {\n\n\t\t\t\tdirection = direction.xzy;\n\t\t\t\tdirection.xy *= -1.0; // ( -u, -1, v ) neg y\n\n\t\t\t} else if ( face == 5.0 ) {\n\n\t\t\t\tdirection.z *= -1.0; // ( u, v, -1 ) neg z\n\n\t\t\t}\n\n\t\t\treturn direction;\n\n\t\t}\n\n\t\tvoid main() {\n\n\t\t\tvOutputDirection = getDirection( uv, faceIndex );\n\t\t\tgl_Position = vec4( position, 1.0 );\n\n\t\t}\n\t"}function WebGLCubeUVMaps(e){let t=new WeakMap;let n=null;function get(r){if(r&&r.isTexture){const a=r.mapping;const i=a===V||a===k;const o=a===W||a===z;if(i||o){let a=t.get(r);const s=a!==void 0?a.texture.pmremVersion:0;if(r.isRenderTargetTexture&&r.pmremVersion!==s){n===null&&(n=new PMREMGenerator(e));a=i?n.fromEquirectangular(r,a):n.fromCubemap(r,a);a.texture.pmremVersion=r.pmremVersion;t.set(r,a);return a.texture}if(a!==void 0)return a.texture;{const s=r.image;if(i&&s&&s.height>0||o&&s&&isCubeTextureComplete(s)){n===null&&(n=new PMREMGenerator(e));a=i?n.fromEquirectangular(r):n.fromCubemap(r);a.texture.pmremVersion=r.pmremVersion;t.set(r,a);r.addEventListener("dispose",onTextureDispose);return a.texture}return null}}}return r}function isCubeTextureComplete(e){let t=0;const n=6;for(let r=0;r<n;r++)e[r]!==void 0&&t++;return t===n}function onTextureDispose(e){const n=e.target;n.removeEventListener("dispose",onTextureDispose);const r=t.get(n);if(r!==void 0){t.delete(n);r.dispose()}}function dispose(){t=new WeakMap;if(n!==null){n.dispose();n=null}}return{get:get,dispose:dispose}}function WebGLExtensions(e){const t={};function getExtension(n){if(t[n]!==void 0)return t[n];let r;switch(n){case"WEBGL_depth_texture":r=e.getExtension("WEBGL_depth_texture")||e.getExtension("MOZ_WEBGL_depth_texture")||e.getExtension("WEBKIT_WEBGL_depth_texture");break;case"EXT_texture_filter_anisotropic":r=e.getExtension("EXT_texture_filter_anisotropic")||e.getExtension("MOZ_EXT_texture_filter_anisotropic")||e.getExtension("WEBKIT_EXT_texture_filter_anisotropic");break;case"WEBGL_compressed_texture_s3tc":r=e.getExtension("WEBGL_compressed_texture_s3tc")||e.getExtension("MOZ_WEBGL_compressed_texture_s3tc")||e.getExtension("WEBKIT_WEBGL_compressed_texture_s3tc");break;case"WEBGL_compressed_texture_pvrtc":r=e.getExtension("WEBGL_compressed_texture_pvrtc")||e.getExtension("WEBKIT_WEBGL_compressed_texture_pvrtc");break;default:r=e.getExtension(n)}t[n]=r;return r}return{has:function(e){return getExtension(e)!==null},init:function(){getExtension("EXT_color_buffer_float");getExtension("WEBGL_clip_cull_distance");getExtension("OES_texture_float_linear");getExtension("EXT_color_buffer_half_float");getExtension("WEBGL_multisampled_render_to_texture");getExtension("WEBGL_render_shared_exponent")},get:function(e){const t=getExtension(e);t===null&&ae("THREE.WebGLRenderer: "+e+" extension not supported.");return t}}}function WebGLGeometries(e,t,n,r){const a={};const i=new WeakMap;function onGeometryDispose(e){const o=e.target;o.index!==null&&t.remove(o.index);for(const e in o.attributes)t.remove(o.attributes[e]);o.removeEventListener("dispose",onGeometryDispose);delete a[o.id];const s=i.get(o);if(s){t.remove(s);i.delete(o)}r.releaseStatesOfGeometry(o);o.isInstancedBufferGeometry===true&&delete o._maxInstanceCount;n.memory.geometries--}function get(e,t){if(a[t.id]===true)return t;t.addEventListener("dispose",onGeometryDispose);a[t.id]=true;n.memory.geometries++;return t}function update(n){const r=n.attributes;for(const n in r)t.update(r[n],e.ARRAY_BUFFER)}function updateWireframeAttribute(e){const n=[];const r=e.index;const a=e.attributes.position;let o=0;if(r!==null){const e=r.array;o=r.version;for(let t=0,r=e.length;t<r;t+=3){const r=e[t+0];const a=e[t+1];const i=e[t+2];n.push(r,a,a,i,i,r)}}else{if(a===void 0)return;{const e=a.array;o=a.version;for(let t=0,r=e.length/3-1;t<r;t+=3){const e=t+0;const r=t+1;const a=t+2;n.push(e,r,r,a,a,e)}}}const s=new(ie(n)?oe:se)(n,1);s.version=o;const l=i.get(e);l&&t.remove(l);i.set(e,s)}function getWireframeAttribute(e){const t=i.get(e);if(t){const n=e.index;n!==null&&t.version<n.version&&updateWireframeAttribute(e)}else updateWireframeAttribute(e);return i.get(e)}return{get:get,update:update,getWireframeAttribute:getWireframeAttribute}}function WebGLIndexedBufferRenderer(e,t,n){let r;function setMode(e){r=e}let a,i;function setIndex(e){a=e.type;i=e.bytesPerElement}function render(t,o){e.drawElements(r,o,a,t*i);n.update(o,r,1)}function renderInstances(t,o,s){if(s!==0){e.drawElementsInstanced(r,o,a,t*i,s);n.update(o,r,s)}}function renderMultiDraw(e,i,o){if(o===0)return;const s=t.get("WEBGL_multi_draw");s.multiDrawElementsWEBGL(r,i,0,a,e,0,o);let l=0;for(let e=0;e<o;e++)l+=i[e];n.update(l,r,1)}function renderMultiDrawInstances(e,o,s,l){if(s===0)return;const c=t.get("WEBGL_multi_draw");if(c===null)for(let t=0;t<e.length;t++)renderInstances(e[t]/i,o[t],l[t]);else{c.multiDrawElementsInstancedWEBGL(r,o,0,a,e,0,l,0,s);let t=0;for(let e=0;e<s;e++)t+=o[e]*l[e];n.update(t,r,1)}}this.setMode=setMode;this.setIndex=setIndex;this.render=render;this.renderInstances=renderInstances;this.renderMultiDraw=renderMultiDraw;this.renderMultiDrawInstances=renderMultiDrawInstances}function WebGLInfo(e){const t={geometries:0,textures:0};const n={frame:0,calls:0,triangles:0,points:0,lines:0};function update(t,r,a){n.calls++;switch(r){case e.TRIANGLES:n.triangles+=a*(t/3);break;case e.LINES:n.lines+=a*(t/2);break;case e.LINE_STRIP:n.lines+=a*(t-1);break;case e.LINE_LOOP:n.lines+=a*t;break;case e.POINTS:n.points+=a*t;break;default:console.error("THREE.WebGLInfo: Unknown draw mode:",r);break}}function reset(){n.calls=0;n.triangles=0;n.points=0;n.lines=0}return{memory:t,render:n,programs:null,autoReset:true,reset:reset,update:update}}function WebGLMorphtargets(e,t,n){const r=new WeakMap;const a=new le;function update(i,s,l){const c=i.morphTargetInfluences;const u=s.morphAttributes.position||s.morphAttributes.normal||s.morphAttributes.color;const d=u!==void 0?u.length:0;let f=r.get(s);if(f===void 0||f.count!==d){f!==void 0&&f.texture.dispose();const p=s.morphAttributes.position!==void 0;const m=s.morphAttributes.normal!==void 0;const h=s.morphAttributes.color!==void 0;const g=s.morphAttributes.position||[];const _=s.morphAttributes.normal||[];const v=s.morphAttributes.color||[];let E=0;p===true&&(E=1);m===true&&(E=2);h===true&&(E=3);let S=s.attributes.position.count*E;let T=1;if(S>t.maxTextureSize){T=Math.ceil(S/t.maxTextureSize);S=t.maxTextureSize}const M=new Float32Array(S*T*4*d);const x=new ue(M,S,T,d);x.type=B;x.needsUpdate=true;const b=E*4;for(let R=0;R<d;R++){const A=g[R];const C=_[R];const L=v[R];const U=S*T*4*R;for(let P=0;P<A.count;P++){const y=P*b;if(p===true){a.fromBufferAttribute(A,P);M[U+y+0]=a.x;M[U+y+1]=a.y;M[U+y+2]=a.z;M[U+y+3]=0}if(m===true){a.fromBufferAttribute(C,P);M[U+y+4]=a.x;M[U+y+5]=a.y;M[U+y+6]=a.z;M[U+y+7]=0}if(h===true){a.fromBufferAttribute(L,P);M[U+y+8]=a.x;M[U+y+9]=a.y;M[U+y+10]=a.z;M[U+y+11]=L.itemSize===4?a.w:1}}}f={count:d,texture:x,size:new o(S,T)};r.set(s,f);function disposeTexture(){x.dispose();r.delete(s);s.removeEventListener("dispose",disposeTexture)}s.addEventListener("dispose",disposeTexture)}if(i.isInstancedMesh===true&&i.morphTexture!==null)l.getUniforms().setValue(e,"morphTexture",i.morphTexture,n);else{let D=0;for(let I=0;I<c.length;I++)D+=c[I];const w=s.morphTargetsRelative?1:1-D;l.getUniforms().setValue(e,"morphTargetBaseInfluence",w);l.getUniforms().setValue(e,"morphTargetInfluences",c)}l.getUniforms().setValue(e,"morphTargetsTexture",f.texture,n);l.getUniforms().setValue(e,"morphTargetsTextureSize",f.size)}return{update:update}}function WebGLObjects(e,t,n,r){let a=new WeakMap;function update(i){const o=r.render.frame;const s=i.geometry;const l=t.get(i,s);if(a.get(l)!==o){t.update(l);a.set(l,o)}if(i.isInstancedMesh){i.hasEventListener("dispose",onInstancedMeshDispose)===false&&i.addEventListener("dispose",onInstancedMeshDispose);if(a.get(i)!==o){n.update(i.instanceMatrix,e.ARRAY_BUFFER);i.instanceColor!==null&&n.update(i.instanceColor,e.ARRAY_BUFFER);a.set(i,o)}}if(i.isSkinnedMesh){const e=i.skeleton;if(a.get(e)!==o){e.update();a.set(e,o)}}return l}function dispose(){a=new WeakMap}function onInstancedMeshDispose(e){const t=e.target;t.removeEventListener("dispose",onInstancedMeshDispose);n.remove(t.instanceMatrix);t.instanceColor!==null&&n.remove(t.instanceColor)}return{update:update,dispose:dispose}}const vo=new pe;const Eo=new me(1,1);const So=new ue;const To=new he;const Mo=new ge;const xo=[];const bo=[];const Ro=new Float32Array(16);const Ao=new Float32Array(9);const Co=new Float32Array(4);function flatten(e,t,n){const r=e[0];if(r<=0||r>0)return e;const a=t*n;let i=xo[a];if(i===void 0){i=new Float32Array(a);xo[a]=i}if(t!==0){r.toArray(i,0);for(let r=1,a=0;r!==t;++r){a+=n;e[r].toArray(i,a)}}return i}function arraysEqual(e,t){if(e.length!==t.length)return false;for(let n=0,r=e.length;n<r;n++)if(e[n]!==t[n])return false;return true}function copyArray(e,t){for(let n=0,r=t.length;n<r;n++)e[n]=t[n]}function allocTexUnits(e,t){let n=bo[t];if(n===void 0){n=new Int32Array(t);bo[t]=n}for(let r=0;r!==t;++r)n[r]=e.allocateTextureUnit();return n}function setValueV1f(e,t){const n=this.cache;if(n[0]!==t){e.uniform1f(this.addr,t);n[0]=t}}function setValueV2f(e,t){const n=this.cache;if(t.x!==void 0){if(n[0]!==t.x||n[1]!==t.y){e.uniform2f(this.addr,t.x,t.y);n[0]=t.x;n[1]=t.y}}else{if(arraysEqual(n,t))return;e.uniform2fv(this.addr,t);copyArray(n,t)}}function setValueV3f(e,t){const n=this.cache;if(t.x!==void 0){if(n[0]!==t.x||n[1]!==t.y||n[2]!==t.z){e.uniform3f(this.addr,t.x,t.y,t.z);n[0]=t.x;n[1]=t.y;n[2]=t.z}}else if(t.r!==void 0){if(n[0]!==t.r||n[1]!==t.g||n[2]!==t.b){e.uniform3f(this.addr,t.r,t.g,t.b);n[0]=t.r;n[1]=t.g;n[2]=t.b}}else{if(arraysEqual(n,t))return;e.uniform3fv(this.addr,t);copyArray(n,t)}}function setValueV4f(e,t){const n=this.cache;if(t.x!==void 0){if(n[0]!==t.x||n[1]!==t.y||n[2]!==t.z||n[3]!==t.w){e.uniform4f(this.addr,t.x,t.y,t.z,t.w);n[0]=t.x;n[1]=t.y;n[2]=t.z;n[3]=t.w}}else{if(arraysEqual(n,t))return;e.uniform4fv(this.addr,t);copyArray(n,t)}}function setValueM2(e,t){const n=this.cache;const r=t.elements;if(r===void 0){if(arraysEqual(n,t))return;e.uniformMatrix2fv(this.addr,false,t);copyArray(n,t)}else{if(arraysEqual(n,r))return;Co.set(r);e.uniformMatrix2fv(this.addr,false,Co);copyArray(n,r)}}function setValueM3(e,t){const n=this.cache;const r=t.elements;if(r===void 0){if(arraysEqual(n,t))return;e.uniformMatrix3fv(this.addr,false,t);copyArray(n,t)}else{if(arraysEqual(n,r))return;Ao.set(r);e.uniformMatrix3fv(this.addr,false,Ao);copyArray(n,r)}}function setValueM4(e,t){const n=this.cache;const r=t.elements;if(r===void 0){if(arraysEqual(n,t))return;e.uniformMatrix4fv(this.addr,false,t);copyArray(n,t)}else{if(arraysEqual(n,r))return;Ro.set(r);e.uniformMatrix4fv(this.addr,false,Ro);copyArray(n,r)}}function setValueV1i(e,t){const n=this.cache;if(n[0]!==t){e.uniform1i(this.addr,t);n[0]=t}}function setValueV2i(e,t){const n=this.cache;if(t.x!==void 0){if(n[0]!==t.x||n[1]!==t.y){e.uniform2i(this.addr,t.x,t.y);n[0]=t.x;n[1]=t.y}}else{if(arraysEqual(n,t))return;e.uniform2iv(this.addr,t);copyArray(n,t)}}function setValueV3i(e,t){const n=this.cache;if(t.x!==void 0){if(n[0]!==t.x||n[1]!==t.y||n[2]!==t.z){e.uniform3i(this.addr,t.x,t.y,t.z);n[0]=t.x;n[1]=t.y;n[2]=t.z}}else{if(arraysEqual(n,t))return;e.uniform3iv(this.addr,t);copyArray(n,t)}}function setValueV4i(e,t){const n=this.cache;if(t.x!==void 0){if(n[0]!==t.x||n[1]!==t.y||n[2]!==t.z||n[3]!==t.w){e.uniform4i(this.addr,t.x,t.y,t.z,t.w);n[0]=t.x;n[1]=t.y;n[2]=t.z;n[3]=t.w}}else{if(arraysEqual(n,t))return;e.uniform4iv(this.addr,t);copyArray(n,t)}}function setValueV1ui(e,t){const n=this.cache;if(n[0]!==t){e.uniform1ui(this.addr,t);n[0]=t}}function setValueV2ui(e,t){const n=this.cache;if(t.x!==void 0){if(n[0]!==t.x||n[1]!==t.y){e.uniform2ui(this.addr,t.x,t.y);n[0]=t.x;n[1]=t.y}}else{if(arraysEqual(n,t))return;e.uniform2uiv(this.addr,t);copyArray(n,t)}}function setValueV3ui(e,t){const n=this.cache;if(t.x!==void 0){if(n[0]!==t.x||n[1]!==t.y||n[2]!==t.z){e.uniform3ui(this.addr,t.x,t.y,t.z);n[0]=t.x;n[1]=t.y;n[2]=t.z}}else{if(arraysEqual(n,t))return;e.uniform3uiv(this.addr,t);copyArray(n,t)}}function setValueV4ui(e,t){const n=this.cache;if(t.x!==void 0){if(n[0]!==t.x||n[1]!==t.y||n[2]!==t.z||n[3]!==t.w){e.uniform4ui(this.addr,t.x,t.y,t.z,t.w);n[0]=t.x;n[1]=t.y;n[2]=t.z;n[3]=t.w}}else{if(arraysEqual(n,t))return;e.uniform4uiv(this.addr,t);copyArray(n,t)}}function setValueT1(e,t,n){const r=this.cache;const a=n.allocateTextureUnit();if(r[0]!==a){e.uniform1i(this.addr,a);r[0]=a}let i;if(this.type===e.SAMPLER_2D_SHADOW){Eo.compareFunction=_e;i=Eo}else i=vo;n.setTexture2D(t||i,a)}function setValueT3D1(e,t,n){const r=this.cache;const a=n.allocateTextureUnit();if(r[0]!==a){e.uniform1i(this.addr,a);r[0]=a}n.setTexture3D(t||To,a)}function setValueT6(e,t,n){const r=this.cache;const a=n.allocateTextureUnit();if(r[0]!==a){e.uniform1i(this.addr,a);r[0]=a}n.setTextureCube(t||Mo,a)}function setValueT2DArray1(e,t,n){const r=this.cache;const a=n.allocateTextureUnit();if(r[0]!==a){e.uniform1i(this.addr,a);r[0]=a}n.setTexture2DArray(t||So,a)}function getSingularSetter(e){switch(e){case 5126:return setValueV1f;case 35664:return setValueV2f;case 35665:return setValueV3f;case 35666:return setValueV4f;case 35674:return setValueM2;case 35675:return setValueM3;case 35676:return setValueM4;case 5124:case 35670:return setValueV1i;case 35667:case 35671:return setValueV2i;case 35668:case 35672:return setValueV3i;case 35669:case 35673:return setValueV4i;case 5125:return setValueV1ui;case 36294:return setValueV2ui;case 36295:return setValueV3ui;case 36296:return setValueV4ui;case 35678:case 36198:case 36298:case 36306:case 35682:return setValueT1;case 35679:case 36299:case 36307:return setValueT3D1;case 35680:case 36300:case 36308:case 36293:return setValueT6;case 36289:case 36303:case 36311:case 36292:return setValueT2DArray1}}function setValueV1fArray(e,t){e.uniform1fv(this.addr,t)}function setValueV2fArray(e,t){const n=flatten(t,this.size,2);e.uniform2fv(this.addr,n)}function setValueV3fArray(e,t){const n=flatten(t,this.size,3);e.uniform3fv(this.addr,n)}function setValueV4fArray(e,t){const n=flatten(t,this.size,4);e.uniform4fv(this.addr,n)}function setValueM2Array(e,t){const n=flatten(t,this.size,4);e.uniformMatrix2fv(this.addr,false,n)}function setValueM3Array(e,t){const n=flatten(t,this.size,9);e.uniformMatrix3fv(this.addr,false,n)}function setValueM4Array(e,t){const n=flatten(t,this.size,16);e.uniformMatrix4fv(this.addr,false,n)}function setValueV1iArray(e,t){e.uniform1iv(this.addr,t)}function setValueV2iArray(e,t){e.uniform2iv(this.addr,t)}function setValueV3iArray(e,t){e.uniform3iv(this.addr,t)}function setValueV4iArray(e,t){e.uniform4iv(this.addr,t)}function setValueV1uiArray(e,t){e.uniform1uiv(this.addr,t)}function setValueV2uiArray(e,t){e.uniform2uiv(this.addr,t)}function setValueV3uiArray(e,t){e.uniform3uiv(this.addr,t)}function setValueV4uiArray(e,t){e.uniform4uiv(this.addr,t)}function setValueT1Array(e,t,n){const r=this.cache;const a=t.length;const i=allocTexUnits(n,a);if(!arraysEqual(r,i)){e.uniform1iv(this.addr,i);copyArray(r,i)}for(let e=0;e!==a;++e)n.setTexture2D(t[e]||vo,i[e])}function setValueT3DArray(e,t,n){const r=this.cache;const a=t.length;const i=allocTexUnits(n,a);if(!arraysEqual(r,i)){e.uniform1iv(this.addr,i);copyArray(r,i)}for(let e=0;e!==a;++e)n.setTexture3D(t[e]||To,i[e])}function setValueT6Array(e,t,n){const r=this.cache;const a=t.length;const i=allocTexUnits(n,a);if(!arraysEqual(r,i)){e.uniform1iv(this.addr,i);copyArray(r,i)}for(let e=0;e!==a;++e)n.setTextureCube(t[e]||Mo,i[e])}function setValueT2DArrayArray(e,t,n){const r=this.cache;const a=t.length;const i=allocTexUnits(n,a);if(!arraysEqual(r,i)){e.uniform1iv(this.addr,i);copyArray(r,i)}for(let e=0;e!==a;++e)n.setTexture2DArray(t[e]||So,i[e])}function getPureArraySetter(e){switch(e){case 5126:return setValueV1fArray;case 35664:return setValueV2fArray;case 35665:return setValueV3fArray;case 35666:return setValueV4fArray;case 35674:return setValueM2Array;case 35675:return setValueM3Array;case 35676:return setValueM4Array;case 5124:case 35670:return setValueV1iArray;case 35667:case 35671:return setValueV2iArray;case 35668:case 35672:return setValueV3iArray;case 35669:case 35673:return setValueV4iArray;case 5125:return setValueV1uiArray;case 36294:return setValueV2uiArray;case 36295:return setValueV3uiArray;case 36296:return setValueV4uiArray;case 35678:case 36198:case 36298:case 36306:case 35682:return setValueT1Array;case 35679:case 36299:case 36307:return setValueT3DArray;case 35680:case 36300:case 36308:case 36293:return setValueT6Array;case 36289:case 36303:case 36311:case 36292:return setValueT2DArrayArray}}class SingleUniform{constructor(e,t,n){this.id=e;this.addr=n;this.cache=[];this.type=t.type;this.setValue=getSingularSetter(t.type)}}class PureArrayUniform{constructor(e,t,n){this.id=e;this.addr=n;this.cache=[];this.type=t.type;this.size=t.size;this.setValue=getPureArraySetter(t.type)}}class StructuredUniform{constructor(e){this.id=e;this.seq=[];this.map={}}setValue(e,t,n){const r=this.seq;for(let a=0,i=r.length;a!==i;++a){const i=r[a];i.setValue(e,t[i.id],n)}}}const Lo=/(\w+)(\])?(\[|\.)?/g;function addUniform(e,t){e.seq.push(t);e.map[t.id]=t}function parseUniform(e,t,n){const r=e.name,a=r.length;Lo.lastIndex=0;while(true){const i=Lo.exec(r),o=Lo.lastIndex;let s=i[1];const l=i[2]==="]",c=i[3];l&&(s|=0);if(c===void 0||c==="["&&o+2===a){addUniform(n,c===void 0?new SingleUniform(s,e,t):new PureArrayUniform(s,e,t));break}{const e=n.map;let t=e[s];if(t===void 0){t=new StructuredUniform(s);addUniform(n,t)}n=t}}}class WebGLUniforms{constructor(e,t){this.seq=[];this.map={};const n=e.getProgramParameter(t,e.ACTIVE_UNIFORMS);for(let r=0;r<n;++r){const n=e.getActiveUniform(t,r),a=e.getUniformLocation(t,n.name);parseUniform(n,a,this)}}setValue(e,t,n,r){const a=this.map[t];a!==void 0&&a.setValue(e,n,r)}setOptional(e,t,n){const r=t[n];r!==void 0&&this.setValue(e,n,r)}static upload(e,t,n,r){for(let a=0,i=t.length;a!==i;++a){const i=t[a],o=n[i.id];o.needsUpdate!==false&&i.setValue(e,o.value,r)}}static seqWithValue(e,t){const n=[];for(let r=0,a=e.length;r!==a;++r){const a=e[r];a.id in t&&n.push(a)}return n}}function WebGLShader(e,t,n){const r=e.createShader(t);e.shaderSource(r,n);e.compileShader(r);return r}const Uo=37297;let Po=0;function handleSource(e,t){const n=e.split("\n");const r=[];const a=Math.max(t-6,0);const i=Math.min(t+6,n.length);for(let e=a;e<i;e++){const a=e+1;r.push(`${a===t?">":" "} ${a}: ${n[e]}`)}return r.join("\n")}const yo=new i;function getEncodingComponents(e){b._getMatrix(yo,b.workingColorSpace,e);const t=`mat3( ${yo.elements.map((e=>e.toFixed(4)))} )`;switch(b.getTransfer(e)){case ve:return[t,"LinearTransferOETF"];case R:return[t,"sRGBTransferOETF"];default:console.warn("THREE.WebGLProgram: Unsupported color space: ",e);return[t,"LinearTransferOETF"]}}function getShaderErrors(e,t,n){const r=e.getShaderParameter(t,e.COMPILE_STATUS);const a=e.getShaderInfoLog(t).trim();if(r&&a==="")return"";const i=/ERROR: 0:(\d+)/.exec(a);if(i){const r=parseInt(i[1]);return n.toUpperCase()+"\n\n"+a+"\n\n"+handleSource(e.getShaderSource(t),r)}return a}function getTexelEncodingFunction(e,t){const n=getEncodingComponents(t);return[`vec4 ${e}( vec4 value ) {`,`\treturn ${n[1]}( vec4( value.rgb * ${n[0]}, value.a ) );`,"}"].join("\n")}function getToneMappingFunction(e,t){let n;switch(t){case Re:n="Linear";break;case be:n="Reinhard";break;case xe:n="Cineon";break;case Me:n="ACESFilmic";break;case Te:n="AgX";break;case Se:n="Neutral";break;case Ee:n="Custom";break;default:console.warn("THREE.WebGLProgram: Unsupported toneMapping:",t);n="Linear"}return"vec3 "+e+"( vec3 color ) { return "+n+"ToneMapping( color ); }"}const Do=new l;function getLuminanceFunction(){b.getLuminanceCoefficients(Do);const e=Do.x.toFixed(4);const t=Do.y.toFixed(4);const n=Do.z.toFixed(4);return["float luminance( const in vec3 rgb ) {",`\tconst vec3 weights = vec3( ${e}, ${t}, ${n} );`,"\treturn dot( weights, rgb );","}"].join("\n")}function generateVertexExtensions(e){const t=[e.extensionClipCullDistance?"#extension GL_ANGLE_clip_cull_distance : require":"",e.extensionMultiDraw?"#extension GL_ANGLE_multi_draw : require":""];return t.filter(filterEmptyLine).join("\n")}function generateDefines(e){const t=[];for(const n in e){const r=e[n];r!==false&&t.push("#define "+n+" "+r)}return t.join("\n")}function fetchAttributeLocations(e,t){const n={};const r=e.getProgramParameter(t,e.ACTIVE_ATTRIBUTES);for(let a=0;a<r;a++){const r=e.getActiveAttrib(t,a);const i=r.name;let o=1;r.type===e.FLOAT_MAT2&&(o=2);r.type===e.FLOAT_MAT3&&(o=3);r.type===e.FLOAT_MAT4&&(o=4);n[i]={type:r.type,location:e.getAttribLocation(t,i),locationSize:o}}return n}function filterEmptyLine(e){return e!==""}function replaceLightNums(e,t){const n=t.numSpotLightShadows+t.numSpotLightMaps-t.numSpotLightShadowsWithMaps;return e.replace(/NUM_DIR_LIGHTS/g,t.numDirLights).replace(/NUM_SPOT_LIGHTS/g,t.numSpotLights).replace(/NUM_SPOT_LIGHT_MAPS/g,t.numSpotLightMaps).replace(/NUM_SPOT_LIGHT_COORDS/g,n).replace(/NUM_RECT_AREA_LIGHTS/g,t.numRectAreaLights).replace(/NUM_POINT_LIGHTS/g,t.numPointLights).replace(/NUM_HEMI_LIGHTS/g,t.numHemiLights).replace(/NUM_DIR_LIGHT_SHADOWS/g,t.numDirLightShadows).replace(/NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS/g,t.numSpotLightShadowsWithMaps).replace(/NUM_SPOT_LIGHT_SHADOWS/g,t.numSpotLightShadows).replace(/NUM_POINT_LIGHT_SHADOWS/g,t.numPointLightShadows)}function replaceClippingPlaneNums(e,t){return e.replace(/NUM_CLIPPING_PLANES/g,t.numClippingPlanes).replace(/UNION_CLIPPING_PLANES/g,t.numClippingPlanes-t.numClipIntersection)}const wo=/^[ \t]*#include +<([\w\d./]+)>/gm;function resolveIncludes(e){return e.replace(wo,includeReplacer)}const Io=new Map;function includeReplacer(e,t){let n=Ki[t];if(n===void 0){const e=Io.get(t);if(e===void 0)throw new Error("Can not resolve #include <"+t+">");n=Ki[e];console.warn('THREE.WebGLRenderer: Shader chunk "%s" has been deprecated. Use "%s" instead.',t,e)}return resolveIncludes(n)}const No=/#pragma unroll_loop_start\s+for\s*\(\s*int\s+i\s*=\s*(\d+)\s*;\s*i\s*<\s*(\d+)\s*;\s*i\s*\+\+\s*\)\s*{([\s\S]+?)}\s+#pragma unroll_loop_end/g;function unrollLoops(e){return e.replace(No,loopReplacer)}function loopReplacer(e,t,n,r){let a="";for(let e=parseInt(t);e<parseInt(n);e++)a+=r.replace(/\[\s*i\s*\]/g,"[ "+e+" ]").replace(/UNROLLED_LOOP_INDEX/g,e);return a}function generatePrecision(e){let t=`precision ${e.precision} float;\n\tprecision ${e.precision} int;\n\tprecision ${e.precision} sampler2D;\n\tprecision ${e.precision} samplerCube;\n\tprecision ${e.precision} sampler3D;\n\tprecision ${e.precision} sampler2DArray;\n\tprecision ${e.precision} sampler2DShadow;\n\tprecision ${e.precision} samplerCubeShadow;\n\tprecision ${e.precision} sampler2DArrayShadow;\n\tprecision ${e.precision} isampler2D;\n\tprecision ${e.precision} isampler3D;\n\tprecision ${e.precision} isamplerCube;\n\tprecision ${e.precision} isampler2DArray;\n\tprecision ${e.precision} usampler2D;\n\tprecision ${e.precision} usampler3D;\n\tprecision ${e.precision} usamplerCube;\n\tprecision ${e.precision} usampler2DArray;\n\t`;e.precision==="highp"?t+="\n#define HIGH_PRECISION":e.precision==="mediump"?t+="\n#define MEDIUM_PRECISION":e.precision==="lowp"&&(t+="\n#define LOW_PRECISION");return t}function generateShadowMapTypeDefine(e){let t="SHADOWMAP_TYPE_BASIC";e.shadowMapType===Ae?t="SHADOWMAP_TYPE_PCF":e.shadowMapType===Ce?t="SHADOWMAP_TYPE_PCF_SOFT":e.shadowMapType===Le&&(t="SHADOWMAP_TYPE_VSM");return t}function generateEnvMapTypeDefine(e){let t="ENVMAP_TYPE_CUBE";if(e.envMap)switch(e.envMapMode){case W:case z:t="ENVMAP_TYPE_CUBE";break;case v:t="ENVMAP_TYPE_CUBE_UV";break}return t}function generateEnvMapModeDefine(e){let t="ENVMAP_MODE_REFLECTION";if(e.envMap)switch(e.envMapMode){case z:t="ENVMAP_MODE_REFRACTION";break}return t}function generateEnvMapBlendingDefine(e){let t="ENVMAP_BLENDING_NONE";if(e.envMap)switch(e.combine){case ye:t="ENVMAP_BLENDING_MULTIPLY";break;case Pe:t="ENVMAP_BLENDING_MIX";break;case Ue:t="ENVMAP_BLENDING_ADD";break}return t}function generateCubeUVSize(e){const t=e.envMapCubeUVHeight;if(t===null)return null;const n=Math.log2(t)-2;const r=1/t;const a=1/(3*Math.max(Math.pow(2,n),112));return{texelWidth:a,texelHeight:r,maxMip:n}}function WebGLProgram(e,t,n,r){const a=e.getContext();const i=n.defines;let o=n.vertexShader;let s=n.fragmentShader;const l=generateShadowMapTypeDefine(n);const c=generateEnvMapTypeDefine(n);const u=generateEnvMapModeDefine(n);const d=generateEnvMapBlendingDefine(n);const f=generateCubeUVSize(n);const p=generateVertexExtensions(n);const m=generateDefines(i);const h=a.createProgram();let g,_;let v=n.glslVersion?"#version "+n.glslVersion+"\n":"";if(n.isRawShaderMaterial){g=["#define SHADER_TYPE "+n.shaderType,"#define SHADER_NAME "+n.shaderName,m].filter(filterEmptyLine).join("\n");g.length>0&&(g+="\n");_=["#define SHADER_TYPE "+n.shaderType,"#define SHADER_NAME "+n.shaderName,m].filter(filterEmptyLine).join("\n");_.length>0&&(_+="\n")}else{g=[generatePrecision(n),"#define SHADER_TYPE "+n.shaderType,"#define SHADER_NAME "+n.shaderName,m,n.extensionClipCullDistance?"#define USE_CLIP_DISTANCE":"",n.batching?"#define USE_BATCHING":"",n.batchingColor?"#define USE_BATCHING_COLOR":"",n.instancing?"#define USE_INSTANCING":"",n.instancingColor?"#define USE_INSTANCING_COLOR":"",n.instancingMorph?"#define USE_INSTANCING_MORPH":"",n.useFog&&n.fog?"#define USE_FOG":"",n.useFog&&n.fogExp2?"#define FOG_EXP2":"",n.map?"#define USE_MAP":"",n.envMap?"#define USE_ENVMAP":"",n.envMap?"#define "+u:"",n.lightMap?"#define USE_LIGHTMAP":"",n.aoMap?"#define USE_AOMAP":"",n.bumpMap?"#define USE_BUMPMAP":"",n.normalMap?"#define USE_NORMALMAP":"",n.normalMapObjectSpace?"#define USE_NORMALMAP_OBJECTSPACE":"",n.normalMapTangentSpace?"#define USE_NORMALMAP_TANGENTSPACE":"",n.displacementMap?"#define USE_DISPLACEMENTMAP":"",n.emissiveMap?"#define USE_EMISSIVEMAP":"",n.anisotropy?"#define USE_ANISOTROPY":"",n.anisotropyMap?"#define USE_ANISOTROPYMAP":"",n.clearcoatMap?"#define USE_CLEARCOATMAP":"",n.clearcoatRoughnessMap?"#define USE_CLEARCOAT_ROUGHNESSMAP":"",n.clearcoatNormalMap?"#define USE_CLEARCOAT_NORMALMAP":"",n.iridescenceMap?"#define USE_IRIDESCENCEMAP":"",n.iridescenceThicknessMap?"#define USE_IRIDESCENCE_THICKNESSMAP":"",n.specularMap?"#define USE_SPECULARMAP":"",n.specularColorMap?"#define USE_SPECULAR_COLORMAP":"",n.specularIntensityMap?"#define USE_SPECULAR_INTENSITYMAP":"",n.roughnessMap?"#define USE_ROUGHNESSMAP":"",n.metalnessMap?"#define USE_METALNESSMAP":"",n.alphaMap?"#define USE_ALPHAMAP":"",n.alphaHash?"#define USE_ALPHAHASH":"",n.transmission?"#define USE_TRANSMISSION":"",n.transmissionMap?"#define USE_TRANSMISSIONMAP":"",n.thicknessMap?"#define USE_THICKNESSMAP":"",n.sheenColorMap?"#define USE_SHEEN_COLORMAP":"",n.sheenRoughnessMap?"#define USE_SHEEN_ROUGHNESSMAP":"",n.mapUv?"#define MAP_UV "+n.mapUv:"",n.alphaMapUv?"#define ALPHAMAP_UV "+n.alphaMapUv:"",n.lightMapUv?"#define LIGHTMAP_UV "+n.lightMapUv:"",n.aoMapUv?"#define AOMAP_UV "+n.aoMapUv:"",n.emissiveMapUv?"#define EMISSIVEMAP_UV "+n.emissiveMapUv:"",n.bumpMapUv?"#define BUMPMAP_UV "+n.bumpMapUv:"",n.normalMapUv?"#define NORMALMAP_UV "+n.normalMapUv:"",n.displacementMapUv?"#define DISPLACEMENTMAP_UV "+n.displacementMapUv:"",n.metalnessMapUv?"#define METALNESSMAP_UV "+n.metalnessMapUv:"",n.roughnessMapUv?"#define ROUGHNESSMAP_UV "+n.roughnessMapUv:"",n.anisotropyMapUv?"#define ANISOTROPYMAP_UV "+n.anisotropyMapUv:"",n.clearcoatMapUv?"#define CLEARCOATMAP_UV "+n.clearcoatMapUv:"",n.clearcoatNormalMapUv?"#define CLEARCOAT_NORMALMAP_UV "+n.clearcoatNormalMapUv:"",n.clearcoatRoughnessMapUv?"#define CLEARCOAT_ROUGHNESSMAP_UV "+n.clearcoatRoughnessMapUv:"",n.iridescenceMapUv?"#define IRIDESCENCEMAP_UV "+n.iridescenceMapUv:"",n.iridescenceThicknessMapUv?"#define IRIDESCENCE_THICKNESSMAP_UV "+n.iridescenceThicknessMapUv:"",n.sheenColorMapUv?"#define SHEEN_COLORMAP_UV "+n.sheenColorMapUv:"",n.sheenRoughnessMapUv?"#define SHEEN_ROUGHNESSMAP_UV "+n.sheenRoughnessMapUv:"",n.specularMapUv?"#define SPECULARMAP_UV "+n.specularMapUv:"",n.specularColorMapUv?"#define SPECULAR_COLORMAP_UV "+n.specularColorMapUv:"",n.specularIntensityMapUv?"#define SPECULAR_INTENSITYMAP_UV "+n.specularIntensityMapUv:"",n.transmissionMapUv?"#define TRANSMISSIONMAP_UV "+n.transmissionMapUv:"",n.thicknessMapUv?"#define THICKNESSMAP_UV "+n.thicknessMapUv:"",n.vertexTangents&&n.flatShading===false?"#define USE_TANGENT":"",n.vertexColors?"#define USE_COLOR":"",n.vertexAlphas?"#define USE_COLOR_ALPHA":"",n.vertexUv1s?"#define USE_UV1":"",n.vertexUv2s?"#define USE_UV2":"",n.vertexUv3s?"#define USE_UV3":"",n.pointsUvs?"#define USE_POINTS_UV":"",n.flatShading?"#define FLAT_SHADED":"",n.skinning?"#define USE_SKINNING":"",n.morphTargets?"#define USE_MORPHTARGETS":"",n.morphNormals&&n.flatShading===false?"#define USE_MORPHNORMALS":"",n.morphColors?"#define USE_MORPHCOLORS":"",n.morphTargetsCount>0?"#define MORPHTARGETS_TEXTURE_STRIDE "+n.morphTextureStride:"",n.morphTargetsCount>0?"#define MORPHTARGETS_COUNT "+n.morphTargetsCount:"",n.doubleSided?"#define DOUBLE_SIDED":"",n.flipSided?"#define FLIP_SIDED":"",n.shadowMapEnabled?"#define USE_SHADOWMAP":"",n.shadowMapEnabled?"#define "+l:"",n.sizeAttenuation?"#define USE_SIZEATTENUATION":"",n.numLightProbes>0?"#define USE_LIGHT_PROBES":"",n.logarithmicDepthBuffer?"#define USE_LOGDEPTHBUF":"",n.reverseDepthBuffer?"#define USE_REVERSEDEPTHBUF":"","uniform mat4 modelMatrix;","uniform mat4 modelViewMatrix;","uniform mat4 projectionMatrix;","uniform mat4 viewMatrix;","uniform mat3 normalMatrix;","uniform vec3 cameraPosition;","uniform bool isOrthographic;","#ifdef USE_INSTANCING","\tattribute mat4 instanceMatrix;","#endif","#ifdef USE_INSTANCING_COLOR","\tattribute vec3 instanceColor;","#endif","#ifdef USE_INSTANCING_MORPH","\tuniform sampler2D morphTexture;","#endif","attribute vec3 position;","attribute vec3 normal;","attribute vec2 uv;","#ifdef USE_UV1","\tattribute vec2 uv1;","#endif","#ifdef USE_UV2","\tattribute vec2 uv2;","#endif","#ifdef USE_UV3","\tattribute vec2 uv3;","#endif","#ifdef USE_TANGENT","\tattribute vec4 tangent;","#endif","#if defined( USE_COLOR_ALPHA )","\tattribute vec4 color;","#elif defined( USE_COLOR )","\tattribute vec3 color;","#endif","#ifdef USE_SKINNING","\tattribute vec4 skinIndex;","\tattribute vec4 skinWeight;","#endif","\n"].filter(filterEmptyLine).join("\n");_=[generatePrecision(n),"#define SHADER_TYPE "+n.shaderType,"#define SHADER_NAME "+n.shaderName,m,n.useFog&&n.fog?"#define USE_FOG":"",n.useFog&&n.fogExp2?"#define FOG_EXP2":"",n.alphaToCoverage?"#define ALPHA_TO_COVERAGE":"",n.map?"#define USE_MAP":"",n.matcap?"#define USE_MATCAP":"",n.envMap?"#define USE_ENVMAP":"",n.envMap?"#define "+c:"",n.envMap?"#define "+u:"",n.envMap?"#define "+d:"",f?"#define CUBEUV_TEXEL_WIDTH "+f.texelWidth:"",f?"#define CUBEUV_TEXEL_HEIGHT "+f.texelHeight:"",f?"#define CUBEUV_MAX_MIP "+f.maxMip+".0":"",n.lightMap?"#define USE_LIGHTMAP":"",n.aoMap?"#define USE_AOMAP":"",n.bumpMap?"#define USE_BUMPMAP":"",n.normalMap?"#define USE_NORMALMAP":"",n.normalMapObjectSpace?"#define USE_NORMALMAP_OBJECTSPACE":"",n.normalMapTangentSpace?"#define USE_NORMALMAP_TANGENTSPACE":"",n.emissiveMap?"#define USE_EMISSIVEMAP":"",n.anisotropy?"#define USE_ANISOTROPY":"",n.anisotropyMap?"#define USE_ANISOTROPYMAP":"",n.clearcoat?"#define USE_CLEARCOAT":"",n.clearcoatMap?"#define USE_CLEARCOATMAP":"",n.clearcoatRoughnessMap?"#define USE_CLEARCOAT_ROUGHNESSMAP":"",n.clearcoatNormalMap?"#define USE_CLEARCOAT_NORMALMAP":"",n.dispersion?"#define USE_DISPERSION":"",n.iridescence?"#define USE_IRIDESCENCE":"",n.iridescenceMap?"#define USE_IRIDESCENCEMAP":"",n.iridescenceThicknessMap?"#define USE_IRIDESCENCE_THICKNESSMAP":"",n.specularMap?"#define USE_SPECULARMAP":"",n.specularColorMap?"#define USE_SPECULAR_COLORMAP":"",n.specularIntensityMap?"#define USE_SPECULAR_INTENSITYMAP":"",n.roughnessMap?"#define USE_ROUGHNESSMAP":"",n.metalnessMap?"#define USE_METALNESSMAP":"",n.alphaMap?"#define USE_ALPHAMAP":"",n.alphaTest?"#define USE_ALPHATEST":"",n.alphaHash?"#define USE_ALPHAHASH":"",n.sheen?"#define USE_SHEEN":"",n.sheenColorMap?"#define USE_SHEEN_COLORMAP":"",n.sheenRoughnessMap?"#define USE_SHEEN_ROUGHNESSMAP":"",n.transmission?"#define USE_TRANSMISSION":"",n.transmissionMap?"#define USE_TRANSMISSIONMAP":"",n.thicknessMap?"#define USE_THICKNESSMAP":"",n.vertexTangents&&n.flatShading===false?"#define USE_TANGENT":"",n.vertexColors||n.instancingColor||n.batchingColor?"#define USE_COLOR":"",n.vertexAlphas?"#define USE_COLOR_ALPHA":"",n.vertexUv1s?"#define USE_UV1":"",n.vertexUv2s?"#define USE_UV2":"",n.vertexUv3s?"#define USE_UV3":"",n.pointsUvs?"#define USE_POINTS_UV":"",n.gradientMap?"#define USE_GRADIENTMAP":"",n.flatShading?"#define FLAT_SHADED":"",n.doubleSided?"#define DOUBLE_SIDED":"",n.flipSided?"#define FLIP_SIDED":"",n.shadowMapEnabled?"#define USE_SHADOWMAP":"",n.shadowMapEnabled?"#define "+l:"",n.premultipliedAlpha?"#define PREMULTIPLIED_ALPHA":"",n.numLightProbes>0?"#define USE_LIGHT_PROBES":"",n.decodeVideoTexture?"#define DECODE_VIDEO_TEXTURE":"",n.decodeVideoTextureEmissive?"#define DECODE_VIDEO_TEXTURE_EMISSIVE":"",n.logarithmicDepthBuffer?"#define USE_LOGDEPTHBUF":"",n.reverseDepthBuffer?"#define USE_REVERSEDEPTHBUF":"","uniform mat4 viewMatrix;","uniform vec3 cameraPosition;","uniform bool isOrthographic;",n.toneMapping!==Z?"#define TONE_MAPPING":"",n.toneMapping!==Z?Ki.tonemapping_pars_fragment:"",n.toneMapping!==Z?getToneMappingFunction("toneMapping",n.toneMapping):"",n.dithering?"#define DITHERING":"",n.opaque?"#define OPAQUE":"",Ki.colorspace_pars_fragment,getTexelEncodingFunction("linearToOutputTexel",n.outputColorSpace),getLuminanceFunction(),n.useDepthPacking?"#define DEPTH_PACKING "+n.depthPacking:"","\n"].filter(filterEmptyLine).join("\n")}o=resolveIncludes(o);o=replaceLightNums(o,n);o=replaceClippingPlaneNums(o,n);s=resolveIncludes(s);s=replaceLightNums(s,n);s=replaceClippingPlaneNums(s,n);o=unrollLoops(o);s=unrollLoops(s);if(n.isRawShaderMaterial!==true){v="#version 300 es\n";g=[p,"#define attribute in","#define varying out","#define texture2D texture"].join("\n")+"\n"+g;_=["#define varying in",n.glslVersion===De?"":"layout(location = 0) out highp vec4 pc_fragColor;",n.glslVersion===De?"":"#define gl_FragColor pc_fragColor","#define gl_FragDepthEXT gl_FragDepth","#define texture2D texture","#define textureCube texture","#define texture2DProj textureProj","#define texture2DLodEXT textureLod","#define texture2DProjLodEXT textureProjLod","#define textureCubeLodEXT textureLod","#define texture2DGradEXT textureGrad","#define texture2DProjGradEXT textureProjGrad","#define textureCubeGradEXT textureGrad"].join("\n")+"\n"+_}const E=v+g+o;const S=v+_+s;const T=WebGLShader(a,a.VERTEX_SHADER,E);const M=WebGLShader(a,a.FRAGMENT_SHADER,S);a.attachShader(h,T);a.attachShader(h,M);n.index0AttributeName!==void 0?a.bindAttribLocation(h,0,n.index0AttributeName):n.morphTargets===true&&a.bindAttribLocation(h,0,"position");a.linkProgram(h);function onFirstUse(t){if(e.debug.checkShaderErrors){const n=a.getProgramInfoLog(h).trim();const r=a.getShaderInfoLog(T).trim();const i=a.getShaderInfoLog(M).trim();let o=true;let s=true;if(a.getProgramParameter(h,a.LINK_STATUS)===false){o=false;if(typeof e.debug.onShaderError==="function")e.debug.onShaderError(a,h,T,M);else{const e=getShaderErrors(a,T,"vertex");const r=getShaderErrors(a,M,"fragment");console.error("THREE.WebGLProgram: Shader Error "+a.getError()+" - VALIDATE_STATUS "+a.getProgramParameter(h,a.VALIDATE_STATUS)+"\n\nMaterial Name: "+t.name+"\nMaterial Type: "+t.type+"\n\nProgram Info Log: "+n+"\n"+e+"\n"+r)}}else n!==""?console.warn("THREE.WebGLProgram: Program Info Log:",n):r!==""&&i!==""||(s=false);s&&(t.diagnostics={runnable:o,programLog:n,vertexShader:{log:r,prefix:g},fragmentShader:{log:i,prefix:_}})}a.deleteShader(T);a.deleteShader(M);x=new WebGLUniforms(a,h);b=fetchAttributeLocations(a,h)}let x;this.getUniforms=function(){x===void 0&&onFirstUse(this);return x};let b;this.getAttributes=function(){b===void 0&&onFirstUse(this);return b};let R=n.rendererExtensionParallelShaderCompile===false;this.isReady=function(){R===false&&(R=a.getProgramParameter(h,Uo));return R};this.destroy=function(){r.releaseStatesOfProgram(this);a.deleteProgram(h);this.program=void 0};this.type=n.shaderType;this.name=n.shaderName;this.id=Po++;this.cacheKey=t;this.usedTimes=1;this.program=h;this.vertexShader=T;this.fragmentShader=M;return this}let Oo=0;class WebGLShaderCache{constructor(){this.shaderCache=new Map;this.materialCache=new Map}update(e){const t=e.vertexShader;const n=e.fragmentShader;const r=this._getShaderStage(t);const a=this._getShaderStage(n);const i=this._getShaderCacheForMaterial(e);if(i.has(r)===false){i.add(r);r.usedTimes++}if(i.has(a)===false){i.add(a);a.usedTimes++}return this}remove(e){const t=this.materialCache.get(e);for(const e of t){e.usedTimes--;e.usedTimes===0&&this.shaderCache.delete(e.code)}this.materialCache.delete(e);return this}getVertexShaderID(e){return this._getShaderStage(e.vertexShader).id}getFragmentShaderID(e){return this._getShaderStage(e.fragmentShader).id}dispose(){this.shaderCache.clear();this.materialCache.clear()}_getShaderCacheForMaterial(e){const t=this.materialCache;let n=t.get(e);if(n===void 0){n=new Set;t.set(e,n)}return n}_getShaderStage(e){const t=this.shaderCache;let n=t.get(e);if(n===void 0){n=new WebGLShaderStage(e);t.set(e,n)}return n}}class WebGLShaderStage{constructor(e){this.id=Oo++;this.code=e;this.usedTimes=0}}function WebGLPrograms(e,t,n,r,a,i,o){const s=new we;const l=new WebGLShaderCache;const c=new Set;const u=[];const d=a.logarithmicDepthBuffer;const f=a.vertexTextures;let p=a.precision;const m={MeshDepthMaterial:"depth",MeshDistanceMaterial:"distanceRGBA",MeshNormalMaterial:"normal",MeshBasicMaterial:"basic",MeshLambertMaterial:"lambert",MeshPhongMaterial:"phong",MeshToonMaterial:"toon",MeshStandardMaterial:"physical",MeshPhysicalMaterial:"physical",MeshMatcapMaterial:"matcap",LineBasicMaterial:"basic",LineDashedMaterial:"dashed",PointsMaterial:"points",ShadowMaterial:"shadow",SpriteMaterial:"sprite"};function getChannel(e){c.add(e);return e===0?"uv":`uv${e}`}function getParameters(i,s,u,h,g){const _=h.fog;const E=g.geometry;const S=i.isMeshStandardMaterial?h.environment:null;const T=(i.isMeshStandardMaterial?n:t).get(i.envMap||S);const M=!T||T.mapping!==v?null:T.image.height;const A=m[i.type];if(i.precision!==null){p=a.getMaxPrecision(i.precision);p!==i.precision&&console.warn("THREE.WebGLProgram.getParameters:",i.precision,"not supported, using",p,"instead.")}const C=E.morphAttributes.position||E.morphAttributes.normal||E.morphAttributes.color;const L=C!==void 0?C.length:0;let U=0;E.morphAttributes.position!==void 0&&(U=1);E.morphAttributes.normal!==void 0&&(U=2);E.morphAttributes.color!==void 0&&(U=3);let P,y;let D,w;if(A){const e=$i[A];P=e.vertexShader;y=e.fragmentShader}else{P=i.vertexShader;y=i.fragmentShader;l.update(i);D=l.getVertexShaderID(i);w=l.getFragmentShaderID(i)}const I=e.getRenderTarget();const N=e.state.buffers.depth.getReversed();const O=g.isInstancedMesh===true;const F=g.isBatchedMesh===true;const B=!!i.map;const G=!!i.matcap;const V=!!T;const H=!!i.aoMap;const W=!!i.lightMap;const k=!!i.bumpMap;const z=!!i.normalMap;const X=!!i.displacementMap;const j=!!i.emissiveMap;const Y=!!i.metalnessMap;const K=!!i.roughnessMap;const $=i.anisotropy>0;const Q=i.clearcoat>0;const J=i.dispersion>0;const ee=i.iridescence>0;const te=i.sheen>0;const ne=i.transmission>0;const re=$&&!!i.anisotropyMap;const ae=Q&&!!i.clearcoatMap;const ie=Q&&!!i.clearcoatNormalMap;const oe=Q&&!!i.clearcoatRoughnessMap;const se=ee&&!!i.iridescenceMap;const le=ee&&!!i.iridescenceThicknessMap;const ce=te&&!!i.sheenColorMap;const ue=te&&!!i.sheenRoughnessMap;const de=!!i.specularMap;const fe=!!i.specularColorMap;const pe=!!i.specularIntensityMap;const me=ne&&!!i.transmissionMap;const he=ne&&!!i.thicknessMap;const ge=!!i.gradientMap;const _e=!!i.alphaMap;const ve=i.alphaTest>0;const Ee=!!i.alphaHash;const Se=!!i.extensions;let Te=Z;i.toneMapped&&(I!==null&&I.isXRRenderTarget!==true||(Te=e.toneMapping));const Me={shaderID:A,shaderType:i.type,shaderName:i.name,vertexShader:P,fragmentShader:y,defines:i.defines,customVertexShaderID:D,customFragmentShaderID:w,isRawShaderMaterial:i.isRawShaderMaterial===true,glslVersion:i.glslVersion,precision:p,batching:F,batchingColor:F&&g._colorsTexture!==null,instancing:O,instancingColor:O&&g.instanceColor!==null,instancingMorph:O&&g.morphTexture!==null,supportsVertexTextures:f,outputColorSpace:I===null?e.outputColorSpace:I.isXRRenderTarget===true?I.texture.colorSpace:q,alphaToCoverage:!!i.alphaToCoverage,map:B,matcap:G,envMap:V,envMapMode:V&&T.mapping,envMapCubeUVHeight:M,aoMap:H,lightMap:W,bumpMap:k,normalMap:z,displacementMap:f&&X,emissiveMap:j,normalMapObjectSpace:z&&i.normalMapType===Ie,normalMapTangentSpace:z&&i.normalMapType===Ne,metalnessMap:Y,roughnessMap:K,anisotropy:$,anisotropyMap:re,clearcoat:Q,clearcoatMap:ae,clearcoatNormalMap:ie,clearcoatRoughnessMap:oe,dispersion:J,iridescence:ee,iridescenceMap:se,iridescenceThicknessMap:le,sheen:te,sheenColorMap:ce,sheenRoughnessMap:ue,specularMap:de,specularColorMap:fe,specularIntensityMap:pe,transmission:ne,transmissionMap:me,thicknessMap:he,gradientMap:ge,opaque:i.transparent===false&&i.blending===Oe&&i.alphaToCoverage===false,alphaMap:_e,alphaTest:ve,alphaHash:Ee,combine:i.combine,mapUv:B&&getChannel(i.map.channel),aoMapUv:H&&getChannel(i.aoMap.channel),lightMapUv:W&&getChannel(i.lightMap.channel),bumpMapUv:k&&getChannel(i.bumpMap.channel),normalMapUv:z&&getChannel(i.normalMap.channel),displacementMapUv:X&&getChannel(i.displacementMap.channel),emissiveMapUv:j&&getChannel(i.emissiveMap.channel),metalnessMapUv:Y&&getChannel(i.metalnessMap.channel),roughnessMapUv:K&&getChannel(i.roughnessMap.channel),anisotropyMapUv:re&&getChannel(i.anisotropyMap.channel),clearcoatMapUv:ae&&getChannel(i.clearcoatMap.channel),clearcoatNormalMapUv:ie&&getChannel(i.clearcoatNormalMap.channel),clearcoatRoughnessMapUv:oe&&getChannel(i.clearcoatRoughnessMap.channel),iridescenceMapUv:se&&getChannel(i.iridescenceMap.channel),iridescenceThicknessMapUv:le&&getChannel(i.iridescenceThicknessMap.channel),sheenColorMapUv:ce&&getChannel(i.sheenColorMap.channel),sheenRoughnessMapUv:ue&&getChannel(i.sheenRoughnessMap.channel),specularMapUv:de&&getChannel(i.specularMap.channel),specularColorMapUv:fe&&getChannel(i.specularColorMap.channel),specularIntensityMapUv:pe&&getChannel(i.specularIntensityMap.channel),transmissionMapUv:me&&getChannel(i.transmissionMap.channel),thicknessMapUv:he&&getChannel(i.thicknessMap.channel),alphaMapUv:_e&&getChannel(i.alphaMap.channel),vertexTangents:!!E.attributes.tangent&&(z||$),vertexColors:i.vertexColors,vertexAlphas:i.vertexColors===true&&!!E.attributes.color&&E.attributes.color.itemSize===4,pointsUvs:g.isPoints===true&&!!E.attributes.uv&&(B||_e),fog:!!_,useFog:i.fog===true,fogExp2:!!_&&_.isFogExp2,flatShading:i.flatShading===true,sizeAttenuation:i.sizeAttenuation===true,logarithmicDepthBuffer:d,reverseDepthBuffer:N,skinning:g.isSkinnedMesh===true,morphTargets:E.morphAttributes.position!==void 0,morphNormals:E.morphAttributes.normal!==void 0,morphColors:E.morphAttributes.color!==void 0,morphTargetsCount:L,morphTextureStride:U,numDirLights:s.directional.length,numPointLights:s.point.length,numSpotLights:s.spot.length,numSpotLightMaps:s.spotLightMap.length,numRectAreaLights:s.rectArea.length,numHemiLights:s.hemi.length,numDirLightShadows:s.directionalShadowMap.length,numPointLightShadows:s.pointShadowMap.length,numSpotLightShadows:s.spotShadowMap.length,numSpotLightShadowsWithMaps:s.numSpotLightShadowsWithMaps,numLightProbes:s.numLightProbes,numClippingPlanes:o.numPlanes,numClipIntersection:o.numIntersection,dithering:i.dithering,shadowMapEnabled:e.shadowMap.enabled&&u.length>0,shadowMapType:e.shadowMap.type,toneMapping:Te,decodeVideoTexture:B&&i.map.isVideoTexture===true&&b.getTransfer(i.map.colorSpace)===R,decodeVideoTextureEmissive:j&&i.emissiveMap.isVideoTexture===true&&b.getTransfer(i.emissiveMap.colorSpace)===R,premultipliedAlpha:i.premultipliedAlpha,doubleSided:i.side===Fe,flipSided:i.side===x,useDepthPacking:i.depthPacking>=0,depthPacking:i.depthPacking||0,index0AttributeName:i.index0AttributeName,extensionClipCullDistance:Se&&i.extensions.clipCullDistance===true&&r.has("WEBGL_clip_cull_distance"),extensionMultiDraw:(Se&&i.extensions.multiDraw===true||F)&&r.has("WEBGL_multi_draw"),rendererExtensionParallelShaderCompile:r.has("KHR_parallel_shader_compile"),customProgramCacheKey:i.customProgramCacheKey()};Me.vertexUv1s=c.has(1);Me.vertexUv2s=c.has(2);Me.vertexUv3s=c.has(3);c.clear();return Me}function getProgramCacheKey(t){const n=[];if(t.shaderID)n.push(t.shaderID);else{n.push(t.customVertexShaderID);n.push(t.customFragmentShaderID)}if(t.defines!==void 0)for(const e in t.defines){n.push(e);n.push(t.defines[e])}if(t.isRawShaderMaterial===false){getProgramCacheKeyParameters(n,t);getProgramCacheKeyBooleans(n,t);n.push(e.outputColorSpace)}n.push(t.customProgramCacheKey);return n.join()}function getProgramCacheKeyParameters(e,t){e.push(t.precision);e.push(t.outputColorSpace);e.push(t.envMapMode);e.push(t.envMapCubeUVHeight);e.push(t.mapUv);e.push(t.alphaMapUv);e.push(t.lightMapUv);e.push(t.aoMapUv);e.push(t.bumpMapUv);e.push(t.normalMapUv);e.push(t.displacementMapUv);e.push(t.emissiveMapUv);e.push(t.metalnessMapUv);e.push(t.roughnessMapUv);e.push(t.anisotropyMapUv);e.push(t.clearcoatMapUv);e.push(t.clearcoatNormalMapUv);e.push(t.clearcoatRoughnessMapUv);e.push(t.iridescenceMapUv);e.push(t.iridescenceThicknessMapUv);e.push(t.sheenColorMapUv);e.push(t.sheenRoughnessMapUv);e.push(t.specularMapUv);e.push(t.specularColorMapUv);e.push(t.specularIntensityMapUv);e.push(t.transmissionMapUv);e.push(t.thicknessMapUv);e.push(t.combine);e.push(t.fogExp2);e.push(t.sizeAttenuation);e.push(t.morphTargetsCount);e.push(t.morphAttributeCount);e.push(t.numDirLights);e.push(t.numPointLights);e.push(t.numSpotLights);e.push(t.numSpotLightMaps);e.push(t.numHemiLights);e.push(t.numRectAreaLights);e.push(t.numDirLightShadows);e.push(t.numPointLightShadows);e.push(t.numSpotLightShadows);e.push(t.numSpotLightShadowsWithMaps);e.push(t.numLightProbes);e.push(t.shadowMapType);e.push(t.toneMapping);e.push(t.numClippingPlanes);e.push(t.numClipIntersection);e.push(t.depthPacking)}function getProgramCacheKeyBooleans(e,t){s.disableAll();t.supportsVertexTextures&&s.enable(0);t.instancing&&s.enable(1);t.instancingColor&&s.enable(2);t.instancingMorph&&s.enable(3);t.matcap&&s.enable(4);t.envMap&&s.enable(5);t.normalMapObjectSpace&&s.enable(6);t.normalMapTangentSpace&&s.enable(7);t.clearcoat&&s.enable(8);t.iridescence&&s.enable(9);t.alphaTest&&s.enable(10);t.vertexColors&&s.enable(11);t.vertexAlphas&&s.enable(12);t.vertexUv1s&&s.enable(13);t.vertexUv2s&&s.enable(14);t.vertexUv3s&&s.enable(15);t.vertexTangents&&s.enable(16);t.anisotropy&&s.enable(17);t.alphaHash&&s.enable(18);t.batching&&s.enable(19);t.dispersion&&s.enable(20);t.batchingColor&&s.enable(21);e.push(s.mask);s.disableAll();t.fog&&s.enable(0);t.useFog&&s.enable(1);t.flatShading&&s.enable(2);t.logarithmicDepthBuffer&&s.enable(3);t.reverseDepthBuffer&&s.enable(4);t.skinning&&s.enable(5);t.morphTargets&&s.enable(6);t.morphNormals&&s.enable(7);t.morphColors&&s.enable(8);t.premultipliedAlpha&&s.enable(9);t.shadowMapEnabled&&s.enable(10);t.doubleSided&&s.enable(11);t.flipSided&&s.enable(12);t.useDepthPacking&&s.enable(13);t.dithering&&s.enable(14);t.transmission&&s.enable(15);t.sheen&&s.enable(16);t.opaque&&s.enable(17);t.pointsUvs&&s.enable(18);t.decodeVideoTexture&&s.enable(19);t.decodeVideoTextureEmissive&&s.enable(20);t.alphaToCoverage&&s.enable(21);e.push(s.mask)}function getUniforms(e){const t=m[e.type];let n;if(t){const e=$i[t];n=Be.clone(e.uniforms)}else n=e.uniforms;return n}function acquireProgram(t,n){let r;for(let e=0,t=u.length;e<t;e++){const t=u[e];if(t.cacheKey===n){r=t;++r.usedTimes;break}}if(r===void 0){r=new WebGLProgram(e,n,t,i);u.push(r)}return r}function releaseProgram(e){if(--e.usedTimes===0){const t=u.indexOf(e);u[t]=u[u.length-1];u.pop();e.destroy()}}function releaseShaderCache(e){l.remove(e)}function dispose(){l.dispose()}return{getParameters:getParameters,getProgramCacheKey:getProgramCacheKey,getUniforms:getUniforms,acquireProgram:acquireProgram,releaseProgram:releaseProgram,releaseShaderCache:releaseShaderCache,programs:u,dispose:dispose}}function WebGLProperties(){let e=new WeakMap;function has(t){return e.has(t)}function get(t){let n=e.get(t);if(n===void 0){n={};e.set(t,n)}return n}function remove(t){e.delete(t)}function update(t,n,r){e.get(t)[n]=r}function dispose(){e=new WeakMap}return{has:has,get:get,remove:remove,update:update,dispose:dispose}}function painterSortStable(e,t){return e.groupOrder!==t.groupOrder?e.groupOrder-t.groupOrder:e.renderOrder!==t.renderOrder?e.renderOrder-t.renderOrder:e.material.id!==t.material.id?e.material.id-t.material.id:e.z!==t.z?e.z-t.z:e.id-t.id}function reversePainterSortStable(e,t){return e.groupOrder!==t.groupOrder?e.groupOrder-t.groupOrder:e.renderOrder!==t.renderOrder?e.renderOrder-t.renderOrder:e.z!==t.z?t.z-e.z:e.id-t.id}function WebGLRenderList(){const e=[];let t=0;const n=[];const r=[];const a=[];function init(){t=0;n.length=0;r.length=0;a.length=0}function getNextRenderItem(n,r,a,i,o,s){let l=e[t];if(l===void 0){l={id:n.id,object:n,geometry:r,material:a,groupOrder:i,renderOrder:n.renderOrder,z:o,group:s};e[t]=l}else{l.id=n.id;l.object=n;l.geometry=r;l.material=a;l.groupOrder=i;l.renderOrder=n.renderOrder;l.z=o;l.group=s}t++;return l}function push(e,t,i,o,s,l){const c=getNextRenderItem(e,t,i,o,s,l);i.transmission>0?r.push(c):i.transparent===true?a.push(c):n.push(c)}function unshift(e,t,i,o,s,l){const c=getNextRenderItem(e,t,i,o,s,l);i.transmission>0?r.unshift(c):i.transparent===true?a.unshift(c):n.unshift(c)}function sort(e,t){n.length>1&&n.sort(e||painterSortStable);r.length>1&&r.sort(t||reversePainterSortStable);a.length>1&&a.sort(t||reversePainterSortStable)}function finish(){for(let n=t,r=e.length;n<r;n++){const t=e[n];if(t.id===null)break;t.id=null;t.object=null;t.geometry=null;t.material=null;t.group=null}}return{opaque:n,transmissive:r,transparent:a,init:init,push:push,unshift:unshift,finish:finish,sort:sort}}function WebGLRenderLists(){let e=new WeakMap;function get(t,n){const r=e.get(t);let a;if(r===void 0){a=new WebGLRenderList;e.set(t,[a])}else if(n>=r.length){a=new WebGLRenderList;r.push(a)}else a=r[n];return a}function dispose(){e=new WeakMap}return{get:get,dispose:dispose}}function UniformsCache(){const e={};return{get:function(t){if(e[t.id]!==void 0)return e[t.id];let n;switch(t.type){case"DirectionalLight":n={direction:new l,color:new a};break;case"SpotLight":n={position:new l,direction:new l,color:new a,distance:0,coneCos:0,penumbraCos:0,decay:0};break;case"PointLight":n={position:new l,color:new a,distance:0,decay:0};break;case"HemisphereLight":n={direction:new l,skyColor:new a,groundColor:new a};break;case"RectAreaLight":n={color:new a,position:new l,halfWidth:new l,halfHeight:new l};break}e[t.id]=n;return n}}}function ShadowUniformsCache(){const e={};return{get:function(t){if(e[t.id]!==void 0)return e[t.id];let n;switch(t.type){case"DirectionalLight":n={shadowIntensity:1,shadowBias:0,shadowNormalBias:0,shadowRadius:1,shadowMapSize:new o};break;case"SpotLight":n={shadowIntensity:1,shadowBias:0,shadowNormalBias:0,shadowRadius:1,shadowMapSize:new o};break;case"PointLight":n={shadowIntensity:1,shadowBias:0,shadowNormalBias:0,shadowRadius:1,shadowMapSize:new o,shadowCameraNear:1,shadowCameraFar:1e3};break}e[t.id]=n;return n}}}let Fo=0;function shadowCastingAndTexturingLightsFirst(e,t){return(t.castShadow?2:0)-(e.castShadow?2:0)+(t.map?1:0)-(e.map?1:0)}function WebGLLights(e){const t=new UniformsCache;const n=ShadowUniformsCache();const r={version:0,hash:{directionalLength:-1,pointLength:-1,spotLength:-1,rectAreaLength:-1,hemiLength:-1,numDirectionalShadows:-1,numPointShadows:-1,numSpotShadows:-1,numSpotMaps:-1,numLightProbes:-1},ambient:[0,0,0],probe:[],directional:[],directionalShadow:[],directionalShadowMap:[],directionalShadowMatrix:[],spot:[],spotLightMap:[],spotShadow:[],spotShadowMap:[],spotLightMatrix:[],rectArea:[],rectAreaLTC1:null,rectAreaLTC2:null,point:[],pointShadow:[],pointShadowMap:[],pointShadowMatrix:[],hemi:[],numSpotLightShadowsWithMaps:0,numLightProbes:0};for(let e=0;e<9;e++)r.probe.push(new l);const a=new l;const i=new f;const o=new f;function setup(a){let i=0,o=0,s=0;for(let e=0;e<9;e++)r.probe[e].set(0,0,0);let l=0;let c=0;let u=0;let d=0;let f=0;let p=0;let m=0;let h=0;let g=0;let _=0;let v=0;a.sort(shadowCastingAndTexturingLightsFirst);for(let e=0,E=a.length;e<E;e++){const E=a[e];const S=E.color;const T=E.intensity;const M=E.distance;const x=E.shadow&&E.shadow.map?E.shadow.map.texture:null;if(E.isAmbientLight){i+=S.r*T;o+=S.g*T;s+=S.b*T}else if(E.isLightProbe){for(let e=0;e<9;e++)r.probe[e].addScaledVector(E.sh.coefficients[e],T);v++}else if(E.isDirectionalLight){const e=t.get(E);e.color.copy(E.color).multiplyScalar(E.intensity);if(E.castShadow){const e=E.shadow;const t=n.get(E);t.shadowIntensity=e.intensity;t.shadowBias=e.bias;t.shadowNormalBias=e.normalBias;t.shadowRadius=e.radius;t.shadowMapSize=e.mapSize;r.directionalShadow[l]=t;r.directionalShadowMap[l]=x;r.directionalShadowMatrix[l]=E.shadow.matrix;p++}r.directional[l]=e;l++}else if(E.isSpotLight){const e=t.get(E);e.position.setFromMatrixPosition(E.matrixWorld);e.color.copy(S).multiplyScalar(T);e.distance=M;e.coneCos=Math.cos(E.angle);e.penumbraCos=Math.cos(E.angle*(1-E.penumbra));e.decay=E.decay;r.spot[u]=e;const a=E.shadow;if(E.map){r.spotLightMap[g]=E.map;g++;a.updateMatrices(E);E.castShadow&&_++}r.spotLightMatrix[u]=a.matrix;if(E.castShadow){const e=n.get(E);e.shadowIntensity=a.intensity;e.shadowBias=a.bias;e.shadowNormalBias=a.normalBias;e.shadowRadius=a.radius;e.shadowMapSize=a.mapSize;r.spotShadow[u]=e;r.spotShadowMap[u]=x;h++}u++}else if(E.isRectAreaLight){const e=t.get(E);e.color.copy(S).multiplyScalar(T);e.halfWidth.set(E.width*.5,0,0);e.halfHeight.set(0,E.height*.5,0);r.rectArea[d]=e;d++}else if(E.isPointLight){const e=t.get(E);e.color.copy(E.color).multiplyScalar(E.intensity);e.distance=E.distance;e.decay=E.decay;if(E.castShadow){const e=E.shadow;const t=n.get(E);t.shadowIntensity=e.intensity;t.shadowBias=e.bias;t.shadowNormalBias=e.normalBias;t.shadowRadius=e.radius;t.shadowMapSize=e.mapSize;t.shadowCameraNear=e.camera.near;t.shadowCameraFar=e.camera.far;r.pointShadow[c]=t;r.pointShadowMap[c]=x;r.pointShadowMatrix[c]=E.shadow.matrix;m++}r.point[c]=e;c++}else if(E.isHemisphereLight){const e=t.get(E);e.skyColor.copy(E.color).multiplyScalar(T);e.groundColor.copy(E.groundColor).multiplyScalar(T);r.hemi[f]=e;f++}}if(d>0)if(e.has("OES_texture_float_linear")===true){r.rectAreaLTC1=Zi.LTC_FLOAT_1;r.rectAreaLTC2=Zi.LTC_FLOAT_2}else{r.rectAreaLTC1=Zi.LTC_HALF_1;r.rectAreaLTC2=Zi.LTC_HALF_2}r.ambient[0]=i;r.ambient[1]=o;r.ambient[2]=s;const E=r.hash;if(E.directionalLength!==l||E.pointLength!==c||E.spotLength!==u||E.rectAreaLength!==d||E.hemiLength!==f||E.numDirectionalShadows!==p||E.numPointShadows!==m||E.numSpotShadows!==h||E.numSpotMaps!==g||E.numLightProbes!==v){r.directional.length=l;r.spot.length=u;r.rectArea.length=d;r.point.length=c;r.hemi.length=f;r.directionalShadow.length=p;r.directionalShadowMap.length=p;r.pointShadow.length=m;r.pointShadowMap.length=m;r.spotShadow.length=h;r.spotShadowMap.length=h;r.directionalShadowMatrix.length=p;r.pointShadowMatrix.length=m;r.spotLightMatrix.length=h+g-_;r.spotLightMap.length=g;r.numSpotLightShadowsWithMaps=_;r.numLightProbes=v;E.directionalLength=l;E.pointLength=c;E.spotLength=u;E.rectAreaLength=d;E.hemiLength=f;E.numDirectionalShadows=p;E.numPointShadows=m;E.numSpotShadows=h;E.numSpotMaps=g;E.numLightProbes=v;r.version=Fo++}}function setupView(e,t){let n=0;let s=0;let l=0;let c=0;let u=0;const d=t.matrixWorldInverse;for(let t=0,f=e.length;t<f;t++){const f=e[t];if(f.isDirectionalLight){const e=r.directional[n];e.direction.setFromMatrixPosition(f.matrixWorld);a.setFromMatrixPosition(f.target.matrixWorld);e.direction.sub(a);e.direction.transformDirection(d);n++}else if(f.isSpotLight){const e=r.spot[l];e.position.setFromMatrixPosition(f.matrixWorld);e.position.applyMatrix4(d);e.direction.setFromMatrixPosition(f.matrixWorld);a.setFromMatrixPosition(f.target.matrixWorld);e.direction.sub(a);e.direction.transformDirection(d);l++}else if(f.isRectAreaLight){const e=r.rectArea[c];e.position.setFromMatrixPosition(f.matrixWorld);e.position.applyMatrix4(d);o.identity();i.copy(f.matrixWorld);i.premultiply(d);o.extractRotation(i);e.halfWidth.set(f.width*.5,0,0);e.halfHeight.set(0,f.height*.5,0);e.halfWidth.applyMatrix4(o);e.halfHeight.applyMatrix4(o);c++}else if(f.isPointLight){const e=r.point[s];e.position.setFromMatrixPosition(f.matrixWorld);e.position.applyMatrix4(d);s++}else if(f.isHemisphereLight){const e=r.hemi[u];e.direction.setFromMatrixPosition(f.matrixWorld);e.direction.transformDirection(d);u++}}}return{setup:setup,setupView:setupView,state:r}}function WebGLRenderState(e){const t=new WebGLLights(e);const n=[];const r=[];function init(e){a.camera=e;n.length=0;r.length=0}function pushLight(e){n.push(e)}function pushShadow(e){r.push(e)}function setupLights(){t.setup(n)}function setupLightsView(e){t.setupView(n,e)}const a={lightsArray:n,shadowsArray:r,camera:null,lights:t,transmissionRenderTarget:{}};return{init:init,state:a,setupLights:setupLights,setupLightsView:setupLightsView,pushLight:pushLight,pushShadow:pushShadow}}function WebGLRenderStates(e){let t=new WeakMap;function get(n,r=0){const a=t.get(n);let i;if(a===void 0){i=new WebGLRenderState(e);t.set(n,[i])}else if(r>=a.length){i=new WebGLRenderState(e);a.push(i)}else i=a[r];return i}function dispose(){t=new WeakMap}return{get:get,dispose:dispose}}const Bo="void main() {\n\tgl_Position = vec4( position, 1.0 );\n}";const Go="uniform sampler2D shadow_pass;\nuniform vec2 resolution;\nuniform float radius;\n#include <packing>\nvoid main() {\n\tconst float samples = float( VSM_SAMPLES );\n\tfloat mean = 0.0;\n\tfloat squared_mean = 0.0;\n\tfloat uvStride = samples <= 1.0 ? 0.0 : 2.0 / ( samples - 1.0 );\n\tfloat uvStart = samples <= 1.0 ? 0.0 : - 1.0;\n\tfor ( float i = 0.0; i < samples; i ++ ) {\n\t\tfloat uvOffset = uvStart + i * uvStride;\n\t\t#ifdef HORIZONTAL_PASS\n\t\t\tvec2 distribution = unpackRGBATo2Half( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( uvOffset, 0.0 ) * radius ) / resolution ) );\n\t\t\tmean += distribution.x;\n\t\t\tsquared_mean += distribution.y * distribution.y + distribution.x * distribution.x;\n\t\t#else\n\t\t\tfloat depth = unpackRGBAToDepth( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( 0.0, uvOffset ) * radius ) / resolution ) );\n\t\t\tmean += depth;\n\t\t\tsquared_mean += depth * depth;\n\t\t#endif\n\t}\n\tmean = mean / samples;\n\tsquared_mean = squared_mean / samples;\n\tfloat std_dev = sqrt( squared_mean - mean * mean );\n\tgl_FragColor = pack2HalfToRGBA( vec2( mean, std_dev ) );\n}";function WebGLShadowMap(e,t,n){let r=new Ge;const a=new o,i=new o,s=new le,l=new Ve({depthPacking:He}),c=new We,u={},d=n.maxTextureSize;const f={[L]:x,[x]:L,[Fe]:Fe};const p=new T({defines:{VSM_SAMPLES:8},uniforms:{shadow_pass:{value:null},resolution:{value:new o},radius:{value:4}},vertexShader:Bo,fragmentShader:Go});const m=p.clone();m.defines.HORIZONTAL_PASS=1;const h=new J;h.setAttribute("position",new te(new Float32Array([-1,-1,.5,3,-1,.5,-1,3,.5]),3));const g=new E(h,p);const _=this;this.enabled=false;this.autoUpdate=true;this.needsUpdate=false;this.type=Ae;let v=this.type;this.render=function(t,n,o){if(_.enabled===false)return;if(_.autoUpdate===false&&_.needsUpdate===false)return;if(t.length===0)return;const l=e.getRenderTarget();const c=e.getActiveCubeFace();const u=e.getActiveMipmapLevel();const f=e.state;f.setBlending(re);f.buffers.color.setClear(1,1,1,1);f.buffers.depth.setTest(true);f.setScissorTest(false);const p=v!==Le&&this.type===Le;const m=v===Le&&this.type!==Le;for(let l=0,c=t.length;l<c;l++){const c=t[l];const u=c.shadow;if(u===void 0){console.warn("THREE.WebGLShadowMap:",c,"has no shadow.");continue}if(u.autoUpdate===false&&u.needsUpdate===false)continue;a.copy(u.mapSize);const h=u.getFrameExtents();a.multiply(h);i.copy(u.mapSize);if(a.x>d||a.y>d){if(a.x>d){i.x=Math.floor(d/h.x);a.x=i.x*h.x;u.mapSize.x=i.x}if(a.y>d){i.y=Math.floor(d/h.y);a.y=i.y*h.y;u.mapSize.y=i.y}}if(u.map===null||p===true||m===true){const e=this.type!==Le?{minFilter:ke,magFilter:ke}:{};u.map!==null&&u.map.dispose();u.map=new ne(a.x,a.y,e);u.map.texture.name=c.name+".shadowMap";u.camera.updateProjectionMatrix()}e.setRenderTarget(u.map);e.clear();const g=u.getViewportCount();for(let e=0;e<g;e++){const t=u.getViewport(e);s.set(i.x*t.x,i.y*t.y,i.x*t.z,i.y*t.w);f.viewport(s);u.updateMatrices(c,e);r=u.getFrustum();renderObject(n,o,u.camera,c,this.type)}u.isPointLightShadow!==true&&this.type===Le&&VSMPass(u,o);u.needsUpdate=false}v=this.type;_.needsUpdate=false;e.setRenderTarget(l,c,u)};function VSMPass(n,r){const i=t.update(g);if(p.defines.VSM_SAMPLES!==n.blurSamples){p.defines.VSM_SAMPLES=n.blurSamples;m.defines.VSM_SAMPLES=n.blurSamples;p.needsUpdate=true;m.needsUpdate=true}n.mapPass===null&&(n.mapPass=new ne(a.x,a.y));p.uniforms.shadow_pass.value=n.map.texture;p.uniforms.resolution.value=n.mapSize;p.uniforms.radius.value=n.radius;e.setRenderTarget(n.mapPass);e.clear();e.renderBufferDirect(r,null,i,p,g,null);m.uniforms.shadow_pass.value=n.mapPass.texture;m.uniforms.resolution.value=n.mapSize;m.uniforms.radius.value=n.radius;e.setRenderTarget(n.map);e.clear();e.renderBufferDirect(r,null,i,m,g,null)}function getDepthMaterial(t,n,r,a){let i=null;const o=r.isPointLight===true?t.customDistanceMaterial:t.customDepthMaterial;if(o!==void 0)i=o;else{i=r.isPointLight===true?c:l;if(e.localClippingEnabled&&n.clipShadows===true&&Array.isArray(n.clippingPlanes)&&n.clippingPlanes.length!==0||n.displacementMap&&n.displacementScale!==0||n.alphaMap&&n.alphaTest>0||n.map&&n.alphaTest>0){const e=i.uuid,t=n.uuid;let r=u[e];if(r===void 0){r={};u[e]=r}let a=r[t];if(a===void 0){a=i.clone();r[t]=a;n.addEventListener("dispose",onMaterialDispose)}i=a}}i.visible=n.visible;i.wireframe=n.wireframe;i.side=a===Le?n.shadowSide!==null?n.shadowSide:n.side:n.shadowSide!==null?n.shadowSide:f[n.side];i.alphaMap=n.alphaMap;i.alphaTest=n.alphaTest;i.map=n.map;i.clipShadows=n.clipShadows;i.clippingPlanes=n.clippingPlanes;i.clipIntersection=n.clipIntersection;i.displacementMap=n.displacementMap;i.displacementScale=n.displacementScale;i.displacementBias=n.displacementBias;i.wireframeLinewidth=n.wireframeLinewidth;i.linewidth=n.linewidth;if(r.isPointLight===true&&i.isMeshDistanceMaterial===true){const t=e.properties.get(i);t.light=r}return i}function renderObject(n,a,i,o,s){if(n.visible===false)return;const l=n.layers.test(a.layers);if(l&&(n.isMesh||n.isLine||n.isPoints)&&(n.castShadow||n.receiveShadow&&s===Le)&&(!n.frustumCulled||r.intersectsObject(n))){n.modelViewMatrix.multiplyMatrices(i.matrixWorldInverse,n.matrixWorld);const r=t.update(n);const l=n.material;if(Array.isArray(l)){const t=r.groups;for(let c=0,u=t.length;c<u;c++){const u=t[c];const d=l[u.materialIndex];if(d&&d.visible){const t=getDepthMaterial(n,d,o,s);n.onBeforeShadow(e,n,a,i,r,t,u);e.renderBufferDirect(i,null,r,t,n,u);n.onAfterShadow(e,n,a,i,r,t,u)}}}else if(l.visible){const t=getDepthMaterial(n,l,o,s);n.onBeforeShadow(e,n,a,i,r,t,null);e.renderBufferDirect(i,null,r,t,n,null);n.onAfterShadow(e,n,a,i,r,t,null)}}const c=n.children;for(let e=0,t=c.length;e<t;e++)renderObject(c[e],a,i,o,s)}function onMaterialDispose(e){const t=e.target;t.removeEventListener("dispose",onMaterialDispose);for(const t in u){const n=u[t];const r=e.target.uuid;if(r in n){const e=n[r];e.dispose();delete n[r]}}}}const Vo={[ze]:Xe,[je]:Ye,[qe]:Ke,[Ze]:$e,[Xe]:ze,[Ye]:je,[Ke]:qe,[$e]:Ze};function WebGLState(e,t){function ColorBuffer(){let t=false;const n=new le;let r=null;const a=new le(0,0,0,0);return{setMask:function(n){if(r!==n&&!t){e.colorMask(n,n,n,n);r=n}},setLocked:function(e){t=e},setClear:function(t,r,i,o,s){if(s===true){t*=o;r*=o;i*=o}n.set(t,r,i,o);if(a.equals(n)===false){e.clearColor(t,r,i,o);a.copy(n)}},reset:function(){t=false;r=null;a.set(-1,0,0,0)}}}function DepthBuffer(){let n=false;let r=false;let a=null;let i=null;let o=null;return{setReversed:function(e){if(r!==e){const e=t.get("EXT_clip_control");r?e.clipControlEXT(e.LOWER_LEFT_EXT,e.ZERO_TO_ONE_EXT):e.clipControlEXT(e.LOWER_LEFT_EXT,e.NEGATIVE_ONE_TO_ONE_EXT);const n=o;o=null;this.setClear(n)}r=e},getReversed:function(){return r},setTest:function(t){t?enable(e.DEPTH_TEST):disable(e.DEPTH_TEST)},setMask:function(t){if(a!==t&&!n){e.depthMask(t);a=t}},setFunc:function(t){r&&(t=Vo[t]);if(i!==t){switch(t){case ze:e.depthFunc(e.NEVER);break;case Xe:e.depthFunc(e.ALWAYS);break;case je:e.depthFunc(e.LESS);break;case Ze:e.depthFunc(e.LEQUAL);break;case qe:e.depthFunc(e.EQUAL);break;case $e:e.depthFunc(e.GEQUAL);break;case Ye:e.depthFunc(e.GREATER);break;case Ke:e.depthFunc(e.NOTEQUAL);break;default:e.depthFunc(e.LEQUAL)}i=t}},setLocked:function(e){n=e},setClear:function(t){if(o!==t){r&&(t=1-t);e.clearDepth(t);o=t}},reset:function(){n=false;a=null;i=null;o=null;r=false}}}function StencilBuffer(){let t=false;let n=null;let r=null;let a=null;let i=null;let o=null;let s=null;let l=null;let c=null;return{setTest:function(n){t||(n?enable(e.STENCIL_TEST):disable(e.STENCIL_TEST))},setMask:function(r){if(n!==r&&!t){e.stencilMask(r);n=r}},setFunc:function(t,n,o){if(r!==t||a!==n||i!==o){e.stencilFunc(t,n,o);r=t;a=n;i=o}},setOp:function(t,n,r){if(o!==t||s!==n||l!==r){e.stencilOp(t,n,r);o=t;s=n;l=r}},setLocked:function(e){t=e},setClear:function(t){if(c!==t){e.clearStencil(t);c=t}},reset:function(){t=false;n=null;r=null;a=null;i=null;o=null;s=null;l=null;c=null}}}const n=new ColorBuffer;const r=new DepthBuffer;const i=new StencilBuffer;const o=new WeakMap;const s=new WeakMap;let l={};let c={};let u=new WeakMap;let d=[];let f=null;let p=false;let m=null;let h=null;let g=null;let _=null;let v=null;let E=null;let S=null;let T=new a(0,0,0);let M=0;let b=false;let R=null;let A=null;let C=null;let L=null;let U=null;const P=e.getParameter(e.MAX_COMBINED_TEXTURE_IMAGE_UNITS);let y=false;let D=0;const w=e.getParameter(e.VERSION);if(w.indexOf("WebGL")!==-1){D=parseFloat(/^WebGL (\d)/.exec(w)[1]);y=D>=1}else if(w.indexOf("OpenGL ES")!==-1){D=parseFloat(/^OpenGL ES (\d)/.exec(w)[1]);y=D>=2}let I=null;let N={};const O=e.getParameter(e.SCISSOR_BOX);const F=e.getParameter(e.VIEWPORT);const B=(new le).fromArray(O);const G=(new le).fromArray(F);function createTexture(t,n,r,a){const i=new Uint8Array(4);const o=e.createTexture();e.bindTexture(t,o);e.texParameteri(t,e.TEXTURE_MIN_FILTER,e.NEAREST);e.texParameteri(t,e.TEXTURE_MAG_FILTER,e.NEAREST);for(let o=0;o<r;o++)t===e.TEXTURE_3D||t===e.TEXTURE_2D_ARRAY?e.texImage3D(n,0,e.RGBA,1,1,a,0,e.RGBA,e.UNSIGNED_BYTE,i):e.texImage2D(n+o,0,e.RGBA,1,1,0,e.RGBA,e.UNSIGNED_BYTE,i);return o}const V={};V[e.TEXTURE_2D]=createTexture(e.TEXTURE_2D,e.TEXTURE_2D,1);V[e.TEXTURE_CUBE_MAP]=createTexture(e.TEXTURE_CUBE_MAP,e.TEXTURE_CUBE_MAP_POSITIVE_X,6);V[e.TEXTURE_2D_ARRAY]=createTexture(e.TEXTURE_2D_ARRAY,e.TEXTURE_2D_ARRAY,1,1);V[e.TEXTURE_3D]=createTexture(e.TEXTURE_3D,e.TEXTURE_3D,1,1);n.setClear(0,0,0,1);r.setClear(1);i.setClear(0);enable(e.DEPTH_TEST);r.setFunc(Ze);setFlipSided(false);setCullFace(Qe);enable(e.CULL_FACE);setBlending(re);function enable(t){if(l[t]!==true){e.enable(t);l[t]=true}}function disable(t){if(l[t]!==false){e.disable(t);l[t]=false}}function bindFramebuffer(t,n){if(c[t]!==n){e.bindFramebuffer(t,n);c[t]=n;t===e.DRAW_FRAMEBUFFER&&(c[e.FRAMEBUFFER]=n);t===e.FRAMEBUFFER&&(c[e.DRAW_FRAMEBUFFER]=n);return true}return false}function drawBuffers(t,n){let r=d;let a=false;if(t){r=u.get(n);if(r===void 0){r=[];u.set(n,r)}const i=t.textures;if(r.length!==i.length||r[0]!==e.COLOR_ATTACHMENT0){for(let t=0,n=i.length;t<n;t++)r[t]=e.COLOR_ATTACHMENT0+t;r.length=i.length;a=true}}else if(r[0]!==e.BACK){r[0]=e.BACK;a=true}a&&e.drawBuffers(r)}function useProgram(t){if(f!==t){e.useProgram(t);f=t;return true}return false}const H={[Je]:e.FUNC_ADD,[tt]:e.FUNC_SUBTRACT,[nt]:e.FUNC_REVERSE_SUBTRACT};H[rt]=e.MIN;H[it]=e.MAX;const W={[ot]:e.ZERO,[st]:e.ONE,[lt]:e.SRC_COLOR,[ct]:e.SRC_ALPHA,[ut]:e.SRC_ALPHA_SATURATE,[dt]:e.DST_COLOR,[pt]:e.DST_ALPHA,[mt]:e.ONE_MINUS_SRC_COLOR,[ht]:e.ONE_MINUS_SRC_ALPHA,[gt]:e.ONE_MINUS_DST_COLOR,[_t]:e.ONE_MINUS_DST_ALPHA,[vt]:e.CONSTANT_COLOR,[Et]:e.ONE_MINUS_CONSTANT_COLOR,[St]:e.CONSTANT_ALPHA,[Tt]:e.ONE_MINUS_CONSTANT_ALPHA};function setBlending(t,n,r,a,i,o,s,l,c,u){if(t!==re){if(p===false){enable(e.BLEND);p=true}if(t===Mt){i=i||n;o=o||r;s=s||a;if(n!==h||i!==v){e.blendEquationSeparate(H[n],H[i]);h=n;v=i}if(r!==g||a!==_||o!==E||s!==S){e.blendFuncSeparate(W[r],W[a],W[o],W[s]);g=r;_=a;E=o;S=s}if(l.equals(T)===false||c!==M){e.blendColor(l.r,l.g,l.b,c);T.copy(l);M=c}m=t;b=false}else if(t!==m||u!==b){if(h!==Je||v!==Je){e.blendEquation(e.FUNC_ADD);h=Je;v=Je}if(u)switch(t){case Oe:e.blendFuncSeparate(e.ONE,e.ONE_MINUS_SRC_ALPHA,e.ONE,e.ONE_MINUS_SRC_ALPHA);break;case Rt:e.blendFunc(e.ONE,e.ONE);break;case bt:e.blendFuncSeparate(e.ZERO,e.ONE_MINUS_SRC_COLOR,e.ZERO,e.ONE);break;case xt:e.blendFuncSeparate(e.ZERO,e.SRC_COLOR,e.ZERO,e.SRC_ALPHA);break;default:console.error("THREE.WebGLState: Invalid blending: ",t);break}else switch(t){case Oe:e.blendFuncSeparate(e.SRC_ALPHA,e.ONE_MINUS_SRC_ALPHA,e.ONE,e.ONE_MINUS_SRC_ALPHA);break;case Rt:e.blendFunc(e.SRC_ALPHA,e.ONE);break;case bt:e.blendFuncSeparate(e.ZERO,e.ONE_MINUS_SRC_COLOR,e.ZERO,e.ONE);break;case xt:e.blendFunc(e.ZERO,e.SRC_COLOR);break;default:console.error("THREE.WebGLState: Invalid blending: ",t);break}g=null;_=null;E=null;S=null;T.set(0,0,0);M=0;m=t;b=u}}else if(p===true){disable(e.BLEND);p=false}}function setMaterial(t,a){t.side===Fe?disable(e.CULL_FACE):enable(e.CULL_FACE);let o=t.side===x;a&&(o=!o);setFlipSided(o);t.blending===Oe&&t.transparent===false?setBlending(re):setBlending(t.blending,t.blendEquation,t.blendSrc,t.blendDst,t.blendEquationAlpha,t.blendSrcAlpha,t.blendDstAlpha,t.blendColor,t.blendAlpha,t.premultipliedAlpha);r.setFunc(t.depthFunc);r.setTest(t.depthTest);r.setMask(t.depthWrite);n.setMask(t.colorWrite);const s=t.stencilWrite;i.setTest(s);if(s){i.setMask(t.stencilWriteMask);i.setFunc(t.stencilFunc,t.stencilRef,t.stencilFuncMask);i.setOp(t.stencilFail,t.stencilZFail,t.stencilZPass)}setPolygonOffset(t.polygonOffset,t.polygonOffsetFactor,t.polygonOffsetUnits);t.alphaToCoverage===true?enable(e.SAMPLE_ALPHA_TO_COVERAGE):disable(e.SAMPLE_ALPHA_TO_COVERAGE)}function setFlipSided(t){if(R!==t){t?e.frontFace(e.CW):e.frontFace(e.CCW);R=t}}function setCullFace(t){if(t!==At){enable(e.CULL_FACE);t!==A&&(t===Qe?e.cullFace(e.BACK):t===Ct?e.cullFace(e.FRONT):e.cullFace(e.FRONT_AND_BACK))}else disable(e.CULL_FACE);A=t}function setLineWidth(t){if(t!==C){y&&e.lineWidth(t);C=t}}function setPolygonOffset(t,n,r){if(t){enable(e.POLYGON_OFFSET_FILL);if(L!==n||U!==r){e.polygonOffset(n,r);L=n;U=r}}else disable(e.POLYGON_OFFSET_FILL)}function setScissorTest(t){t?enable(e.SCISSOR_TEST):disable(e.SCISSOR_TEST)}function activeTexture(t){t===void 0&&(t=e.TEXTURE0+P-1);if(I!==t){e.activeTexture(t);I=t}}function bindTexture(t,n,r){r===void 0&&(r=I===null?e.TEXTURE0+P-1:I);let a=N[r];if(a===void 0){a={type:void 0,texture:void 0};N[r]=a}if(a.type!==t||a.texture!==n){if(I!==r){e.activeTexture(r);I=r}e.bindTexture(t,n||V[t]);a.type=t;a.texture=n}}function unbindTexture(){const t=N[I];if(t!==void 0&&t.type!==void 0){e.bindTexture(t.type,null);t.type=void 0;t.texture=void 0}}function compressedTexImage2D(){try{e.compressedTexImage2D.apply(e,arguments)}catch(e){console.error("THREE.WebGLState:",e)}}function compressedTexImage3D(){try{e.compressedTexImage3D.apply(e,arguments)}catch(e){console.error("THREE.WebGLState:",e)}}function texSubImage2D(){try{e.texSubImage2D.apply(e,arguments)}catch(e){console.error("THREE.WebGLState:",e)}}function texSubImage3D(){try{e.texSubImage3D.apply(e,arguments)}catch(e){console.error("THREE.WebGLState:",e)}}function compressedTexSubImage2D(){try{e.compressedTexSubImage2D.apply(e,arguments)}catch(e){console.error("THREE.WebGLState:",e)}}function compressedTexSubImage3D(){try{e.compressedTexSubImage3D.apply(e,arguments)}catch(e){console.error("THREE.WebGLState:",e)}}function texStorage2D(){try{e.texStorage2D.apply(e,arguments)}catch(e){console.error("THREE.WebGLState:",e)}}function texStorage3D(){try{e.texStorage3D.apply(e,arguments)}catch(e){console.error("THREE.WebGLState:",e)}}function texImage2D(){try{e.texImage2D.apply(e,arguments)}catch(e){console.error("THREE.WebGLState:",e)}}function texImage3D(){try{e.texImage3D.apply(e,arguments)}catch(e){console.error("THREE.WebGLState:",e)}}function scissor(t){if(B.equals(t)===false){e.scissor(t.x,t.y,t.z,t.w);B.copy(t)}}function viewport(t){if(G.equals(t)===false){e.viewport(t.x,t.y,t.z,t.w);G.copy(t)}}function updateUBOMapping(t,n){let r=s.get(n);if(r===void 0){r=new WeakMap;s.set(n,r)}let a=r.get(t);if(a===void 0){a=e.getUniformBlockIndex(n,t.name);r.set(t,a)}}function uniformBlockBinding(t,n){const r=s.get(n);const a=r.get(t);if(o.get(n)!==a){e.uniformBlockBinding(n,a,t.__bindingPointIndex);o.set(n,a)}}function reset(){e.disable(e.BLEND);e.disable(e.CULL_FACE);e.disable(e.DEPTH_TEST);e.disable(e.POLYGON_OFFSET_FILL);e.disable(e.SCISSOR_TEST);e.disable(e.STENCIL_TEST);e.disable(e.SAMPLE_ALPHA_TO_COVERAGE);e.blendEquation(e.FUNC_ADD);e.blendFunc(e.ONE,e.ZERO);e.blendFuncSeparate(e.ONE,e.ZERO,e.ONE,e.ZERO);e.blendColor(0,0,0,0);e.colorMask(true,true,true,true);e.clearColor(0,0,0,0);e.depthMask(true);e.depthFunc(e.LESS);r.setReversed(false);e.clearDepth(1);e.stencilMask(4294967295);e.stencilFunc(e.ALWAYS,0,4294967295);e.stencilOp(e.KEEP,e.KEEP,e.KEEP);e.clearStencil(0);e.cullFace(e.BACK);e.frontFace(e.CCW);e.polygonOffset(0,0);e.activeTexture(e.TEXTURE0);e.bindFramebuffer(e.FRAMEBUFFER,null);e.bindFramebuffer(e.DRAW_FRAMEBUFFER,null);e.bindFramebuffer(e.READ_FRAMEBUFFER,null);e.useProgram(null);e.lineWidth(1);e.scissor(0,0,e.canvas.width,e.canvas.height);e.viewport(0,0,e.canvas.width,e.canvas.height);l={};I=null;N={};c={};u=new WeakMap;d=[];f=null;p=false;m=null;h=null;g=null;_=null;v=null;E=null;S=null;T=new a(0,0,0);M=0;b=false;R=null;A=null;C=null;L=null;U=null;B.set(0,0,e.canvas.width,e.canvas.height);G.set(0,0,e.canvas.width,e.canvas.height);n.reset();r.reset();i.reset()}return{buffers:{color:n,depth:r,stencil:i},enable:enable,disable:disable,bindFramebuffer:bindFramebuffer,drawBuffers:drawBuffers,useProgram:useProgram,setBlending:setBlending,setMaterial:setMaterial,setFlipSided:setFlipSided,setCullFace:setCullFace,setLineWidth:setLineWidth,setPolygonOffset:setPolygonOffset,setScissorTest:setScissorTest,activeTexture:activeTexture,bindTexture:bindTexture,unbindTexture:unbindTexture,compressedTexImage2D:compressedTexImage2D,compressedTexImage3D:compressedTexImage3D,texImage2D:texImage2D,texImage3D:texImage3D,updateUBOMapping:updateUBOMapping,uniformBlockBinding:uniformBlockBinding,texStorage2D:texStorage2D,texStorage3D:texStorage3D,texSubImage2D:texSubImage2D,texSubImage3D:texSubImage3D,compressedTexSubImage2D:compressedTexSubImage2D,compressedTexSubImage3D:compressedTexSubImage3D,scissor:scissor,viewport:viewport,reset:reset}}function WebGLTextures(e,t,n,r,a,i,s){const l=t.has("WEBGL_multisampled_render_to_texture")?t.get("WEBGL_multisampled_render_to_texture"):null;const c=typeof navigator!=="undefined"&&/OculusBrowser/g.test(navigator.userAgent);const u=new o;const d=new WeakMap;let f;const p=new WeakMap;let m=false;try{m=typeof OffscreenCanvas!=="undefined"&&new OffscreenCanvas(1,1).getContext("2d")!==null}catch(e){}function createCanvas(e,t){return m?new OffscreenCanvas(e,t):Lt("canvas")}function resizeImage(e,t,n){let r=1;const a=getDimensions(e);(a.width>n||a.height>n)&&(r=n/Math.max(a.width,a.height));if(r<1){if(typeof HTMLImageElement!=="undefined"&&e instanceof HTMLImageElement||typeof HTMLCanvasElement!=="undefined"&&e instanceof HTMLCanvasElement||typeof ImageBitmap!=="undefined"&&e instanceof ImageBitmap||typeof VideoFrame!=="undefined"&&e instanceof VideoFrame){const n=Math.floor(r*a.width);const i=Math.floor(r*a.height);f===void 0&&(f=createCanvas(n,i));const o=t?createCanvas(n,i):f;o.width=n;o.height=i;const s=o.getContext("2d");s.drawImage(e,0,0,n,i);console.warn("THREE.WebGLRenderer: Texture has been resized from ("+a.width+"x"+a.height+") to ("+n+"x"+i+").");return o}"data"in e&&console.warn("THREE.WebGLRenderer: Image in DataTexture is too big ("+a.width+"x"+a.height+").");return e}return e}function textureNeedsGenerateMipmaps(e){return e.generateMipmaps}function generateMipmap(t){e.generateMipmap(t)}function getTargetType(t){return t.isWebGLCubeRenderTarget?e.TEXTURE_CUBE_MAP:t.isWebGL3DRenderTarget?e.TEXTURE_3D:t.isWebGLArrayRenderTarget||t.isCompressedArrayTexture?e.TEXTURE_2D_ARRAY:e.TEXTURE_2D}function getInternalFormat(n,r,a,i,o=false){if(n!==null){if(e[n]!==void 0)return e[n];console.warn("THREE.WebGLRenderer: Attempt to use non-existing WebGL internal format '"+n+"'")}let s=r;if(r===e.RED){a===e.FLOAT&&(s=e.R32F);a===e.HALF_FLOAT&&(s=e.R16F);a===e.UNSIGNED_BYTE&&(s=e.R8)}if(r===e.RED_INTEGER){a===e.UNSIGNED_BYTE&&(s=e.R8UI);a===e.UNSIGNED_SHORT&&(s=e.R16UI);a===e.UNSIGNED_INT&&(s=e.R32UI);a===e.BYTE&&(s=e.R8I);a===e.SHORT&&(s=e.R16I);a===e.INT&&(s=e.R32I)}if(r===e.RG){a===e.FLOAT&&(s=e.RG32F);a===e.HALF_FLOAT&&(s=e.RG16F);a===e.UNSIGNED_BYTE&&(s=e.RG8)}if(r===e.RG_INTEGER){a===e.UNSIGNED_BYTE&&(s=e.RG8UI);a===e.UNSIGNED_SHORT&&(s=e.RG16UI);a===e.UNSIGNED_INT&&(s=e.RG32UI);a===e.BYTE&&(s=e.RG8I);a===e.SHORT&&(s=e.RG16I);a===e.INT&&(s=e.RG32I)}if(r===e.RGB_INTEGER){a===e.UNSIGNED_BYTE&&(s=e.RGB8UI);a===e.UNSIGNED_SHORT&&(s=e.RGB16UI);a===e.UNSIGNED_INT&&(s=e.RGB32UI);a===e.BYTE&&(s=e.RGB8I);a===e.SHORT&&(s=e.RGB16I);a===e.INT&&(s=e.RGB32I)}if(r===e.RGBA_INTEGER){a===e.UNSIGNED_BYTE&&(s=e.RGBA8UI);a===e.UNSIGNED_SHORT&&(s=e.RGBA16UI);a===e.UNSIGNED_INT&&(s=e.RGBA32UI);a===e.BYTE&&(s=e.RGBA8I);a===e.SHORT&&(s=e.RGBA16I);a===e.INT&&(s=e.RGBA32I)}r===e.RGB&&a===e.UNSIGNED_INT_5_9_9_9_REV&&(s=e.RGB9_E5);if(r===e.RGBA){const t=o?ve:b.getTransfer(i);a===e.FLOAT&&(s=e.RGBA32F);a===e.HALF_FLOAT&&(s=e.RGBA16F);a===e.UNSIGNED_BYTE&&(s=t===R?e.SRGB8_ALPHA8:e.RGBA8);a===e.UNSIGNED_SHORT_4_4_4_4&&(s=e.RGBA4);a===e.UNSIGNED_SHORT_5_5_5_1&&(s=e.RGB5_A1)}s!==e.R16F&&s!==e.R32F&&s!==e.RG16F&&s!==e.RG32F&&s!==e.RGBA16F&&s!==e.RGBA32F||t.get("EXT_color_buffer_float");return s}function getInternalDepthFormat(t,n){let r;if(t){if(n===null||n===Ut||n===Pt)r=e.DEPTH24_STENCIL8;else if(n===B)r=e.DEPTH32F_STENCIL8;else if(n===yt){r=e.DEPTH24_STENCIL8;console.warn("DepthTexture: 16 bit depth attachment is not supported with stencil. Using 24-bit attachment.")}}else n===null||n===Ut||n===Pt?r=e.DEPTH_COMPONENT24:n===B?r=e.DEPTH_COMPONENT32F:n===yt&&(r=e.DEPTH_COMPONENT16);return r}function getMipLevels(e,t){return textureNeedsGenerateMipmaps(e)===true||e.isFramebufferTexture&&e.minFilter!==ke&&e.minFilter!==Y?Math.log2(Math.max(t.width,t.height))+1:e.mipmaps!==void 0&&e.mipmaps.length>0?e.mipmaps.length:e.isCompressedTexture&&Array.isArray(e.image)?t.mipmaps.length:1}function onTextureDispose(e){const t=e.target;t.removeEventListener("dispose",onTextureDispose);deallocateTexture(t);t.isVideoTexture&&d.delete(t)}function onRenderTargetDispose(e){const t=e.target;t.removeEventListener("dispose",onRenderTargetDispose);deallocateRenderTarget(t)}function deallocateTexture(e){const t=r.get(e);if(t.__webglInit===void 0)return;const n=e.source;const a=p.get(n);if(a){const r=a[t.__cacheKey];r.usedTimes--;r.usedTimes===0&&deleteTexture(e);Object.keys(a).length===0&&p.delete(n)}r.remove(e)}function deleteTexture(t){const n=r.get(t);e.deleteTexture(n.__webglTexture);const a=t.source;const i=p.get(a);delete i[n.__cacheKey];s.memory.textures--}function deallocateRenderTarget(t){const n=r.get(t);if(t.depthTexture){t.depthTexture.dispose();r.remove(t.depthTexture)}if(t.isWebGLCubeRenderTarget)for(let t=0;t<6;t++){if(Array.isArray(n.__webglFramebuffer[t]))for(let r=0;r<n.__webglFramebuffer[t].length;r++)e.deleteFramebuffer(n.__webglFramebuffer[t][r]);else e.deleteFramebuffer(n.__webglFramebuffer[t]);n.__webglDepthbuffer&&e.deleteRenderbuffer(n.__webglDepthbuffer[t])}else{if(Array.isArray(n.__webglFramebuffer))for(let t=0;t<n.__webglFramebuffer.length;t++)e.deleteFramebuffer(n.__webglFramebuffer[t]);else e.deleteFramebuffer(n.__webglFramebuffer);n.__webglDepthbuffer&&e.deleteRenderbuffer(n.__webglDepthbuffer);n.__webglMultisampledFramebuffer&&e.deleteFramebuffer(n.__webglMultisampledFramebuffer);if(n.__webglColorRenderbuffer)for(let t=0;t<n.__webglColorRenderbuffer.length;t++)n.__webglColorRenderbuffer[t]&&e.deleteRenderbuffer(n.__webglColorRenderbuffer[t]);n.__webglDepthRenderbuffer&&e.deleteRenderbuffer(n.__webglDepthRenderbuffer)}const a=t.textures;for(let t=0,n=a.length;t<n;t++){const n=r.get(a[t]);if(n.__webglTexture){e.deleteTexture(n.__webglTexture);s.memory.textures--}r.remove(a[t])}r.remove(t)}let h=0;function resetTextureUnits(){h=0}function allocateTextureUnit(){const e=h;e>=a.maxTextures&&console.warn("THREE.WebGLTextures: Trying to use "+e+" texture units while this GPU supports only "+a.maxTextures);h+=1;return e}function getTextureCacheKey(e){const t=[];t.push(e.wrapS);t.push(e.wrapT);t.push(e.wrapR||0);t.push(e.magFilter);t.push(e.minFilter);t.push(e.anisotropy);t.push(e.internalFormat);t.push(e.format);t.push(e.type);t.push(e.generateMipmaps);t.push(e.premultiplyAlpha);t.push(e.flipY);t.push(e.unpackAlignment);t.push(e.colorSpace);return t.join()}function setTexture2D(t,a){const i=r.get(t);t.isVideoTexture&&updateVideoTexture(t);if(t.isRenderTargetTexture===false&&t.version>0&&i.__version!==t.version){const e=t.image;if(e===null)console.warn("THREE.WebGLRenderer: Texture marked for update but no image data found.");else{if(e.complete!==false){uploadTexture(i,t,a);return}console.warn("THREE.WebGLRenderer: Texture marked for update but image is incomplete")}}n.bindTexture(e.TEXTURE_2D,i.__webglTexture,e.TEXTURE0+a)}function setTexture2DArray(t,a){const i=r.get(t);t.version>0&&i.__version!==t.version?uploadTexture(i,t,a):n.bindTexture(e.TEXTURE_2D_ARRAY,i.__webglTexture,e.TEXTURE0+a)}function setTexture3D(t,a){const i=r.get(t);t.version>0&&i.__version!==t.version?uploadTexture(i,t,a):n.bindTexture(e.TEXTURE_3D,i.__webglTexture,e.TEXTURE0+a)}function setTextureCube(t,a){const i=r.get(t);t.version>0&&i.__version!==t.version?uploadCubeTexture(i,t,a):n.bindTexture(e.TEXTURE_CUBE_MAP,i.__webglTexture,e.TEXTURE0+a)}const g={[Dt]:e.REPEAT,[wt]:e.CLAMP_TO_EDGE,[It]:e.MIRRORED_REPEAT};const _={[ke]:e.NEAREST,[Nt]:e.NEAREST_MIPMAP_NEAREST,[Ot]:e.NEAREST_MIPMAP_LINEAR,[Y]:e.LINEAR,[Ft]:e.LINEAR_MIPMAP_NEAREST,[Bt]:e.LINEAR_MIPMAP_LINEAR};const v={[Gt]:e.NEVER,[Vt]:e.ALWAYS,[Ht]:e.LESS,[_e]:e.LEQUAL,[Wt]:e.EQUAL,[kt]:e.GEQUAL,[zt]:e.GREATER,[Xt]:e.NOTEQUAL};function setTextureParameters(n,i){i.type!==B||t.has("OES_texture_float_linear")!==false||i.magFilter!==Y&&i.magFilter!==Ft&&i.magFilter!==Ot&&i.magFilter!==Bt&&i.minFilter!==Y&&i.minFilter!==Ft&&i.minFilter!==Ot&&i.minFilter!==Bt||console.warn("THREE.WebGLRenderer: Unable to use linear filtering with floating point textures. OES_texture_float_linear not supported on this device.");e.texParameteri(n,e.TEXTURE_WRAP_S,g[i.wrapS]);e.texParameteri(n,e.TEXTURE_WRAP_T,g[i.wrapT]);n!==e.TEXTURE_3D&&n!==e.TEXTURE_2D_ARRAY||e.texParameteri(n,e.TEXTURE_WRAP_R,g[i.wrapR]);e.texParameteri(n,e.TEXTURE_MAG_FILTER,_[i.magFilter]);e.texParameteri(n,e.TEXTURE_MIN_FILTER,_[i.minFilter]);if(i.compareFunction){e.texParameteri(n,e.TEXTURE_COMPARE_MODE,e.COMPARE_REF_TO_TEXTURE);e.texParameteri(n,e.TEXTURE_COMPARE_FUNC,v[i.compareFunction])}if(t.has("EXT_texture_filter_anisotropic")===true){if(i.magFilter===ke)return;if(i.minFilter!==Ot&&i.minFilter!==Bt)return;if(i.type===B&&t.has("OES_texture_float_linear")===false)return;if(i.anisotropy>1||r.get(i).__currentAnisotropy){const o=t.get("EXT_texture_filter_anisotropic");e.texParameterf(n,o.TEXTURE_MAX_ANISOTROPY_EXT,Math.min(i.anisotropy,a.getMaxAnisotropy()));r.get(i).__currentAnisotropy=i.anisotropy}}}function initTexture(t,n){let r=false;if(t.__webglInit===void 0){t.__webglInit=true;n.addEventListener("dispose",onTextureDispose)}const a=n.source;let i=p.get(a);if(i===void 0){i={};p.set(a,i)}const o=getTextureCacheKey(n);if(o!==t.__cacheKey){if(i[o]===void 0){i[o]={texture:e.createTexture(),usedTimes:0};s.memory.textures++;r=true}i[o].usedTimes++;const a=i[t.__cacheKey];if(a!==void 0){i[t.__cacheKey].usedTimes--;a.usedTimes===0&&deleteTexture(n)}t.__cacheKey=o;t.__webglTexture=i[o].texture}return r}function uploadTexture(t,o,s){let l=e.TEXTURE_2D;(o.isDataArrayTexture||o.isCompressedArrayTexture)&&(l=e.TEXTURE_2D_ARRAY);o.isData3DTexture&&(l=e.TEXTURE_3D);const c=initTexture(t,o);const u=o.source;n.bindTexture(l,t.__webglTexture,e.TEXTURE0+s);const d=r.get(u);if(u.version!==d.__version||c===true){n.activeTexture(e.TEXTURE0+s);const t=b.getPrimaries(b.workingColorSpace);const r=o.colorSpace===jt?null:b.getPrimaries(o.colorSpace);const f=o.colorSpace===jt||t===r?e.NONE:e.BROWSER_DEFAULT_WEBGL;e.pixelStorei(e.UNPACK_FLIP_Y_WEBGL,o.flipY);e.pixelStorei(e.UNPACK_PREMULTIPLY_ALPHA_WEBGL,o.premultiplyAlpha);e.pixelStorei(e.UNPACK_ALIGNMENT,o.unpackAlignment);e.pixelStorei(e.UNPACK_COLORSPACE_CONVERSION_WEBGL,f);let p=resizeImage(o.image,false,a.maxTextureSize);p=verifyColorSpace(o,p);const m=i.convert(o.format,o.colorSpace);const h=i.convert(o.type);let g=getInternalFormat(o.internalFormat,m,h,o.colorSpace,o.isVideoTexture);setTextureParameters(l,o);let _;const v=o.mipmaps;const E=o.isVideoTexture!==true;const S=d.__version===void 0||c===true;const T=u.dataReady;const M=getMipLevels(o,p);if(o.isDepthTexture){g=getInternalDepthFormat(o.format===Yt,o.type);S&&(E?n.texStorage2D(e.TEXTURE_2D,1,g,p.width,p.height):n.texImage2D(e.TEXTURE_2D,0,g,p.width,p.height,0,m,h,null))}else if(o.isDataTexture)if(v.length>0){E&&S&&n.texStorage2D(e.TEXTURE_2D,M,g,v[0].width,v[0].height);for(let t=0,r=v.length;t<r;t++){_=v[t];E?T&&n.texSubImage2D(e.TEXTURE_2D,t,0,0,_.width,_.height,m,h,_.data):n.texImage2D(e.TEXTURE_2D,t,g,_.width,_.height,0,m,h,_.data)}o.generateMipmaps=false}else if(E){S&&n.texStorage2D(e.TEXTURE_2D,M,g,p.width,p.height);T&&n.texSubImage2D(e.TEXTURE_2D,0,0,0,p.width,p.height,m,h,p.data)}else n.texImage2D(e.TEXTURE_2D,0,g,p.width,p.height,0,m,h,p.data);else if(o.isCompressedTexture)if(o.isCompressedArrayTexture){E&&S&&n.texStorage3D(e.TEXTURE_2D_ARRAY,M,g,v[0].width,v[0].height,p.depth);for(let t=0,r=v.length;t<r;t++){_=v[t];if(o.format!==N)if(m!==null)if(E){if(T)if(o.layerUpdates.size>0){const r=qt(_.width,_.height,o.format,o.type);for(const a of o.layerUpdates){const i=_.data.subarray(a*r/_.data.BYTES_PER_ELEMENT,(a+1)*r/_.data.BYTES_PER_ELEMENT);n.compressedTexSubImage3D(e.TEXTURE_2D_ARRAY,t,0,0,a,_.width,_.height,1,m,i)}o.clearLayerUpdates()}else n.compressedTexSubImage3D(e.TEXTURE_2D_ARRAY,t,0,0,0,_.width,_.height,p.depth,m,_.data)}else n.compressedTexImage3D(e.TEXTURE_2D_ARRAY,t,g,_.width,_.height,p.depth,0,_.data,0,0);else console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()");else E?T&&n.texSubImage3D(e.TEXTURE_2D_ARRAY,t,0,0,0,_.width,_.height,p.depth,m,h,_.data):n.texImage3D(e.TEXTURE_2D_ARRAY,t,g,_.width,_.height,p.depth,0,m,h,_.data)}}else{E&&S&&n.texStorage2D(e.TEXTURE_2D,M,g,v[0].width,v[0].height);for(let t=0,r=v.length;t<r;t++){_=v[t];o.format!==N?m!==null?E?T&&n.compressedTexSubImage2D(e.TEXTURE_2D,t,0,0,_.width,_.height,m,_.data):n.compressedTexImage2D(e.TEXTURE_2D,t,g,_.width,_.height,0,_.data):console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()"):E?T&&n.texSubImage2D(e.TEXTURE_2D,t,0,0,_.width,_.height,m,h,_.data):n.texImage2D(e.TEXTURE_2D,t,g,_.width,_.height,0,m,h,_.data)}}else if(o.isDataArrayTexture)if(E){S&&n.texStorage3D(e.TEXTURE_2D_ARRAY,M,g,p.width,p.height,p.depth);if(T)if(o.layerUpdates.size>0){const t=qt(p.width,p.height,o.format,o.type);for(const r of o.layerUpdates){const a=p.data.subarray(r*t/p.data.BYTES_PER_ELEMENT,(r+1)*t/p.data.BYTES_PER_ELEMENT);n.texSubImage3D(e.TEXTURE_2D_ARRAY,0,0,0,r,p.width,p.height,1,m,h,a)}o.clearLayerUpdates()}else n.texSubImage3D(e.TEXTURE_2D_ARRAY,0,0,0,0,p.width,p.height,p.depth,m,h,p.data)}else n.texImage3D(e.TEXTURE_2D_ARRAY,0,g,p.width,p.height,p.depth,0,m,h,p.data);else if(o.isData3DTexture)if(E){S&&n.texStorage3D(e.TEXTURE_3D,M,g,p.width,p.height,p.depth);T&&n.texSubImage3D(e.TEXTURE_3D,0,0,0,0,p.width,p.height,p.depth,m,h,p.data)}else n.texImage3D(e.TEXTURE_3D,0,g,p.width,p.height,p.depth,0,m,h,p.data);else if(o.isFramebufferTexture){if(S)if(E)n.texStorage2D(e.TEXTURE_2D,M,g,p.width,p.height);else{let t=p.width,r=p.height;for(let a=0;a<M;a++){n.texImage2D(e.TEXTURE_2D,a,g,t,r,0,m,h,null);t>>=1;r>>=1}}}else if(v.length>0){if(E&&S){const t=getDimensions(v[0]);n.texStorage2D(e.TEXTURE_2D,M,g,t.width,t.height)}for(let t=0,r=v.length;t<r;t++){_=v[t];E?T&&n.texSubImage2D(e.TEXTURE_2D,t,0,0,m,h,_):n.texImage2D(e.TEXTURE_2D,t,g,m,h,_)}o.generateMipmaps=false}else if(E){if(S){const t=getDimensions(p);n.texStorage2D(e.TEXTURE_2D,M,g,t.width,t.height)}T&&n.texSubImage2D(e.TEXTURE_2D,0,0,0,m,h,p)}else n.texImage2D(e.TEXTURE_2D,0,g,m,h,p);textureNeedsGenerateMipmaps(o)&&generateMipmap(l);d.__version=u.version;o.onUpdate&&o.onUpdate(o)}t.__version=o.version}function uploadCubeTexture(t,o,s){if(o.image.length!==6)return;const l=initTexture(t,o);const c=o.source;n.bindTexture(e.TEXTURE_CUBE_MAP,t.__webglTexture,e.TEXTURE0+s);const u=r.get(c);if(c.version!==u.__version||l===true){n.activeTexture(e.TEXTURE0+s);const t=b.getPrimaries(b.workingColorSpace);const r=o.colorSpace===jt?null:b.getPrimaries(o.colorSpace);const d=o.colorSpace===jt||t===r?e.NONE:e.BROWSER_DEFAULT_WEBGL;e.pixelStorei(e.UNPACK_FLIP_Y_WEBGL,o.flipY);e.pixelStorei(e.UNPACK_PREMULTIPLY_ALPHA_WEBGL,o.premultiplyAlpha);e.pixelStorei(e.UNPACK_ALIGNMENT,o.unpackAlignment);e.pixelStorei(e.UNPACK_COLORSPACE_CONVERSION_WEBGL,d);const f=o.isCompressedTexture||o.image[0].isCompressedTexture;const p=o.image[0]&&o.image[0].isDataTexture;const m=[];for(let e=0;e<6;e++){m[e]=f||p?p?o.image[e].image:o.image[e]:resizeImage(o.image[e],true,a.maxCubemapSize);m[e]=verifyColorSpace(o,m[e])}const h=m[0],g=i.convert(o.format,o.colorSpace),_=i.convert(o.type),v=getInternalFormat(o.internalFormat,g,_,o.colorSpace);const E=o.isVideoTexture!==true;const S=u.__version===void 0||l===true;const T=c.dataReady;let M=getMipLevels(o,h);setTextureParameters(e.TEXTURE_CUBE_MAP,o);let x;if(f){E&&S&&n.texStorage2D(e.TEXTURE_CUBE_MAP,M,v,h.width,h.height);for(let t=0;t<6;t++){x=m[t].mipmaps;for(let r=0;r<x.length;r++){const a=x[r];o.format!==N?g!==null?E?T&&n.compressedTexSubImage2D(e.TEXTURE_CUBE_MAP_POSITIVE_X+t,r,0,0,a.width,a.height,g,a.data):n.compressedTexImage2D(e.TEXTURE_CUBE_MAP_POSITIVE_X+t,r,v,a.width,a.height,0,a.data):console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()"):E?T&&n.texSubImage2D(e.TEXTURE_CUBE_MAP_POSITIVE_X+t,r,0,0,a.width,a.height,g,_,a.data):n.texImage2D(e.TEXTURE_CUBE_MAP_POSITIVE_X+t,r,v,a.width,a.height,0,g,_,a.data)}}}else{x=o.mipmaps;if(E&&S){x.length>0&&M++;const t=getDimensions(m[0]);n.texStorage2D(e.TEXTURE_CUBE_MAP,M,v,t.width,t.height)}for(let t=0;t<6;t++)if(p){E?T&&n.texSubImage2D(e.TEXTURE_CUBE_MAP_POSITIVE_X+t,0,0,0,m[t].width,m[t].height,g,_,m[t].data):n.texImage2D(e.TEXTURE_CUBE_MAP_POSITIVE_X+t,0,v,m[t].width,m[t].height,0,g,_,m[t].data);for(let r=0;r<x.length;r++){const a=x[r];const i=a.image[t].image;E?T&&n.texSubImage2D(e.TEXTURE_CUBE_MAP_POSITIVE_X+t,r+1,0,0,i.width,i.height,g,_,i.data):n.texImage2D(e.TEXTURE_CUBE_MAP_POSITIVE_X+t,r+1,v,i.width,i.height,0,g,_,i.data)}}else{E?T&&n.texSubImage2D(e.TEXTURE_CUBE_MAP_POSITIVE_X+t,0,0,0,g,_,m[t]):n.texImage2D(e.TEXTURE_CUBE_MAP_POSITIVE_X+t,0,v,g,_,m[t]);for(let r=0;r<x.length;r++){const a=x[r];E?T&&n.texSubImage2D(e.TEXTURE_CUBE_MAP_POSITIVE_X+t,r+1,0,0,g,_,a.image[t]):n.texImage2D(e.TEXTURE_CUBE_MAP_POSITIVE_X+t,r+1,v,g,_,a.image[t])}}}textureNeedsGenerateMipmaps(o)&&generateMipmap(e.TEXTURE_CUBE_MAP);u.__version=c.version;o.onUpdate&&o.onUpdate(o)}t.__version=o.version}function setupFrameBufferTexture(t,a,o,s,c,u){const d=i.convert(o.format,o.colorSpace);const f=i.convert(o.type);const p=getInternalFormat(o.internalFormat,d,f,o.colorSpace);const m=r.get(a);const h=r.get(o);h.__renderTarget=a;if(!m.__hasExternalTextures){const t=Math.max(1,a.width>>u);const r=Math.max(1,a.height>>u);c===e.TEXTURE_3D||c===e.TEXTURE_2D_ARRAY?n.texImage3D(c,u,p,t,r,a.depth,0,d,f,null):n.texImage2D(c,u,p,t,r,0,d,f,null)}n.bindFramebuffer(e.FRAMEBUFFER,t);useMultisampledRTT(a)?l.framebufferTexture2DMultisampleEXT(e.FRAMEBUFFER,s,c,h.__webglTexture,0,getRenderTargetSamples(a)):(c===e.TEXTURE_2D||c>=e.TEXTURE_CUBE_MAP_POSITIVE_X&&c<=e.TEXTURE_CUBE_MAP_NEGATIVE_Z)&&e.framebufferTexture2D(e.FRAMEBUFFER,s,c,h.__webglTexture,u);n.bindFramebuffer(e.FRAMEBUFFER,null)}function setupRenderBufferStorage(t,n,r){e.bindRenderbuffer(e.RENDERBUFFER,t);if(n.depthBuffer){const a=n.depthTexture;const i=a&&a.isDepthTexture?a.type:null;const o=getInternalDepthFormat(n.stencilBuffer,i);const s=n.stencilBuffer?e.DEPTH_STENCIL_ATTACHMENT:e.DEPTH_ATTACHMENT;const c=getRenderTargetSamples(n);const u=useMultisampledRTT(n);u?l.renderbufferStorageMultisampleEXT(e.RENDERBUFFER,c,o,n.width,n.height):r?e.renderbufferStorageMultisample(e.RENDERBUFFER,c,o,n.width,n.height):e.renderbufferStorage(e.RENDERBUFFER,o,n.width,n.height);e.framebufferRenderbuffer(e.FRAMEBUFFER,s,e.RENDERBUFFER,t)}else{const t=n.textures;for(let a=0;a<t.length;a++){const o=t[a];const s=i.convert(o.format,o.colorSpace);const c=i.convert(o.type);const u=getInternalFormat(o.internalFormat,s,c,o.colorSpace);const d=getRenderTargetSamples(n);r&&useMultisampledRTT(n)===false?e.renderbufferStorageMultisample(e.RENDERBUFFER,d,u,n.width,n.height):useMultisampledRTT(n)?l.renderbufferStorageMultisampleEXT(e.RENDERBUFFER,d,u,n.width,n.height):e.renderbufferStorage(e.RENDERBUFFER,u,n.width,n.height)}}e.bindRenderbuffer(e.RENDERBUFFER,null)}function setupDepthTexture(t,a){const i=a&&a.isWebGLCubeRenderTarget;if(i)throw new Error("Depth Texture with cube render targets is not supported");n.bindFramebuffer(e.FRAMEBUFFER,t);if(!(a.depthTexture&&a.depthTexture.isDepthTexture))throw new Error("renderTarget.depthTexture must be an instance of THREE.DepthTexture");const o=r.get(a.depthTexture);o.__renderTarget=a;if(!o.__webglTexture||a.depthTexture.image.width!==a.width||a.depthTexture.image.height!==a.height){a.depthTexture.image.width=a.width;a.depthTexture.image.height=a.height;a.depthTexture.needsUpdate=true}setTexture2D(a.depthTexture,0);const s=o.__webglTexture;const c=getRenderTargetSamples(a);if(a.depthTexture.format===Kt)useMultisampledRTT(a)?l.framebufferTexture2DMultisampleEXT(e.FRAMEBUFFER,e.DEPTH_ATTACHMENT,e.TEXTURE_2D,s,0,c):e.framebufferTexture2D(e.FRAMEBUFFER,e.DEPTH_ATTACHMENT,e.TEXTURE_2D,s,0);else{if(a.depthTexture.format!==Yt)throw new Error("Unknown depthTexture format");useMultisampledRTT(a)?l.framebufferTexture2DMultisampleEXT(e.FRAMEBUFFER,e.DEPTH_STENCIL_ATTACHMENT,e.TEXTURE_2D,s,0,c):e.framebufferTexture2D(e.FRAMEBUFFER,e.DEPTH_STENCIL_ATTACHMENT,e.TEXTURE_2D,s,0)}}function setupDepthRenderbuffer(t){const a=r.get(t);const i=t.isWebGLCubeRenderTarget===true;if(a.__boundDepthTexture!==t.depthTexture){const e=t.depthTexture;a.__depthDisposeCallback&&a.__depthDisposeCallback();if(e){const disposeEvent=()=>{delete a.__boundDepthTexture;delete a.__depthDisposeCallback;e.removeEventListener("dispose",disposeEvent)};e.addEventListener("dispose",disposeEvent);a.__depthDisposeCallback=disposeEvent}a.__boundDepthTexture=e}if(t.depthTexture&&!a.__autoAllocateDepthBuffer){if(i)throw new Error("target.depthTexture not supported in Cube render targets");setupDepthTexture(a.__webglFramebuffer,t)}else if(i){a.__webglDepthbuffer=[];for(let r=0;r<6;r++){n.bindFramebuffer(e.FRAMEBUFFER,a.__webglFramebuffer[r]);if(a.__webglDepthbuffer[r]===void 0){a.__webglDepthbuffer[r]=e.createRenderbuffer();setupRenderBufferStorage(a.__webglDepthbuffer[r],t,false)}else{const n=t.stencilBuffer?e.DEPTH_STENCIL_ATTACHMENT:e.DEPTH_ATTACHMENT;const i=a.__webglDepthbuffer[r];e.bindRenderbuffer(e.RENDERBUFFER,i);e.framebufferRenderbuffer(e.FRAMEBUFFER,n,e.RENDERBUFFER,i)}}}else{n.bindFramebuffer(e.FRAMEBUFFER,a.__webglFramebuffer);if(a.__webglDepthbuffer===void 0){a.__webglDepthbuffer=e.createRenderbuffer();setupRenderBufferStorage(a.__webglDepthbuffer,t,false)}else{const n=t.stencilBuffer?e.DEPTH_STENCIL_ATTACHMENT:e.DEPTH_ATTACHMENT;const r=a.__webglDepthbuffer;e.bindRenderbuffer(e.RENDERBUFFER,r);e.framebufferRenderbuffer(e.FRAMEBUFFER,n,e.RENDERBUFFER,r)}}n.bindFramebuffer(e.FRAMEBUFFER,null)}function rebindTextures(t,n,a){const i=r.get(t);n!==void 0&&setupFrameBufferTexture(i.__webglFramebuffer,t,t.texture,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,0);a!==void 0&&setupDepthRenderbuffer(t)}function setupRenderTarget(t){const a=t.texture;const o=r.get(t);const l=r.get(a);t.addEventListener("dispose",onRenderTargetDispose);const c=t.textures;const u=t.isWebGLCubeRenderTarget===true;const d=c.length>1;if(!d){l.__webglTexture===void 0&&(l.__webglTexture=e.createTexture());l.__version=a.version;s.memory.textures++}if(u){o.__webglFramebuffer=[];for(let t=0;t<6;t++)if(a.mipmaps&&a.mipmaps.length>0){o.__webglFramebuffer[t]=[];for(let n=0;n<a.mipmaps.length;n++)o.__webglFramebuffer[t][n]=e.createFramebuffer()}else o.__webglFramebuffer[t]=e.createFramebuffer()}else{if(a.mipmaps&&a.mipmaps.length>0){o.__webglFramebuffer=[];for(let t=0;t<a.mipmaps.length;t++)o.__webglFramebuffer[t]=e.createFramebuffer()}else o.__webglFramebuffer=e.createFramebuffer();if(d)for(let t=0,n=c.length;t<n;t++){const n=r.get(c[t]);if(n.__webglTexture===void 0){n.__webglTexture=e.createTexture();s.memory.textures++}}if(t.samples>0&&useMultisampledRTT(t)===false){o.__webglMultisampledFramebuffer=e.createFramebuffer();o.__webglColorRenderbuffer=[];n.bindFramebuffer(e.FRAMEBUFFER,o.__webglMultisampledFramebuffer);for(let n=0;n<c.length;n++){const r=c[n];o.__webglColorRenderbuffer[n]=e.createRenderbuffer();e.bindRenderbuffer(e.RENDERBUFFER,o.__webglColorRenderbuffer[n]);const a=i.convert(r.format,r.colorSpace);const s=i.convert(r.type);const l=getInternalFormat(r.internalFormat,a,s,r.colorSpace,t.isXRRenderTarget===true);const u=getRenderTargetSamples(t);e.renderbufferStorageMultisample(e.RENDERBUFFER,u,l,t.width,t.height);e.framebufferRenderbuffer(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0+n,e.RENDERBUFFER,o.__webglColorRenderbuffer[n])}e.bindRenderbuffer(e.RENDERBUFFER,null);if(t.depthBuffer){o.__webglDepthRenderbuffer=e.createRenderbuffer();setupRenderBufferStorage(o.__webglDepthRenderbuffer,t,true)}n.bindFramebuffer(e.FRAMEBUFFER,null)}}if(u){n.bindTexture(e.TEXTURE_CUBE_MAP,l.__webglTexture);setTextureParameters(e.TEXTURE_CUBE_MAP,a);for(let n=0;n<6;n++)if(a.mipmaps&&a.mipmaps.length>0)for(let r=0;r<a.mipmaps.length;r++)setupFrameBufferTexture(o.__webglFramebuffer[n][r],t,a,e.COLOR_ATTACHMENT0,e.TEXTURE_CUBE_MAP_POSITIVE_X+n,r);else setupFrameBufferTexture(o.__webglFramebuffer[n],t,a,e.COLOR_ATTACHMENT0,e.TEXTURE_CUBE_MAP_POSITIVE_X+n,0);textureNeedsGenerateMipmaps(a)&&generateMipmap(e.TEXTURE_CUBE_MAP);n.unbindTexture()}else if(d){for(let a=0,i=c.length;a<i;a++){const i=c[a];const s=r.get(i);n.bindTexture(e.TEXTURE_2D,s.__webglTexture);setTextureParameters(e.TEXTURE_2D,i);setupFrameBufferTexture(o.__webglFramebuffer,t,i,e.COLOR_ATTACHMENT0+a,e.TEXTURE_2D,0);textureNeedsGenerateMipmaps(i)&&generateMipmap(e.TEXTURE_2D)}n.unbindTexture()}else{let r=e.TEXTURE_2D;(t.isWebGL3DRenderTarget||t.isWebGLArrayRenderTarget)&&(r=t.isWebGL3DRenderTarget?e.TEXTURE_3D:e.TEXTURE_2D_ARRAY);n.bindTexture(r,l.__webglTexture);setTextureParameters(r,a);if(a.mipmaps&&a.mipmaps.length>0)for(let n=0;n<a.mipmaps.length;n++)setupFrameBufferTexture(o.__webglFramebuffer[n],t,a,e.COLOR_ATTACHMENT0,r,n);else setupFrameBufferTexture(o.__webglFramebuffer,t,a,e.COLOR_ATTACHMENT0,r,0);textureNeedsGenerateMipmaps(a)&&generateMipmap(r);n.unbindTexture()}t.depthBuffer&&setupDepthRenderbuffer(t)}function updateRenderTargetMipmap(e){const t=e.textures;for(let a=0,i=t.length;a<i;a++){const i=t[a];if(textureNeedsGenerateMipmaps(i)){const t=getTargetType(e);const a=r.get(i).__webglTexture;n.bindTexture(t,a);generateMipmap(t);n.unbindTexture()}}}const E=[];const S=[];function updateMultisampleRenderTarget(t){if(t.samples>0)if(useMultisampledRTT(t)===false){const a=t.textures;const i=t.width;const o=t.height;let s=e.COLOR_BUFFER_BIT;const l=t.stencilBuffer?e.DEPTH_STENCIL_ATTACHMENT:e.DEPTH_ATTACHMENT;const u=r.get(t);const d=a.length>1;if(d)for(let t=0;t<a.length;t++){n.bindFramebuffer(e.FRAMEBUFFER,u.__webglMultisampledFramebuffer);e.framebufferRenderbuffer(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0+t,e.RENDERBUFFER,null);n.bindFramebuffer(e.FRAMEBUFFER,u.__webglFramebuffer);e.framebufferTexture2D(e.DRAW_FRAMEBUFFER,e.COLOR_ATTACHMENT0+t,e.TEXTURE_2D,null,0)}n.bindFramebuffer(e.READ_FRAMEBUFFER,u.__webglMultisampledFramebuffer);n.bindFramebuffer(e.DRAW_FRAMEBUFFER,u.__webglFramebuffer);for(let n=0;n<a.length;n++){if(t.resolveDepthBuffer){t.depthBuffer&&(s|=e.DEPTH_BUFFER_BIT);t.stencilBuffer&&t.resolveStencilBuffer&&(s|=e.STENCIL_BUFFER_BIT)}if(d){e.framebufferRenderbuffer(e.READ_FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.RENDERBUFFER,u.__webglColorRenderbuffer[n]);const t=r.get(a[n]).__webglTexture;e.framebufferTexture2D(e.DRAW_FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,t,0)}e.blitFramebuffer(0,0,i,o,0,0,i,o,s,e.NEAREST);if(c===true){E.length=0;S.length=0;E.push(e.COLOR_ATTACHMENT0+n);if(t.depthBuffer&&t.resolveDepthBuffer===false){E.push(l);S.push(l);e.invalidateFramebuffer(e.DRAW_FRAMEBUFFER,S)}e.invalidateFramebuffer(e.READ_FRAMEBUFFER,E)}}n.bindFramebuffer(e.READ_FRAMEBUFFER,null);n.bindFramebuffer(e.DRAW_FRAMEBUFFER,null);if(d)for(let t=0;t<a.length;t++){n.bindFramebuffer(e.FRAMEBUFFER,u.__webglMultisampledFramebuffer);e.framebufferRenderbuffer(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0+t,e.RENDERBUFFER,u.__webglColorRenderbuffer[t]);const i=r.get(a[t]).__webglTexture;n.bindFramebuffer(e.FRAMEBUFFER,u.__webglFramebuffer);e.framebufferTexture2D(e.DRAW_FRAMEBUFFER,e.COLOR_ATTACHMENT0+t,e.TEXTURE_2D,i,0)}n.bindFramebuffer(e.DRAW_FRAMEBUFFER,u.__webglMultisampledFramebuffer)}else if(t.depthBuffer&&t.resolveDepthBuffer===false&&c){const n=t.stencilBuffer?e.DEPTH_STENCIL_ATTACHMENT:e.DEPTH_ATTACHMENT;e.invalidateFramebuffer(e.DRAW_FRAMEBUFFER,[n])}}function getRenderTargetSamples(e){return Math.min(a.maxSamples,e.samples)}function useMultisampledRTT(e){const n=r.get(e);return e.samples>0&&t.has("WEBGL_multisampled_render_to_texture")===true&&n.__useRenderToTexture!==false}function updateVideoTexture(e){const t=s.render.frame;if(d.get(e)!==t){d.set(e,t);e.update()}}function verifyColorSpace(e,t){const n=e.colorSpace;const r=e.format;const a=e.type;if(e.isCompressedTexture===true||e.isVideoTexture===true)return t;n!==q&&n!==jt&&(b.getTransfer(n)===R?r===N&&a===F||console.warn("THREE.WebGLTextures: sRGB encoded textures have to use RGBAFormat and UnsignedByteType."):console.error("THREE.WebGLTextures: Unsupported texture color space:",n));return t}function getDimensions(e){if(typeof HTMLImageElement!=="undefined"&&e instanceof HTMLImageElement){u.width=e.naturalWidth||e.width;u.height=e.naturalHeight||e.height}else if(typeof VideoFrame!=="undefined"&&e instanceof VideoFrame){u.width=e.displayWidth;u.height=e.displayHeight}else{u.width=e.width;u.height=e.height}return u}this.allocateTextureUnit=allocateTextureUnit;this.resetTextureUnits=resetTextureUnits;this.setTexture2D=setTexture2D;this.setTexture2DArray=setTexture2DArray;this.setTexture3D=setTexture3D;this.setTextureCube=setTextureCube;this.rebindTextures=rebindTextures;this.setupRenderTarget=setupRenderTarget;this.updateRenderTargetMipmap=updateRenderTargetMipmap;this.updateMultisampleRenderTarget=updateMultisampleRenderTarget;this.setupDepthRenderbuffer=setupDepthRenderbuffer;this.setupFrameBufferTexture=setupFrameBufferTexture;this.useMultisampledRTT=useMultisampledRTT}function WebGLUtils(e,t){function convert(n,r=jt){let a;const i=b.getTransfer(r);if(n===F)return e.UNSIGNED_BYTE;if(n===Zt)return e.UNSIGNED_SHORT_4_4_4_4;if(n===$t)return e.UNSIGNED_SHORT_5_5_5_1;if(n===Qt)return e.UNSIGNED_INT_5_9_9_9_REV;if(n===Jt)return e.BYTE;if(n===tn)return e.SHORT;if(n===yt)return e.UNSIGNED_SHORT;if(n===y)return e.INT;if(n===Ut)return e.UNSIGNED_INT;if(n===B)return e.FLOAT;if(n===O)return e.HALF_FLOAT;if(n===nn)return e.ALPHA;if(n===rn)return e.RGB;if(n===N)return e.RGBA;if(n===an)return e.LUMINANCE;if(n===on)return e.LUMINANCE_ALPHA;if(n===Kt)return e.DEPTH_COMPONENT;if(n===Yt)return e.DEPTH_STENCIL;if(n===sn)return e.RED;if(n===ln)return e.RED_INTEGER;if(n===un)return e.RG;if(n===pn)return e.RG_INTEGER;if(n===mn)return e.RGBA_INTEGER;if(n===hn||n===gn||n===_n||n===vn)if(i===R){a=t.get("WEBGL_compressed_texture_s3tc_srgb");if(a===null)return null;if(n===hn)return a.COMPRESSED_SRGB_S3TC_DXT1_EXT;if(n===gn)return a.COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT;if(n===_n)return a.COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT;if(n===vn)return a.COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT}else{a=t.get("WEBGL_compressed_texture_s3tc");if(a===null)return null;if(n===hn)return a.COMPRESSED_RGB_S3TC_DXT1_EXT;if(n===gn)return a.COMPRESSED_RGBA_S3TC_DXT1_EXT;if(n===_n)return a.COMPRESSED_RGBA_S3TC_DXT3_EXT;if(n===vn)return a.COMPRESSED_RGBA_S3TC_DXT5_EXT}if(n===En||n===Sn||n===Tn||n===Mn){a=t.get("WEBGL_compressed_texture_pvrtc");if(a===null)return null;if(n===En)return a.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;if(n===Sn)return a.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;if(n===Tn)return a.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;if(n===Mn)return a.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG}if(n===xn||n===bn||n===Rn){a=t.get("WEBGL_compressed_texture_etc");if(a===null)return null;if(n===xn||n===bn)return i===R?a.COMPRESSED_SRGB8_ETC2:a.COMPRESSED_RGB8_ETC2;if(n===Rn)return i===R?a.COMPRESSED_SRGB8_ALPHA8_ETC2_EAC:a.COMPRESSED_RGBA8_ETC2_EAC}if(n===An||n===Cn||n===Ln||n===Un||n===Pn||n===yn||n===Dn||n===wn||n===In||n===Nn||n===On||n===Fn||n===Bn||n===Gn){a=t.get("WEBGL_compressed_texture_astc");if(a===null)return null;if(n===An)return i===R?a.COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR:a.COMPRESSED_RGBA_ASTC_4x4_KHR;if(n===Cn)return i===R?a.COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR:a.COMPRESSED_RGBA_ASTC_5x4_KHR;if(n===Ln)return i===R?a.COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR:a.COMPRESSED_RGBA_ASTC_5x5_KHR;if(n===Un)return i===R?a.COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR:a.COMPRESSED_RGBA_ASTC_6x5_KHR;if(n===Pn)return i===R?a.COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR:a.COMPRESSED_RGBA_ASTC_6x6_KHR;if(n===yn)return i===R?a.COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR:a.COMPRESSED_RGBA_ASTC_8x5_KHR;if(n===Dn)return i===R?a.COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR:a.COMPRESSED_RGBA_ASTC_8x6_KHR;if(n===wn)return i===R?a.COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR:a.COMPRESSED_RGBA_ASTC_8x8_KHR;if(n===In)return i===R?a.COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR:a.COMPRESSED_RGBA_ASTC_10x5_KHR;if(n===Nn)return i===R?a.COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR:a.COMPRESSED_RGBA_ASTC_10x6_KHR;if(n===On)return i===R?a.COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR:a.COMPRESSED_RGBA_ASTC_10x8_KHR;if(n===Fn)return i===R?a.COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR:a.COMPRESSED_RGBA_ASTC_10x10_KHR;if(n===Bn)return i===R?a.COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR:a.COMPRESSED_RGBA_ASTC_12x10_KHR;if(n===Gn)return i===R?a.COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR:a.COMPRESSED_RGBA_ASTC_12x12_KHR}if(n===Vn||n===Hn||n===Wn){a=t.get("EXT_texture_compression_bptc");if(a===null)return null;if(n===Vn)return i===R?a.COMPRESSED_SRGB_ALPHA_BPTC_UNORM_EXT:a.COMPRESSED_RGBA_BPTC_UNORM_EXT;if(n===Hn)return a.COMPRESSED_RGB_BPTC_SIGNED_FLOAT_EXT;if(n===Wn)return a.COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_EXT}if(n===kn||n===zn||n===Xn||n===jn){a=t.get("EXT_texture_compression_rgtc");if(a===null)return null;if(n===Vn)return a.COMPRESSED_RED_RGTC1_EXT;if(n===zn)return a.COMPRESSED_SIGNED_RED_RGTC1_EXT;if(n===Xn)return a.COMPRESSED_RED_GREEN_RGTC2_EXT;if(n===jn)return a.COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT}return n===Pt?e.UNSIGNED_INT_24_8:e[n]!==void 0?e[n]:null}return{convert:convert}}const Ho={type:"move"};class WebXRController{constructor(){this._targetRay=null;this._grip=null;this._hand=null}getHandSpace(){if(this._hand===null){this._hand=new Yn;this._hand.matrixAutoUpdate=false;this._hand.visible=false;this._hand.joints={};this._hand.inputState={pinching:false}}return this._hand}getTargetRaySpace(){if(this._targetRay===null){this._targetRay=new Yn;this._targetRay.matrixAutoUpdate=false;this._targetRay.visible=false;this._targetRay.hasLinearVelocity=false;this._targetRay.linearVelocity=new l;this._targetRay.hasAngularVelocity=false;this._targetRay.angularVelocity=new l}return this._targetRay}getGripSpace(){if(this._grip===null){this._grip=new Yn;this._grip.matrixAutoUpdate=false;this._grip.visible=false;this._grip.hasLinearVelocity=false;this._grip.linearVelocity=new l;this._grip.hasAngularVelocity=false;this._grip.angularVelocity=new l}return this._grip}dispatchEvent(e){this._targetRay!==null&&this._targetRay.dispatchEvent(e);this._grip!==null&&this._grip.dispatchEvent(e);this._hand!==null&&this._hand.dispatchEvent(e);return this}connect(e){if(e&&e.hand){const t=this._hand;if(t)for(const n of e.hand.values())this._getHandJoint(t,n)}this.dispatchEvent({type:"connected",data:e});return this}disconnect(e){this.dispatchEvent({type:"disconnected",data:e});this._targetRay!==null&&(this._targetRay.visible=false);this._grip!==null&&(this._grip.visible=false);this._hand!==null&&(this._hand.visible=false);return this}update(e,t,n){let r=null;let a=null;let i=null;const o=this._targetRay;const s=this._grip;const l=this._hand;if(e&&t.session.visibilityState!=="visible-blurred"){if(l&&e.hand){i=true;for(const r of e.hand.values()){const e=t.getJointPose(r,n);const a=this._getHandJoint(l,r);if(e!==null){a.matrix.fromArray(e.transform.matrix);a.matrix.decompose(a.position,a.rotation,a.scale);a.matrixWorldNeedsUpdate=true;a.jointRadius=e.radius}a.visible=e!==null}const r=l.joints["index-finger-tip"];const a=l.joints["thumb-tip"];const o=r.position.distanceTo(a.position);const s=.02;const c=.005;if(l.inputState.pinching&&o>s+c){l.inputState.pinching=false;this.dispatchEvent({type:"pinchend",handedness:e.handedness,target:this})}else if(!l.inputState.pinching&&o<=s-c){l.inputState.pinching=true;this.dispatchEvent({type:"pinchstart",handedness:e.handedness,target:this})}}else if(s!==null&&e.gripSpace){a=t.getPose(e.gripSpace,n);if(a!==null){s.matrix.fromArray(a.transform.matrix);s.matrix.decompose(s.position,s.rotation,s.scale);s.matrixWorldNeedsUpdate=true;if(a.linearVelocity){s.hasLinearVelocity=true;s.linearVelocity.copy(a.linearVelocity)}else s.hasLinearVelocity=false;if(a.angularVelocity){s.hasAngularVelocity=true;s.angularVelocity.copy(a.angularVelocity)}else s.hasAngularVelocity=false}}if(o!==null){r=t.getPose(e.targetRaySpace,n);r===null&&a!==null&&(r=a);if(r!==null){o.matrix.fromArray(r.transform.matrix);o.matrix.decompose(o.position,o.rotation,o.scale);o.matrixWorldNeedsUpdate=true;if(r.linearVelocity){o.hasLinearVelocity=true;o.linearVelocity.copy(r.linearVelocity)}else o.hasLinearVelocity=false;if(r.angularVelocity){o.hasAngularVelocity=true;o.angularVelocity.copy(r.angularVelocity)}else o.hasAngularVelocity=false;this.dispatchEvent(Ho)}}}o!==null&&(o.visible=r!==null);s!==null&&(s.visible=a!==null);l!==null&&(l.visible=i!==null);return this}_getHandJoint(e,t){if(e.joints[t.jointName]===void 0){const n=new Yn;n.matrixAutoUpdate=false;n.visible=false;e.joints[t.jointName]=n;e.add(n)}return e.joints[t.jointName]}}const Wo="\nvoid main() {\n\n\tgl_Position = vec4( position, 1.0 );\n\n}";const ko="\nuniform sampler2DArray depthColor;\nuniform float depthWidth;\nuniform float depthHeight;\n\nvoid main() {\n\n\tvec2 coord = vec2( gl_FragCoord.x / depthWidth, gl_FragCoord.y / depthHeight );\n\n\tif ( coord.x >= 1.0 ) {\n\n\t\tgl_FragDepth = texture( depthColor, vec3( coord.x - 1.0, coord.y, 1 ) ).r;\n\n\t} else {\n\n\t\tgl_FragDepth = texture( depthColor, vec3( coord.x, coord.y, 0 ) ).r;\n\n\t}\n\n}";class WebXRDepthSensing{constructor(){this.texture=null;this.mesh=null;this.depthNear=0;this.depthFar=0}init(e,t,n){if(this.texture===null){const r=new pe;const a=e.properties.get(r);a.__webglTexture=t.texture;if(t.depthNear!==n.depthNear||t.depthFar!==n.depthFar){this.depthNear=t.depthNear;this.depthFar=t.depthFar}this.texture=r}}getMesh(e){if(this.texture!==null&&this.mesh===null){const t=e.cameras[0].viewport;const n=new T({vertexShader:Wo,fragmentShader:ko,uniforms:{depthColor:{value:this.texture},depthWidth:{value:t.z},depthHeight:{value:t.w}}});this.mesh=new E(new C(20,20),n)}return this.mesh}reset(){this.texture=null;this.mesh=null}getDepthTexture(){return this.texture}}class WebXRManager extends qn{constructor(e,t){super();const n=this;let r=null;let a=1;let i=null;let s="local-floor";let c=1;let u=null;let d=null;let f=null;let p=null;let m=null;let h=null;const g=new WebXRDepthSensing;const _=t.getContextAttributes();let v=null;let E=null;const S=[];const T=[];const M=new o;let x=null;const b=new K;b.viewport=new le;const R=new K;R.viewport=new le;const A=[b,R];const C=new Kn;let L=null;let U=null;this.cameraAutoUpdate=true;this.enabled=false;this.isPresenting=false;this.getController=function(e){let t=S[e];if(t===void 0){t=new WebXRController;S[e]=t}return t.getTargetRaySpace()};this.getControllerGrip=function(e){let t=S[e];if(t===void 0){t=new WebXRController;S[e]=t}return t.getGripSpace()};this.getHand=function(e){let t=S[e];if(t===void 0){t=new WebXRController;S[e]=t}return t.getHandSpace()};function onSessionEvent(e){const t=T.indexOf(e.inputSource);if(t===-1)return;const n=S[t];if(n!==void 0){n.update(e.inputSource,e.frame,u||i);n.dispatchEvent({type:e.type,data:e.inputSource})}}function onSessionEnd(){r.removeEventListener("select",onSessionEvent);r.removeEventListener("selectstart",onSessionEvent);r.removeEventListener("selectend",onSessionEvent);r.removeEventListener("squeeze",onSessionEvent);r.removeEventListener("squeezestart",onSessionEvent);r.removeEventListener("squeezeend",onSessionEvent);r.removeEventListener("end",onSessionEnd);r.removeEventListener("inputsourceschange",onInputSourcesChange);for(let e=0;e<S.length;e++){const t=T[e];if(t!==null){T[e]=null;S[e].disconnect(t)}}L=null;U=null;g.reset();e.setRenderTarget(v);m=null;p=null;f=null;r=null;E=null;w.stop();n.isPresenting=false;e.setPixelRatio(x);e.setSize(M.width,M.height,false);n.dispatchEvent({type:"sessionend"})}this.setFramebufferScaleFactor=function(e){a=e;n.isPresenting===true&&console.warn("THREE.WebXRManager: Cannot change framebuffer scale while presenting.")};this.setReferenceSpaceType=function(e){s=e;n.isPresenting===true&&console.warn("THREE.WebXRManager: Cannot change reference space type while presenting.")};this.getReferenceSpace=function(){return u||i};this.setReferenceSpace=function(e){u=e};this.getBaseLayer=function(){return p!==null?p:m};this.getBinding=function(){return f};this.getFrame=function(){return h};this.getSession=function(){return r};this.setSession=async function(o){r=o;if(r!==null){v=e.getRenderTarget();r.addEventListener("select",onSessionEvent);r.addEventListener("selectstart",onSessionEvent);r.addEventListener("selectend",onSessionEvent);r.addEventListener("squeeze",onSessionEvent);r.addEventListener("squeezestart",onSessionEvent);r.addEventListener("squeezeend",onSessionEvent);r.addEventListener("end",onSessionEnd);r.addEventListener("inputsourceschange",onInputSourcesChange);_.xrCompatible!==true&&await t.makeXRCompatible();x=e.getPixelRatio();e.getSize(M);const o=r.enabledFeatures!==void 0&&r.enabledFeatures.includes("layers");if(o){let n=null;let i=null;let o=null;if(_.depth){o=_.stencil?t.DEPTH24_STENCIL8:t.DEPTH_COMPONENT24;n=_.stencil?Yt:Kt;i=_.stencil?Pt:Ut}const s={colorFormat:t.RGBA8,depthFormat:o,scaleFactor:a};f=new XRWebGLBinding(r,t);p=f.createProjectionLayer(s);r.updateRenderState({layers:[p]});e.setPixelRatio(1);e.setSize(p.textureWidth,p.textureHeight,false);E=new ne(p.textureWidth,p.textureHeight,{format:N,type:F,depthTexture:new me(p.textureWidth,p.textureHeight,i,void 0,void 0,void 0,void 0,void 0,void 0,n),stencilBuffer:_.stencil,colorSpace:e.outputColorSpace,samples:_.antialias?4:0,resolveDepthBuffer:p.ignoreDepthValues===false})}else{const n={antialias:_.antialias,alpha:true,depth:_.depth,stencil:_.stencil,framebufferScaleFactor:a};m=new XRWebGLLayer(r,t,n);r.updateRenderState({baseLayer:m});e.setPixelRatio(1);e.setSize(m.framebufferWidth,m.framebufferHeight,false);E=new ne(m.framebufferWidth,m.framebufferHeight,{format:N,type:F,colorSpace:e.outputColorSpace,stencilBuffer:_.stencil})}E.isXRRenderTarget=true;this.setFoveation(c);u=null;i=await r.requestReferenceSpace(s);w.setContext(r);w.start();n.isPresenting=true;n.dispatchEvent({type:"sessionstart"})}};this.getEnvironmentBlendMode=function(){if(r!==null)return r.environmentBlendMode};this.getDepthTexture=function(){return g.getDepthTexture()};function onInputSourcesChange(e){for(let t=0;t<e.removed.length;t++){const n=e.removed[t];const r=T.indexOf(n);if(r>=0){T[r]=null;S[r].disconnect(n)}}for(let t=0;t<e.added.length;t++){const n=e.added[t];let r=T.indexOf(n);if(r===-1){for(let e=0;e<S.length;e++){if(e>=T.length){T.push(n);r=e;break}if(T[e]===null){T[e]=n;r=e;break}}if(r===-1)break}const a=S[r];a&&a.connect(n)}}const P=new l;const y=new l;
/**
		 * Assumes 2 cameras that are parallel and share an X-axis, and that
		 * the cameras' projection and world matrices have already been set.
		 * And that near and far planes are identical for both cameras.
		 * Visualization of this technique: https://computergraphics.stackexchange.com/a/4765
		 *
		 * @param {ArrayCamera} camera - The camera to update.
		 * @param {PerspectiveCamera} cameraL - The left camera.
		 * @param {PerspectiveCamera} cameraR - The right camera.
		 */function setProjectionFromUnion(e,t,n){P.setFromMatrixPosition(t.matrixWorld);y.setFromMatrixPosition(n.matrixWorld);const r=P.distanceTo(y);const a=t.projectionMatrix.elements;const i=n.projectionMatrix.elements;const o=a[14]/(a[10]-1);const s=a[14]/(a[10]+1);const l=(a[9]+1)/a[5];const c=(a[9]-1)/a[5];const u=(a[8]-1)/a[0];const d=(i[8]+1)/i[0];const f=o*u;const p=o*d;const m=r/(-u+d);const h=m*-u;t.matrixWorld.decompose(e.position,e.quaternion,e.scale);e.translateX(h);e.translateZ(m);e.matrixWorld.compose(e.position,e.quaternion,e.scale);e.matrixWorldInverse.copy(e.matrixWorld).invert();if(a[10]===-1){e.projectionMatrix.copy(t.projectionMatrix);e.projectionMatrixInverse.copy(t.projectionMatrixInverse)}else{const t=o+m;const n=s+m;const a=f-h;const i=p+(r-h);const u=l*s/n*t;const d=c*s/n*t;e.projectionMatrix.makePerspective(a,i,u,d,t,n);e.projectionMatrixInverse.copy(e.projectionMatrix).invert()}}function updateCamera(e,t){t===null?e.matrixWorld.copy(e.matrix):e.matrixWorld.multiplyMatrices(t.matrixWorld,e.matrix);e.matrixWorldInverse.copy(e.matrixWorld).invert()}this.updateCamera=function(e){if(r===null)return;let t=e.near;let n=e.far;if(g.texture!==null){g.depthNear>0&&(t=g.depthNear);g.depthFar>0&&(n=g.depthFar)}C.near=R.near=b.near=t;C.far=R.far=b.far=n;if(L!==C.near||U!==C.far){r.updateRenderState({depthNear:C.near,depthFar:C.far});L=C.near;U=C.far}b.layers.mask=e.layers.mask|2;R.layers.mask=e.layers.mask|4;C.layers.mask=b.layers.mask|R.layers.mask;const a=e.parent;const i=C.cameras;updateCamera(C,a);for(let e=0;e<i.length;e++)updateCamera(i[e],a);i.length===2?setProjectionFromUnion(C,b,R):C.projectionMatrix.copy(b.projectionMatrix);updateUserCamera(e,C,a)};function updateUserCamera(e,t,n){if(n===null)e.matrix.copy(t.matrixWorld);else{e.matrix.copy(n.matrixWorld);e.matrix.invert();e.matrix.multiply(t.matrixWorld)}e.matrix.decompose(e.position,e.quaternion,e.scale);e.updateMatrixWorld(true);e.projectionMatrix.copy(t.projectionMatrix);e.projectionMatrixInverse.copy(t.projectionMatrixInverse);if(e.isPerspectiveCamera){e.fov=Zn*2*Math.atan(1/e.projectionMatrix.elements[5]);e.zoom=1}}this.getCamera=function(){return C};this.getFoveation=function(){if(p!==null||m!==null)return c};this.setFoveation=function(e){c=e;p!==null&&(p.fixedFoveation=e);m!==null&&m.fixedFoveation!==void 0&&(m.fixedFoveation=e)};this.hasDepthSensing=function(){return g.texture!==null};this.getDepthSensingMesh=function(){return g.getMesh(C)};let D=null;function onAnimationFrame(t,a){d=a.getViewerPose(u||i);h=a;if(d!==null){const t=d.views;if(m!==null){e.setRenderTargetFramebuffer(E,m.framebuffer);e.setRenderTarget(E)}let n=false;if(t.length!==C.cameras.length){C.cameras.length=0;n=true}for(let r=0;r<t.length;r++){const a=t[r];let i=null;if(m!==null)i=m.getViewport(a);else{const t=f.getViewSubImage(p,a);i=t.viewport;if(r===0){e.setRenderTargetTextures(E,t.colorTexture,p.ignoreDepthValues?void 0:t.depthStencilTexture);e.setRenderTarget(E)}}let o=A[r];if(o===void 0){o=new K;o.layers.enable(r);o.viewport=new le;A[r]=o}o.matrix.fromArray(a.transform.matrix);o.matrix.decompose(o.position,o.quaternion,o.scale);o.projectionMatrix.fromArray(a.projectionMatrix);o.projectionMatrixInverse.copy(o.projectionMatrix).invert();o.viewport.set(i.x,i.y,i.width,i.height);if(r===0){C.matrix.copy(o.matrix);C.matrix.decompose(C.position,C.quaternion,C.scale)}n===true&&C.cameras.push(o)}const a=r.enabledFeatures;if(a&&a.includes("depth-sensing")){const n=f.getDepthInformation(t[0]);n&&n.isValid&&n.texture&&g.init(e,n,r.renderState)}}for(let e=0;e<S.length;e++){const t=T[e];const n=S[e];t!==null&&n!==void 0&&n.update(t,a,u||i)}D&&D(t,a);a.detectedPlanes&&n.dispatchEvent({type:"planesdetected",data:a});h=null}const w=new WebGLAnimation;w.setAnimationLoop(onAnimationFrame);this.setAnimationLoop=function(e){D=e};this.dispose=function(){}}}const zo=new c;const Xo=new f;function WebGLMaterials(e,t){function refreshTransformUniform(e,t){e.matrixAutoUpdate===true&&e.updateMatrix();t.value.copy(e.matrix)}function refreshFogUniforms(t,n){n.color.getRGB(t.fogColor.value,U(e));if(n.isFog){t.fogNear.value=n.near;t.fogFar.value=n.far}else n.isFogExp2&&(t.fogDensity.value=n.density)}function refreshMaterialUniforms(e,t,n,r,a){if(t.isMeshBasicMaterial)refreshUniformsCommon(e,t);else if(t.isMeshLambertMaterial)refreshUniformsCommon(e,t);else if(t.isMeshToonMaterial){refreshUniformsCommon(e,t);refreshUniformsToon(e,t)}else if(t.isMeshPhongMaterial){refreshUniformsCommon(e,t);refreshUniformsPhong(e,t)}else if(t.isMeshStandardMaterial){refreshUniformsCommon(e,t);refreshUniformsStandard(e,t);t.isMeshPhysicalMaterial&&refreshUniformsPhysical(e,t,a)}else if(t.isMeshMatcapMaterial){refreshUniformsCommon(e,t);refreshUniformsMatcap(e,t)}else if(t.isMeshDepthMaterial)refreshUniformsCommon(e,t);else if(t.isMeshDistanceMaterial){refreshUniformsCommon(e,t);refreshUniformsDistance(e,t)}else if(t.isMeshNormalMaterial)refreshUniformsCommon(e,t);else if(t.isLineBasicMaterial){refreshUniformsLine(e,t);t.isLineDashedMaterial&&refreshUniformsDash(e,t)}else if(t.isPointsMaterial)refreshUniformsPoints(e,t,n,r);else if(t.isSpriteMaterial)refreshUniformsSprites(e,t);else if(t.isShadowMaterial){e.color.value.copy(t.color);e.opacity.value=t.opacity}else t.isShaderMaterial&&(t.uniformsNeedUpdate=false)}function refreshUniformsCommon(e,n){e.opacity.value=n.opacity;n.color&&e.diffuse.value.copy(n.color);n.emissive&&e.emissive.value.copy(n.emissive).multiplyScalar(n.emissiveIntensity);if(n.map){e.map.value=n.map;refreshTransformUniform(n.map,e.mapTransform)}if(n.alphaMap){e.alphaMap.value=n.alphaMap;refreshTransformUniform(n.alphaMap,e.alphaMapTransform)}if(n.bumpMap){e.bumpMap.value=n.bumpMap;refreshTransformUniform(n.bumpMap,e.bumpMapTransform);e.bumpScale.value=n.bumpScale;n.side===x&&(e.bumpScale.value*=-1)}if(n.normalMap){e.normalMap.value=n.normalMap;refreshTransformUniform(n.normalMap,e.normalMapTransform);e.normalScale.value.copy(n.normalScale);n.side===x&&e.normalScale.value.negate()}if(n.displacementMap){e.displacementMap.value=n.displacementMap;refreshTransformUniform(n.displacementMap,e.displacementMapTransform);e.displacementScale.value=n.displacementScale;e.displacementBias.value=n.displacementBias}if(n.emissiveMap){e.emissiveMap.value=n.emissiveMap;refreshTransformUniform(n.emissiveMap,e.emissiveMapTransform)}if(n.specularMap){e.specularMap.value=n.specularMap;refreshTransformUniform(n.specularMap,e.specularMapTransform)}n.alphaTest>0&&(e.alphaTest.value=n.alphaTest);const r=t.get(n);const a=r.envMap;const i=r.envMapRotation;if(a){e.envMap.value=a;zo.copy(i);zo.x*=-1;zo.y*=-1;zo.z*=-1;if(a.isCubeTexture&&a.isRenderTargetTexture===false){zo.y*=-1;zo.z*=-1}e.envMapRotation.value.setFromMatrix4(Xo.makeRotationFromEuler(zo));e.flipEnvMap.value=a.isCubeTexture&&a.isRenderTargetTexture===false?-1:1;e.reflectivity.value=n.reflectivity;e.ior.value=n.ior;e.refractionRatio.value=n.refractionRatio}if(n.lightMap){e.lightMap.value=n.lightMap;e.lightMapIntensity.value=n.lightMapIntensity;refreshTransformUniform(n.lightMap,e.lightMapTransform)}if(n.aoMap){e.aoMap.value=n.aoMap;e.aoMapIntensity.value=n.aoMapIntensity;refreshTransformUniform(n.aoMap,e.aoMapTransform)}}function refreshUniformsLine(e,t){e.diffuse.value.copy(t.color);e.opacity.value=t.opacity;if(t.map){e.map.value=t.map;refreshTransformUniform(t.map,e.mapTransform)}}function refreshUniformsDash(e,t){e.dashSize.value=t.dashSize;e.totalSize.value=t.dashSize+t.gapSize;e.scale.value=t.scale}function refreshUniformsPoints(e,t,n,r){e.diffuse.value.copy(t.color);e.opacity.value=t.opacity;e.size.value=t.size*n;e.scale.value=r*.5;if(t.map){e.map.value=t.map;refreshTransformUniform(t.map,e.uvTransform)}if(t.alphaMap){e.alphaMap.value=t.alphaMap;refreshTransformUniform(t.alphaMap,e.alphaMapTransform)}t.alphaTest>0&&(e.alphaTest.value=t.alphaTest)}function refreshUniformsSprites(e,t){e.diffuse.value.copy(t.color);e.opacity.value=t.opacity;e.rotation.value=t.rotation;if(t.map){e.map.value=t.map;refreshTransformUniform(t.map,e.mapTransform)}if(t.alphaMap){e.alphaMap.value=t.alphaMap;refreshTransformUniform(t.alphaMap,e.alphaMapTransform)}t.alphaTest>0&&(e.alphaTest.value=t.alphaTest)}function refreshUniformsPhong(e,t){e.specular.value.copy(t.specular);e.shininess.value=Math.max(t.shininess,1e-4)}function refreshUniformsToon(e,t){t.gradientMap&&(e.gradientMap.value=t.gradientMap)}function refreshUniformsStandard(e,t){e.metalness.value=t.metalness;if(t.metalnessMap){e.metalnessMap.value=t.metalnessMap;refreshTransformUniform(t.metalnessMap,e.metalnessMapTransform)}e.roughness.value=t.roughness;if(t.roughnessMap){e.roughnessMap.value=t.roughnessMap;refreshTransformUniform(t.roughnessMap,e.roughnessMapTransform)}t.envMap&&(e.envMapIntensity.value=t.envMapIntensity)}function refreshUniformsPhysical(e,t,n){e.ior.value=t.ior;if(t.sheen>0){e.sheenColor.value.copy(t.sheenColor).multiplyScalar(t.sheen);e.sheenRoughness.value=t.sheenRoughness;if(t.sheenColorMap){e.sheenColorMap.value=t.sheenColorMap;refreshTransformUniform(t.sheenColorMap,e.sheenColorMapTransform)}if(t.sheenRoughnessMap){e.sheenRoughnessMap.value=t.sheenRoughnessMap;refreshTransformUniform(t.sheenRoughnessMap,e.sheenRoughnessMapTransform)}}if(t.clearcoat>0){e.clearcoat.value=t.clearcoat;e.clearcoatRoughness.value=t.clearcoatRoughness;if(t.clearcoatMap){e.clearcoatMap.value=t.clearcoatMap;refreshTransformUniform(t.clearcoatMap,e.clearcoatMapTransform)}if(t.clearcoatRoughnessMap){e.clearcoatRoughnessMap.value=t.clearcoatRoughnessMap;refreshTransformUniform(t.clearcoatRoughnessMap,e.clearcoatRoughnessMapTransform)}if(t.clearcoatNormalMap){e.clearcoatNormalMap.value=t.clearcoatNormalMap;refreshTransformUniform(t.clearcoatNormalMap,e.clearcoatNormalMapTransform);e.clearcoatNormalScale.value.copy(t.clearcoatNormalScale);t.side===x&&e.clearcoatNormalScale.value.negate()}}t.dispersion>0&&(e.dispersion.value=t.dispersion);if(t.iridescence>0){e.iridescence.value=t.iridescence;e.iridescenceIOR.value=t.iridescenceIOR;e.iridescenceThicknessMinimum.value=t.iridescenceThicknessRange[0];e.iridescenceThicknessMaximum.value=t.iridescenceThicknessRange[1];if(t.iridescenceMap){e.iridescenceMap.value=t.iridescenceMap;refreshTransformUniform(t.iridescenceMap,e.iridescenceMapTransform)}if(t.iridescenceThicknessMap){e.iridescenceThicknessMap.value=t.iridescenceThicknessMap;refreshTransformUniform(t.iridescenceThicknessMap,e.iridescenceThicknessMapTransform)}}if(t.transmission>0){e.transmission.value=t.transmission;e.transmissionSamplerMap.value=n.texture;e.transmissionSamplerSize.value.set(n.width,n.height);if(t.transmissionMap){e.transmissionMap.value=t.transmissionMap;refreshTransformUniform(t.transmissionMap,e.transmissionMapTransform)}e.thickness.value=t.thickness;if(t.thicknessMap){e.thicknessMap.value=t.thicknessMap;refreshTransformUniform(t.thicknessMap,e.thicknessMapTransform)}e.attenuationDistance.value=t.attenuationDistance;e.attenuationColor.value.copy(t.attenuationColor)}if(t.anisotropy>0){e.anisotropyVector.value.set(t.anisotropy*Math.cos(t.anisotropyRotation),t.anisotropy*Math.sin(t.anisotropyRotation));if(t.anisotropyMap){e.anisotropyMap.value=t.anisotropyMap;refreshTransformUniform(t.anisotropyMap,e.anisotropyMapTransform)}}e.specularIntensity.value=t.specularIntensity;e.specularColor.value.copy(t.specularColor);if(t.specularColorMap){e.specularColorMap.value=t.specularColorMap;refreshTransformUniform(t.specularColorMap,e.specularColorMapTransform)}if(t.specularIntensityMap){e.specularIntensityMap.value=t.specularIntensityMap;refreshTransformUniform(t.specularIntensityMap,e.specularIntensityMapTransform)}}function refreshUniformsMatcap(e,t){t.matcap&&(e.matcap.value=t.matcap)}function refreshUniformsDistance(e,n){const r=t.get(n).light;e.referencePosition.value.setFromMatrixPosition(r.matrixWorld);e.nearDistance.value=r.shadow.camera.near;e.farDistance.value=r.shadow.camera.far}return{refreshFogUniforms:refreshFogUniforms,refreshMaterialUniforms:refreshMaterialUniforms}}function WebGLUniformsGroups(e,t,n,r){let a={};let i={};let o=[];const s=e.getParameter(e.MAX_UNIFORM_BUFFER_BINDINGS);function bind(e,t){const n=t.program;r.uniformBlockBinding(e,n)}function update(e,n){let o=a[e.id];if(o===void 0){prepareUniformsGroup(e);o=createBuffer(e);a[e.id]=o;e.addEventListener("dispose",onUniformsGroupsDispose)}const s=n.program;r.updateUBOMapping(e,s);const l=t.render.frame;if(i[e.id]!==l){updateBufferData(e);i[e.id]=l}}function createBuffer(t){const n=allocateBindingPointIndex();t.__bindingPointIndex=n;const r=e.createBuffer();const a=t.__size;const i=t.usage;e.bindBuffer(e.UNIFORM_BUFFER,r);e.bufferData(e.UNIFORM_BUFFER,a,i);e.bindBuffer(e.UNIFORM_BUFFER,null);e.bindBufferBase(e.UNIFORM_BUFFER,n,r);return r}function allocateBindingPointIndex(){for(let e=0;e<s;e++)if(o.indexOf(e)===-1){o.push(e);return e}console.error("THREE.WebGLRenderer: Maximum number of simultaneously usable uniforms groups reached.");return 0}function updateBufferData(t){const n=a[t.id];const r=t.uniforms;const i=t.__cache;e.bindBuffer(e.UNIFORM_BUFFER,n);for(let t=0,n=r.length;t<n;t++){const n=Array.isArray(r[t])?r[t]:[r[t]];for(let r=0,a=n.length;r<a;r++){const a=n[r];if(hasUniformChanged(a,t,r,i)===true){const t=a.__offset;const n=Array.isArray(a.value)?a.value:[a.value];let r=0;for(let i=0;i<n.length;i++){const o=n[i];const s=getUniformSize(o);if(typeof o==="number"||typeof o==="boolean"){a.__data[0]=o;e.bufferSubData(e.UNIFORM_BUFFER,t+r,a.__data)}else if(o.isMatrix3){a.__data[0]=o.elements[0];a.__data[1]=o.elements[1];a.__data[2]=o.elements[2];a.__data[3]=0;a.__data[4]=o.elements[3];a.__data[5]=o.elements[4];a.__data[6]=o.elements[5];a.__data[7]=0;a.__data[8]=o.elements[6];a.__data[9]=o.elements[7];a.__data[10]=o.elements[8];a.__data[11]=0}else{o.toArray(a.__data,r);r+=s.storage/Float32Array.BYTES_PER_ELEMENT}}e.bufferSubData(e.UNIFORM_BUFFER,t,a.__data)}}}e.bindBuffer(e.UNIFORM_BUFFER,null)}function hasUniformChanged(e,t,n,r){const a=e.value;const i=t+"_"+n;if(r[i]===void 0){r[i]=typeof a==="number"||typeof a==="boolean"?a:a.clone();return true}{const e=r[i];if(typeof a==="number"||typeof a==="boolean"){if(e!==a){r[i]=a;return true}}else if(e.equals(a)===false){e.copy(a);return true}}return false}function prepareUniformsGroup(e){const t=e.uniforms;let n=0;const r=16;for(let e=0,a=t.length;e<a;e++){const a=Array.isArray(t[e])?t[e]:[t[e]];for(let e=0,t=a.length;e<t;e++){const t=a[e];const i=Array.isArray(t.value)?t.value:[t.value];for(let e=0,a=i.length;e<a;e++){const a=i[e];const o=getUniformSize(a);const s=n%r;const l=s%o.boundary;const c=s+l;n+=l;c!==0&&r-c<o.storage&&(n+=r-c);t.__data=new Float32Array(o.storage/Float32Array.BYTES_PER_ELEMENT);t.__offset=n;n+=o.storage}}}const a=n%r;a>0&&(n+=r-a);e.__size=n;e.__cache={};return this}function getUniformSize(e){const t={boundary:0,storage:0};if(typeof e==="number"||typeof e==="boolean"){t.boundary=4;t.storage=4}else if(e.isVector2){t.boundary=8;t.storage=8}else if(e.isVector3||e.isColor){t.boundary=16;t.storage=12}else if(e.isVector4){t.boundary=16;t.storage=16}else if(e.isMatrix3){t.boundary=48;t.storage=48}else if(e.isMatrix4){t.boundary=64;t.storage=64}else e.isTexture?console.warn("THREE.WebGLRenderer: Texture samplers can not be part of an uniforms group."):console.warn("THREE.WebGLRenderer: Unsupported uniform value type.",e);return t}function onUniformsGroupsDispose(t){const n=t.target;n.removeEventListener("dispose",onUniformsGroupsDispose);const r=o.indexOf(n.__bindingPointIndex);o.splice(r,1);e.deleteBuffer(a[n.id]);delete a[n.id];delete i[n.id]}function dispose(){for(const t in a)e.deleteBuffer(a[t]);o=[];a={};i={}}return{bind:bind,update:update,dispose:dispose}}class WebGLRenderer{constructor(e={}){const{canvas:t=$n(),context:n=null,depth:r=true,stencil:i=false,alpha:o=false,antialias:s=false,premultipliedAlpha:c=true,preserveDrawingBuffer:u=false,powerPreference:d="default",failIfMajorPerformanceCaveat:p=false,reverseDepthBuffer:m=false}=e;this.isWebGLRenderer=true;let h;if(n!==null){if(typeof WebGLRenderingContext!=="undefined"&&n instanceof WebGLRenderingContext)throw new Error("THREE.WebGLRenderer: WebGL 1 is not supported since r163.");h=n.getContextAttributes().alpha}else h=o;const g=new Uint32Array(4);const _=new Int32Array(4);let v=null;let E=null;const S=[];const T=[];this.domElement=t;this.debug={
/**
			 * Enables error checking and reporting when shader programs are being compiled
			 * @type {boolean}
			 */
checkShaderErrors:true,
/**
			 * Callback for custom error reporting.
			 * @type {?Function}
			 */
onShaderError:null};this.autoClear=true;this.autoClearColor=true;this.autoClearDepth=true;this.autoClearStencil=true;this.sortObjects=true;this.clippingPlanes=[];this.localClippingEnabled=false;this._outputColorSpace=Qn;this.toneMapping=Z;this.toneMappingExposure=1;const M=this;let R=false;let A=0;let C=0;let U=null;let P=-1;let y=null;const D=new le;const w=new le;let I=null;const N=new a(0);let B=0;let G=t.width;let V=t.height;let H=1;let W=null;let k=null;const z=new le(0,0,G,V);const X=new le(0,0,G,V);let j=false;const Y=new Ge;let K=false;let $=false;this.transmissionResolutionScale=1;const Q=new f;const J=new f;const ee=new l;const te=new le;const re={background:null,fog:null,environment:null,overrideMaterial:null,isScene:true};let ie=false;function getTargetPixelRatio(){return U===null?H:1}let oe=n;function getContext(e,n){return t.getContext(e,n)}try{const e={alpha:true,depth:r,stencil:i,antialias:s,premultipliedAlpha:c,preserveDrawingBuffer:u,powerPreference:d,failIfMajorPerformanceCaveat:p};"setAttribute"in t&&t.setAttribute("data-engine",`three.js r${Jn}`);t.addEventListener("webglcontextlost",onContextLost,false);t.addEventListener("webglcontextrestored",onContextRestore,false);t.addEventListener("webglcontextcreationerror",onContextCreationError,false);if(oe===null){const t="webgl2";oe=getContext(t,e);if(oe===null)throw getContext(t)?new Error("Error creating WebGL context with your selected attributes."):new Error("Error creating WebGL context.")}}catch(e){console.error("THREE.WebGLRenderer: "+e.message);throw e}let se,ce,ue,de;let fe,pe,me,he,ge,_e,ve;let Ee,Se,Te,Me,xe,be;let Re,Ae,Ce,Le;let Ue,Pe,ye;function initGLContext(){se=new WebGLExtensions(oe);se.init();Ue=new WebGLUtils(oe,se);ce=new WebGLCapabilities(oe,se,e,Ue);ue=new WebGLState(oe,se);ce.reverseDepthBuffer&&m&&ue.buffers.depth.setReversed(true);de=new WebGLInfo(oe);fe=new WebGLProperties;pe=new WebGLTextures(oe,se,ue,fe,ce,Ue,de);me=new WebGLCubeMaps(M);he=new WebGLCubeUVMaps(M);ge=new WebGLAttributes(oe);Pe=new WebGLBindingStates(oe,ge);_e=new WebGLGeometries(oe,ge,de,Pe);ve=new WebGLObjects(oe,_e,ge,de);Ae=new WebGLMorphtargets(oe,ce,pe);xe=new WebGLClipping(fe);Ee=new WebGLPrograms(M,me,he,se,ce,Pe,xe);Se=new WebGLMaterials(M,fe);Te=new WebGLRenderLists;Me=new WebGLRenderStates(se);Re=new WebGLBackground(M,me,he,ue,ve,h,c);be=new WebGLShadowMap(M,ve,ce);ye=new WebGLUniformsGroups(oe,de,ce,ue);Ce=new WebGLBufferRenderer(oe,se,de);Le=new WebGLIndexedBufferRenderer(oe,se,de);de.programs=Ee.programs;M.capabilities=ce;M.extensions=se;M.properties=fe;M.renderLists=Te;M.shadowMap=be;M.state=ue;M.info=de}initGLContext();const De=new WebXRManager(M,oe);this.xr=De;this.getContext=function(){return oe};this.getContextAttributes=function(){return oe.getContextAttributes()};this.forceContextLoss=function(){const e=se.get("WEBGL_lose_context");e&&e.loseContext()};this.forceContextRestore=function(){const e=se.get("WEBGL_lose_context");e&&e.restoreContext()};this.getPixelRatio=function(){return H};this.setPixelRatio=function(e){if(e!==void 0){H=e;this.setSize(G,V,false)}};this.getSize=function(e){return e.set(G,V)};this.setSize=function(e,n,r=true){if(De.isPresenting)console.warn("THREE.WebGLRenderer: Can't change size while VR device is presenting.");else{G=e;V=n;t.width=Math.floor(e*H);t.height=Math.floor(n*H);if(r===true){t.style.width=e+"px";t.style.height=n+"px"}this.setViewport(0,0,e,n)}};this.getDrawingBufferSize=function(e){return e.set(G*H,V*H).floor()};this.setDrawingBufferSize=function(e,n,r){G=e;V=n;H=r;t.width=Math.floor(e*r);t.height=Math.floor(n*r);this.setViewport(0,0,e,n)};this.getCurrentViewport=function(e){return e.copy(D)};this.getViewport=function(e){return e.copy(z)};this.setViewport=function(e,t,n,r){e.isVector4?z.set(e.x,e.y,e.z,e.w):z.set(e,t,n,r);ue.viewport(D.copy(z).multiplyScalar(H).round())};this.getScissor=function(e){return e.copy(X)};this.setScissor=function(e,t,n,r){e.isVector4?X.set(e.x,e.y,e.z,e.w):X.set(e,t,n,r);ue.scissor(w.copy(X).multiplyScalar(H).round())};this.getScissorTest=function(){return j};this.setScissorTest=function(e){ue.setScissorTest(j=e)};this.setOpaqueSort=function(e){W=e};this.setTransparentSort=function(e){k=e};this.getClearColor=function(e){return e.copy(Re.getClearColor())};this.setClearColor=function(){Re.setClearColor.apply(Re,arguments)};this.getClearAlpha=function(){return Re.getClearAlpha()};this.setClearAlpha=function(){Re.setClearAlpha.apply(Re,arguments)};this.clear=function(e=true,t=true,n=true){let r=0;if(e){let e=false;if(U!==null){const t=U.texture.format;e=t===mn||t===pn||t===ln}if(e){const e=U.texture.type;const t=e===F||e===Ut||e===yt||e===Pt||e===Zt||e===$t;const n=Re.getClearColor();const r=Re.getClearAlpha();const a=n.r;const i=n.g;const o=n.b;if(t){g[0]=a;g[1]=i;g[2]=o;g[3]=r;oe.clearBufferuiv(oe.COLOR,0,g)}else{_[0]=a;_[1]=i;_[2]=o;_[3]=r;oe.clearBufferiv(oe.COLOR,0,_)}}else r|=oe.COLOR_BUFFER_BIT}t&&(r|=oe.DEPTH_BUFFER_BIT);if(n){r|=oe.STENCIL_BUFFER_BIT;this.state.buffers.stencil.setMask(4294967295)}oe.clear(r)};this.clearColor=function(){this.clear(true,false,false)};this.clearDepth=function(){this.clear(false,true,false)};this.clearStencil=function(){this.clear(false,false,true)};this.dispose=function(){t.removeEventListener("webglcontextlost",onContextLost,false);t.removeEventListener("webglcontextrestored",onContextRestore,false);t.removeEventListener("webglcontextcreationerror",onContextCreationError,false);Re.dispose();Te.dispose();Me.dispose();fe.dispose();me.dispose();he.dispose();ve.dispose();Pe.dispose();ye.dispose();Ee.dispose();De.dispose();De.removeEventListener("sessionstart",onXRSessionStart);De.removeEventListener("sessionend",onXRSessionEnd);Ie.stop()};function onContextLost(e){e.preventDefault();console.log("THREE.WebGLRenderer: Context Lost.");R=true}function onContextRestore(){console.log("THREE.WebGLRenderer: Context Restored.");R=false;const e=de.autoReset;const t=be.enabled;const n=be.autoUpdate;const r=be.needsUpdate;const a=be.type;initGLContext();de.autoReset=e;be.enabled=t;be.autoUpdate=n;be.needsUpdate=r;be.type=a}function onContextCreationError(e){console.error("THREE.WebGLRenderer: A WebGL context could not be created. Reason: ",e.statusMessage)}function onMaterialDispose(e){const t=e.target;t.removeEventListener("dispose",onMaterialDispose);deallocateMaterial(t)}function deallocateMaterial(e){releaseMaterialProgramReferences(e);fe.remove(e)}function releaseMaterialProgramReferences(e){const t=fe.get(e).programs;if(t!==void 0){t.forEach((function(e){Ee.releaseProgram(e)}));e.isShaderMaterial&&Ee.releaseShaderCache(e)}}this.renderBufferDirect=function(e,t,n,r,a,i){t===null&&(t=re);const o=a.isMesh&&a.matrixWorld.determinant()<0;const s=setProgram(e,t,n,r,a);ue.setMaterial(r,o);let l=n.index;let c=1;if(r.wireframe===true){l=_e.getWireframeAttribute(n);if(l===void 0)return;c=2}const u=n.drawRange;const d=n.attributes.position;let f=u.start*c;let p=(u.start+u.count)*c;if(i!==null){f=Math.max(f,i.start*c);p=Math.min(p,(i.start+i.count)*c)}if(l!==null){f=Math.max(f,0);p=Math.min(p,l.count)}else if(d!==void 0&&d!==null){f=Math.max(f,0);p=Math.min(p,d.count)}const m=p-f;if(m<0||m===Infinity)return;Pe.setup(a,r,s,n,l);let h;let g=Ce;if(l!==null){h=ge.get(l);g=Le;g.setIndex(h)}if(a.isMesh)if(r.wireframe===true){ue.setLineWidth(r.wireframeLinewidth*getTargetPixelRatio());g.setMode(oe.LINES)}else g.setMode(oe.TRIANGLES);else if(a.isLine){let e=r.linewidth;e===void 0&&(e=1);ue.setLineWidth(e*getTargetPixelRatio());a.isLineSegments?g.setMode(oe.LINES):a.isLineLoop?g.setMode(oe.LINE_LOOP):g.setMode(oe.LINE_STRIP)}else a.isPoints?g.setMode(oe.POINTS):a.isSprite&&g.setMode(oe.TRIANGLES);if(a.isBatchedMesh)if(a._multiDrawInstances!==null)g.renderMultiDrawInstances(a._multiDrawStarts,a._multiDrawCounts,a._multiDrawCount,a._multiDrawInstances);else if(se.get("WEBGL_multi_draw"))g.renderMultiDraw(a._multiDrawStarts,a._multiDrawCounts,a._multiDrawCount);else{const e=a._multiDrawStarts;const t=a._multiDrawCounts;const n=a._multiDrawCount;const i=l?ge.get(l).bytesPerElement:1;const o=fe.get(r).currentProgram.getUniforms();for(let r=0;r<n;r++){o.setValue(oe,"_gl_DrawID",r);g.render(e[r]/i,t[r])}}else if(a.isInstancedMesh)g.renderInstances(f,m,a.count);else if(n.isInstancedBufferGeometry){const e=n._maxInstanceCount!==void 0?n._maxInstanceCount:Infinity;const t=Math.min(n.instanceCount,e);g.renderInstances(f,m,t)}else g.render(f,m)};function prepareMaterial(e,t,n){if(e.transparent===true&&e.side===Fe&&e.forceSinglePass===false){e.side=x;e.needsUpdate=true;getProgram(e,t,n);e.side=L;e.needsUpdate=true;getProgram(e,t,n);e.side=Fe}else getProgram(e,t,n)}this.compile=function(e,t,n=null){n===null&&(n=e);E=Me.get(n);E.init(t);T.push(E);n.traverseVisible((function(e){if(e.isLight&&e.layers.test(t.layers)){E.pushLight(e);e.castShadow&&E.pushShadow(e)}}));e!==n&&e.traverseVisible((function(e){if(e.isLight&&e.layers.test(t.layers)){E.pushLight(e);e.castShadow&&E.pushShadow(e)}}));E.setupLights();const r=new Set;e.traverse((function(e){if(!(e.isMesh||e.isPoints||e.isLine||e.isSprite))return;const t=e.material;if(t)if(Array.isArray(t))for(let a=0;a<t.length;a++){const i=t[a];prepareMaterial(i,n,e);r.add(i)}else{prepareMaterial(t,n,e);r.add(t)}}));T.pop();E=null;return r};this.compileAsync=function(e,t,n=null){const r=this.compile(e,t,n);return new Promise((t=>{function checkMaterialsReady(){r.forEach((function(e){const t=fe.get(e);const n=t.currentProgram;n.isReady()&&r.delete(e)}));r.size!==0?setTimeout(checkMaterialsReady,10):t(e)}se.get("KHR_parallel_shader_compile")!==null?checkMaterialsReady():setTimeout(checkMaterialsReady,10)}))};let we=null;function onAnimationFrame(e){we&&we(e)}function onXRSessionStart(){Ie.stop()}function onXRSessionEnd(){Ie.start()}const Ie=new WebGLAnimation;Ie.setAnimationLoop(onAnimationFrame);typeof self!=="undefined"&&Ie.setContext(self);this.setAnimationLoop=function(e){we=e;De.setAnimationLoop(e);e===null?Ie.stop():Ie.start()};De.addEventListener("sessionstart",onXRSessionStart);De.addEventListener("sessionend",onXRSessionEnd);this.render=function(e,t){if(t!==void 0&&t.isCamera!==true){console.error("THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.");return}if(R===true)return;e.matrixWorldAutoUpdate===true&&e.updateMatrixWorld();t.parent===null&&t.matrixWorldAutoUpdate===true&&t.updateMatrixWorld();if(De.enabled===true&&De.isPresenting===true){De.cameraAutoUpdate===true&&De.updateCamera(t);t=De.getCamera()}e.isScene===true&&e.onBeforeRender(M,e,t,U);E=Me.get(e,T.length);E.init(t);T.push(E);J.multiplyMatrices(t.projectionMatrix,t.matrixWorldInverse);Y.setFromProjectionMatrix(J);$=this.localClippingEnabled;K=xe.init(this.clippingPlanes,$);v=Te.get(e,S.length);v.init();S.push(v);if(De.enabled===true&&De.isPresenting===true){const e=M.xr.getDepthSensingMesh();e!==null&&projectObject(e,t,-Infinity,M.sortObjects)}projectObject(e,t,0,M.sortObjects);v.finish();M.sortObjects===true&&v.sort(W,k);ie=De.enabled===false||De.isPresenting===false||De.hasDepthSensing()===false;ie&&Re.addToRenderList(v,e);this.info.render.frame++;K===true&&xe.beginShadows();const n=E.state.shadowsArray;be.render(n,e,t);K===true&&xe.endShadows();this.info.autoReset===true&&this.info.reset();const r=v.opaque;const a=v.transmissive;E.setupLights();if(t.isArrayCamera){const n=t.cameras;if(a.length>0)for(let t=0,i=n.length;t<i;t++){const i=n[t];renderTransmissionPass(r,a,e,i)}ie&&Re.render(e);for(let t=0,r=n.length;t<r;t++){const r=n[t];renderScene(v,e,r,r.viewport)}}else{a.length>0&&renderTransmissionPass(r,a,e,t);ie&&Re.render(e);renderScene(v,e,t)}if(U!==null&&C===0){pe.updateMultisampleRenderTarget(U);pe.updateRenderTargetMipmap(U)}e.isScene===true&&e.onAfterRender(M,e,t);Pe.resetDefaultState();P=-1;y=null;T.pop();if(T.length>0){E=T[T.length-1];K===true&&xe.setGlobalState(M.clippingPlanes,E.state.camera)}else E=null;S.pop();v=S.length>0?S[S.length-1]:null};function projectObject(e,t,n,r){if(e.visible===false)return;const a=e.layers.test(t.layers);if(a)if(e.isGroup)n=e.renderOrder;else if(e.isLOD)e.autoUpdate===true&&e.update(t);else if(e.isLight){E.pushLight(e);e.castShadow&&E.pushShadow(e)}else if(e.isSprite){if(!e.frustumCulled||Y.intersectsSprite(e)){r&&te.setFromMatrixPosition(e.matrixWorld).applyMatrix4(J);const t=ve.update(e);const a=e.material;a.visible&&v.push(e,t,a,n,te.z,null)}}else if((e.isMesh||e.isLine||e.isPoints)&&(!e.frustumCulled||Y.intersectsObject(e))){const t=ve.update(e);const a=e.material;if(r){if(e.boundingSphere!==void 0){e.boundingSphere===null&&e.computeBoundingSphere();te.copy(e.boundingSphere.center)}else{t.boundingSphere===null&&t.computeBoundingSphere();te.copy(t.boundingSphere.center)}te.applyMatrix4(e.matrixWorld).applyMatrix4(J)}if(Array.isArray(a)){const r=t.groups;for(let i=0,o=r.length;i<o;i++){const o=r[i];const s=a[o.materialIndex];s&&s.visible&&v.push(e,t,s,n,te.z,o)}}else a.visible&&v.push(e,t,a,n,te.z,null)}const i=e.children;for(let e=0,a=i.length;e<a;e++)projectObject(i[e],t,n,r)}function renderScene(e,t,n,r){const a=e.opaque;const i=e.transmissive;const o=e.transparent;E.setupLightsView(n);K===true&&xe.setGlobalState(M.clippingPlanes,n);r&&ue.viewport(D.copy(r));a.length>0&&renderObjects(a,t,n);i.length>0&&renderObjects(i,t,n);o.length>0&&renderObjects(o,t,n);ue.buffers.depth.setTest(true);ue.buffers.depth.setMask(true);ue.buffers.color.setMask(true);ue.setPolygonOffset(false)}function renderTransmissionPass(e,t,n,r){const a=n.isScene===true?n.overrideMaterial:null;if(a!==null)return;E.state.transmissionRenderTarget[r.id]===void 0&&(E.state.transmissionRenderTarget[r.id]=new ne(1,1,{generateMipmaps:true,type:se.has("EXT_color_buffer_half_float")||se.has("EXT_color_buffer_float")?O:F,minFilter:Bt,samples:4,stencilBuffer:i,resolveDepthBuffer:false,resolveStencilBuffer:false,colorSpace:b.workingColorSpace}));const o=E.state.transmissionRenderTarget[r.id];const s=r.viewport||D;o.setSize(s.z*M.transmissionResolutionScale,s.w*M.transmissionResolutionScale);const l=M.getRenderTarget();M.setRenderTarget(o);M.getClearColor(N);B=M.getClearAlpha();B<1&&M.setClearColor(16777215,.5);M.clear();ie&&Re.render(n);const c=M.toneMapping;M.toneMapping=Z;const u=r.viewport;r.viewport!==void 0&&(r.viewport=void 0);E.setupLightsView(r);K===true&&xe.setGlobalState(M.clippingPlanes,r);renderObjects(e,n,r);pe.updateMultisampleRenderTarget(o);pe.updateRenderTargetMipmap(o);if(se.has("WEBGL_multisampled_render_to_texture")===false){let e=false;for(let a=0,i=t.length;a<i;a++){const i=t[a];const o=i.object;const s=i.geometry;const l=i.material;const c=i.group;if(l.side===Fe&&o.layers.test(r.layers)){const t=l.side;l.side=x;l.needsUpdate=true;renderObject(o,n,r,s,l,c);l.side=t;l.needsUpdate=true;e=true}}if(e===true){pe.updateMultisampleRenderTarget(o);pe.updateRenderTargetMipmap(o)}}M.setRenderTarget(l);M.setClearColor(N,B);u!==void 0&&(r.viewport=u);M.toneMapping=c}function renderObjects(e,t,n){const r=t.isScene===true?t.overrideMaterial:null;for(let a=0,i=e.length;a<i;a++){const i=e[a];const o=i.object;const s=i.geometry;const l=r===null?i.material:r;const c=i.group;o.layers.test(n.layers)&&renderObject(o,t,n,s,l,c)}}function renderObject(e,t,n,r,a,i){e.onBeforeRender(M,t,n,r,a,i);e.modelViewMatrix.multiplyMatrices(n.matrixWorldInverse,e.matrixWorld);e.normalMatrix.getNormalMatrix(e.modelViewMatrix);a.onBeforeRender(M,t,n,r,e,i);if(a.transparent===true&&a.side===Fe&&a.forceSinglePass===false){a.side=x;a.needsUpdate=true;M.renderBufferDirect(n,t,r,a,e,i);a.side=L;a.needsUpdate=true;M.renderBufferDirect(n,t,r,a,e,i);a.side=Fe}else M.renderBufferDirect(n,t,r,a,e,i);e.onAfterRender(M,t,n,r,a,i)}function getProgram(e,t,n){t.isScene!==true&&(t=re);const r=fe.get(e);const a=E.state.lights;const i=E.state.shadowsArray;const o=a.state.version;const s=Ee.getParameters(e,a.state,i,t,n);const l=Ee.getProgramCacheKey(s);let c=r.programs;r.environment=e.isMeshStandardMaterial?t.environment:null;r.fog=t.fog;r.envMap=(e.isMeshStandardMaterial?he:me).get(e.envMap||r.environment);r.envMapRotation=r.environment!==null&&e.envMap===null?t.environmentRotation:e.envMapRotation;if(c===void 0){e.addEventListener("dispose",onMaterialDispose);c=new Map;r.programs=c}let u=c.get(l);if(u!==void 0){if(r.currentProgram===u&&r.lightsStateVersion===o){updateCommonMaterialProperties(e,s);return u}}else{s.uniforms=Ee.getUniforms(e);e.onBeforeCompile(s,M);u=Ee.acquireProgram(s,l);c.set(l,u);r.uniforms=s.uniforms}const d=r.uniforms;(e.isShaderMaterial||e.isRawShaderMaterial)&&e.clipping!==true||(d.clippingPlanes=xe.uniform);updateCommonMaterialProperties(e,s);r.needsLights=materialNeedsLights(e);r.lightsStateVersion=o;if(r.needsLights){d.ambientLightColor.value=a.state.ambient;d.lightProbe.value=a.state.probe;d.directionalLights.value=a.state.directional;d.directionalLightShadows.value=a.state.directionalShadow;d.spotLights.value=a.state.spot;d.spotLightShadows.value=a.state.spotShadow;d.rectAreaLights.value=a.state.rectArea;d.ltc_1.value=a.state.rectAreaLTC1;d.ltc_2.value=a.state.rectAreaLTC2;d.pointLights.value=a.state.point;d.pointLightShadows.value=a.state.pointShadow;d.hemisphereLights.value=a.state.hemi;d.directionalShadowMap.value=a.state.directionalShadowMap;d.directionalShadowMatrix.value=a.state.directionalShadowMatrix;d.spotShadowMap.value=a.state.spotShadowMap;d.spotLightMatrix.value=a.state.spotLightMatrix;d.spotLightMap.value=a.state.spotLightMap;d.pointShadowMap.value=a.state.pointShadowMap;d.pointShadowMatrix.value=a.state.pointShadowMatrix}r.currentProgram=u;r.uniformsList=null;return u}function getUniformList(e){if(e.uniformsList===null){const t=e.currentProgram.getUniforms();e.uniformsList=WebGLUniforms.seqWithValue(t.seq,e.uniforms)}return e.uniformsList}function updateCommonMaterialProperties(e,t){const n=fe.get(e);n.outputColorSpace=t.outputColorSpace;n.batching=t.batching;n.batchingColor=t.batchingColor;n.instancing=t.instancing;n.instancingColor=t.instancingColor;n.instancingMorph=t.instancingMorph;n.skinning=t.skinning;n.morphTargets=t.morphTargets;n.morphNormals=t.morphNormals;n.morphColors=t.morphColors;n.morphTargetsCount=t.morphTargetsCount;n.numClippingPlanes=t.numClippingPlanes;n.numIntersection=t.numClipIntersection;n.vertexAlphas=t.vertexAlphas;n.vertexTangents=t.vertexTangents;n.toneMapping=t.toneMapping}function setProgram(e,t,n,r,a){t.isScene!==true&&(t=re);pe.resetTextureUnits();const i=t.fog;const o=r.isMeshStandardMaterial?t.environment:null;const s=U===null?M.outputColorSpace:U.isXRRenderTarget===true?U.texture.colorSpace:q;const l=(r.isMeshStandardMaterial?he:me).get(r.envMap||o);const c=r.vertexColors===true&&!!n.attributes.color&&n.attributes.color.itemSize===4;const u=!!n.attributes.tangent&&(!!r.normalMap||r.anisotropy>0);const d=!!n.morphAttributes.position;const f=!!n.morphAttributes.normal;const p=!!n.morphAttributes.color;let m=Z;r.toneMapped&&(U!==null&&U.isXRRenderTarget!==true||(m=M.toneMapping));const h=n.morphAttributes.position||n.morphAttributes.normal||n.morphAttributes.color;const g=h!==void 0?h.length:0;const _=fe.get(r);const v=E.state.lights;if(K===true&&($===true||e!==y)){const t=e===y&&r.id===P;xe.setState(r,e,t)}let S=false;if(r.version===_.__version)_.needsLights&&_.lightsStateVersion!==v.state.version||_.outputColorSpace!==s||a.isBatchedMesh&&_.batching===false?S=true:a.isBatchedMesh||_.batching!==true?a.isBatchedMesh&&_.batchingColor===true&&a.colorTexture===null||a.isBatchedMesh&&_.batchingColor===false&&a.colorTexture!==null||a.isInstancedMesh&&_.instancing===false?S=true:a.isInstancedMesh||_.instancing!==true?a.isSkinnedMesh&&_.skinning===false?S=true:a.isSkinnedMesh||_.skinning!==true?a.isInstancedMesh&&_.instancingColor===true&&a.instanceColor===null||a.isInstancedMesh&&_.instancingColor===false&&a.instanceColor!==null||a.isInstancedMesh&&_.instancingMorph===true&&a.morphTexture===null||a.isInstancedMesh&&_.instancingMorph===false&&a.morphTexture!==null||_.envMap!==l||r.fog===true&&_.fog!==i?S=true:_.numClippingPlanes===void 0||_.numClippingPlanes===xe.numPlanes&&_.numIntersection===xe.numIntersection?(_.vertexAlphas!==c||_.vertexTangents!==u||_.morphTargets!==d||_.morphNormals!==f||_.morphColors!==p||_.toneMapping!==m||_.morphTargetsCount!==g)&&(S=true):S=true:S=true:S=true:S=true;else{S=true;_.__version=r.version}let T=_.currentProgram;S===true&&(T=getProgram(r,t,a));let x=false;let b=false;let R=false;const A=T.getUniforms(),C=_.uniforms;if(ue.useProgram(T.program)){x=true;b=true;R=true}if(r.id!==P){P=r.id;b=true}if(x||y!==e){const t=ue.buffers.depth.getReversed();if(t){Q.copy(e.projectionMatrix);er(Q);tr(Q);A.setValue(oe,"projectionMatrix",Q)}else A.setValue(oe,"projectionMatrix",e.projectionMatrix);A.setValue(oe,"viewMatrix",e.matrixWorldInverse);const n=A.map.cameraPosition;n!==void 0&&n.setValue(oe,ee.setFromMatrixPosition(e.matrixWorld));ce.logarithmicDepthBuffer&&A.setValue(oe,"logDepthBufFC",2/(Math.log(e.far+1)/Math.LN2));(r.isMeshPhongMaterial||r.isMeshToonMaterial||r.isMeshLambertMaterial||r.isMeshBasicMaterial||r.isMeshStandardMaterial||r.isShaderMaterial)&&A.setValue(oe,"isOrthographic",e.isOrthographicCamera===true);if(y!==e){y=e;b=true;R=true}}if(a.isSkinnedMesh){A.setOptional(oe,a,"bindMatrix");A.setOptional(oe,a,"bindMatrixInverse");const e=a.skeleton;if(e){e.boneTexture===null&&e.computeBoneTexture();A.setValue(oe,"boneTexture",e.boneTexture,pe)}}if(a.isBatchedMesh){A.setOptional(oe,a,"batchingTexture");A.setValue(oe,"batchingTexture",a._matricesTexture,pe);A.setOptional(oe,a,"batchingIdTexture");A.setValue(oe,"batchingIdTexture",a._indirectTexture,pe);A.setOptional(oe,a,"batchingColorTexture");a._colorsTexture!==null&&A.setValue(oe,"batchingColorTexture",a._colorsTexture,pe)}const L=n.morphAttributes;L.position===void 0&&L.normal===void 0&&L.color===void 0||Ae.update(a,n,T);if(b||_.receiveShadow!==a.receiveShadow){_.receiveShadow=a.receiveShadow;A.setValue(oe,"receiveShadow",a.receiveShadow)}if(r.isMeshGouraudMaterial&&r.envMap!==null){C.envMap.value=l;C.flipEnvMap.value=l.isCubeTexture&&l.isRenderTargetTexture===false?-1:1}r.isMeshStandardMaterial&&r.envMap===null&&t.environment!==null&&(C.envMapIntensity.value=t.environmentIntensity);if(b){A.setValue(oe,"toneMappingExposure",M.toneMappingExposure);_.needsLights&&markUniformsLightsNeedsUpdate(C,R);i&&r.fog===true&&Se.refreshFogUniforms(C,i);Se.refreshMaterialUniforms(C,r,H,V,E.state.transmissionRenderTarget[e.id]);WebGLUniforms.upload(oe,getUniformList(_),C,pe)}if(r.isShaderMaterial&&r.uniformsNeedUpdate===true){WebGLUniforms.upload(oe,getUniformList(_),C,pe);r.uniformsNeedUpdate=false}r.isSpriteMaterial&&A.setValue(oe,"center",a.center);A.setValue(oe,"modelViewMatrix",a.modelViewMatrix);A.setValue(oe,"normalMatrix",a.normalMatrix);A.setValue(oe,"modelMatrix",a.matrixWorld);if(r.isShaderMaterial||r.isRawShaderMaterial){const e=r.uniformsGroups;for(let t=0,n=e.length;t<n;t++){const n=e[t];ye.update(n,T);ye.bind(n,T)}}return T}function markUniformsLightsNeedsUpdate(e,t){e.ambientLightColor.needsUpdate=t;e.lightProbe.needsUpdate=t;e.directionalLights.needsUpdate=t;e.directionalLightShadows.needsUpdate=t;e.pointLights.needsUpdate=t;e.pointLightShadows.needsUpdate=t;e.spotLights.needsUpdate=t;e.spotLightShadows.needsUpdate=t;e.rectAreaLights.needsUpdate=t;e.hemisphereLights.needsUpdate=t}function materialNeedsLights(e){return e.isMeshLambertMaterial||e.isMeshToonMaterial||e.isMeshPhongMaterial||e.isMeshStandardMaterial||e.isShadowMaterial||e.isShaderMaterial&&e.lights===true}this.getActiveCubeFace=function(){return A};this.getActiveMipmapLevel=function(){return C};this.getRenderTarget=function(){return U};this.setRenderTargetTextures=function(e,t,n){fe.get(e.texture).__webglTexture=t;fe.get(e.depthTexture).__webglTexture=n;const r=fe.get(e);r.__hasExternalTextures=true;r.__autoAllocateDepthBuffer=n===void 0;if(!r.__autoAllocateDepthBuffer&&se.has("WEBGL_multisampled_render_to_texture")===true){console.warn("THREE.WebGLRenderer: Render-to-texture extension was disabled because an external texture was provided");r.__useRenderToTexture=false}};this.setRenderTargetFramebuffer=function(e,t){const n=fe.get(e);n.__webglFramebuffer=t;n.__useDefaultFramebuffer=t===void 0};const Ne=oe.createFramebuffer();this.setRenderTarget=function(e,t=0,n=0){U=e;A=t;C=n;let r=true;let a=null;let i=false;let o=false;if(e){const s=fe.get(e);if(s.__useDefaultFramebuffer!==void 0){ue.bindFramebuffer(oe.FRAMEBUFFER,null);r=false}else if(s.__webglFramebuffer===void 0)pe.setupRenderTarget(e);else if(s.__hasExternalTextures)pe.rebindTextures(e,fe.get(e.texture).__webglTexture,fe.get(e.depthTexture).__webglTexture);else if(e.depthBuffer){const t=e.depthTexture;if(s.__boundDepthTexture!==t){if(t!==null&&fe.has(t)&&(e.width!==t.image.width||e.height!==t.image.height))throw new Error("WebGLRenderTarget: Attached DepthTexture is initialized to the incorrect size.");pe.setupDepthRenderbuffer(e)}}const l=e.texture;(l.isData3DTexture||l.isDataArrayTexture||l.isCompressedArrayTexture)&&(o=true);const c=fe.get(e).__webglFramebuffer;if(e.isWebGLCubeRenderTarget){a=Array.isArray(c[t])?c[t][n]:c[t];i=true}else a=e.samples>0&&pe.useMultisampledRTT(e)===false?fe.get(e).__webglMultisampledFramebuffer:Array.isArray(c)?c[n]:c;D.copy(e.viewport);w.copy(e.scissor);I=e.scissorTest}else{D.copy(z).multiplyScalar(H).floor();w.copy(X).multiplyScalar(H).floor();I=j}n!==0&&(a=Ne);const s=ue.bindFramebuffer(oe.FRAMEBUFFER,a);s&&r&&ue.drawBuffers(e,a);ue.viewport(D);ue.scissor(w);ue.setScissorTest(I);if(i){const r=fe.get(e.texture);oe.framebufferTexture2D(oe.FRAMEBUFFER,oe.COLOR_ATTACHMENT0,oe.TEXTURE_CUBE_MAP_POSITIVE_X+t,r.__webglTexture,n)}else if(o){const r=fe.get(e.texture);const a=t;oe.framebufferTextureLayer(oe.FRAMEBUFFER,oe.COLOR_ATTACHMENT0,r.__webglTexture,n,a)}else if(e!==null&&n!==0){const t=fe.get(e.texture);oe.framebufferTexture2D(oe.FRAMEBUFFER,oe.COLOR_ATTACHMENT0,oe.TEXTURE_2D,t.__webglTexture,n)}P=-1};this.readRenderTargetPixels=function(e,t,n,r,a,i,o){if(!(e&&e.isWebGLRenderTarget)){console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.");return}let s=fe.get(e).__webglFramebuffer;e.isWebGLCubeRenderTarget&&o!==void 0&&(s=s[o]);if(s){ue.bindFramebuffer(oe.FRAMEBUFFER,s);try{const o=e.texture;const s=o.format;const l=o.type;if(!ce.textureFormatReadable(s)){console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format.");return}if(!ce.textureTypeReadable(l)){console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.");return}t>=0&&t<=e.width-r&&n>=0&&n<=e.height-a&&oe.readPixels(t,n,r,a,Ue.convert(s),Ue.convert(l),i)}finally{const e=U!==null?fe.get(U).__webglFramebuffer:null;ue.bindFramebuffer(oe.FRAMEBUFFER,e)}}};this.readRenderTargetPixelsAsync=async function(e,t,n,r,a,i,o){if(!(e&&e.isWebGLRenderTarget))throw new Error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.");let s=fe.get(e).__webglFramebuffer;e.isWebGLCubeRenderTarget&&o!==void 0&&(s=s[o]);if(s){const o=e.texture;const l=o.format;const c=o.type;if(!ce.textureFormatReadable(l))throw new Error("THREE.WebGLRenderer.readRenderTargetPixelsAsync: renderTarget is not in RGBA or implementation defined format.");if(!ce.textureTypeReadable(c))throw new Error("THREE.WebGLRenderer.readRenderTargetPixelsAsync: renderTarget is not in UnsignedByteType or implementation defined type.");if(t>=0&&t<=e.width-r&&n>=0&&n<=e.height-a){ue.bindFramebuffer(oe.FRAMEBUFFER,s);const e=oe.createBuffer();oe.bindBuffer(oe.PIXEL_PACK_BUFFER,e);oe.bufferData(oe.PIXEL_PACK_BUFFER,i.byteLength,oe.STREAM_READ);oe.readPixels(t,n,r,a,Ue.convert(l),Ue.convert(c),0);const o=U!==null?fe.get(U).__webglFramebuffer:null;ue.bindFramebuffer(oe.FRAMEBUFFER,o);const u=oe.fenceSync(oe.SYNC_GPU_COMMANDS_COMPLETE,0);oe.flush();await nr(oe,u,4);oe.bindBuffer(oe.PIXEL_PACK_BUFFER,e);oe.getBufferSubData(oe.PIXEL_PACK_BUFFER,0,i);oe.deleteBuffer(e);oe.deleteSync(u);return i}throw new Error("THREE.WebGLRenderer.readRenderTargetPixelsAsync: requested read bounds are out of range.")}};this.copyFramebufferToTexture=function(e,t=null,n=0){if(e.isTexture!==true){ae("WebGLRenderer: copyFramebufferToTexture function signature has changed.");t=arguments[0]||null;e=arguments[1]}const r=Math.pow(2,-n);const a=Math.floor(e.image.width*r);const i=Math.floor(e.image.height*r);const o=t!==null?t.x:0;const s=t!==null?t.y:0;pe.setTexture2D(e,0);oe.copyTexSubImage2D(oe.TEXTURE_2D,n,0,0,o,s,a,i);ue.unbindTexture()};const Oe=oe.createFramebuffer();const Be=oe.createFramebuffer();this.copyTextureToTexture=function(e,t,n=null,r=null,a=0,i=null){if(e.isTexture!==true){ae("WebGLRenderer: copyTextureToTexture function signature has changed.");r=arguments[0]||null;e=arguments[1];t=arguments[2];i=arguments[3]||0;n=null}if(i===null)if(a!==0){ae("WebGLRenderer: copyTextureToTexture function signature has changed to support src and dst mipmap levels.");i=a;a=0}else i=0;let o,s,l,c,u,d;let f,p,m;const h=e.isCompressedTexture?e.mipmaps[i]:e.image;if(n!==null){o=n.max.x-n.min.x;s=n.max.y-n.min.y;l=n.isBox3?n.max.z-n.min.z:1;c=n.min.x;u=n.min.y;d=n.isBox3?n.min.z:0}else{const t=Math.pow(2,-a);o=Math.floor(h.width*t);s=Math.floor(h.height*t);l=e.isDataArrayTexture?h.depth:e.isData3DTexture?Math.floor(h.depth*t):1;c=0;u=0;d=0}if(r!==null){f=r.x;p=r.y;m=r.z}else{f=0;p=0;m=0}const g=Ue.convert(t.format);const _=Ue.convert(t.type);let v;if(t.isData3DTexture){pe.setTexture3D(t,0);v=oe.TEXTURE_3D}else if(t.isDataArrayTexture||t.isCompressedArrayTexture){pe.setTexture2DArray(t,0);v=oe.TEXTURE_2D_ARRAY}else{pe.setTexture2D(t,0);v=oe.TEXTURE_2D}oe.pixelStorei(oe.UNPACK_FLIP_Y_WEBGL,t.flipY);oe.pixelStorei(oe.UNPACK_PREMULTIPLY_ALPHA_WEBGL,t.premultiplyAlpha);oe.pixelStorei(oe.UNPACK_ALIGNMENT,t.unpackAlignment);const E=oe.getParameter(oe.UNPACK_ROW_LENGTH);const S=oe.getParameter(oe.UNPACK_IMAGE_HEIGHT);const T=oe.getParameter(oe.UNPACK_SKIP_PIXELS);const M=oe.getParameter(oe.UNPACK_SKIP_ROWS);const x=oe.getParameter(oe.UNPACK_SKIP_IMAGES);oe.pixelStorei(oe.UNPACK_ROW_LENGTH,h.width);oe.pixelStorei(oe.UNPACK_IMAGE_HEIGHT,h.height);oe.pixelStorei(oe.UNPACK_SKIP_PIXELS,c);oe.pixelStorei(oe.UNPACK_SKIP_ROWS,u);oe.pixelStorei(oe.UNPACK_SKIP_IMAGES,d);const b=e.isDataArrayTexture||e.isData3DTexture;const R=t.isDataArrayTexture||t.isData3DTexture;if(e.isDepthTexture){const n=fe.get(e);const r=fe.get(t);const h=fe.get(n.__renderTarget);const g=fe.get(r.__renderTarget);ue.bindFramebuffer(oe.READ_FRAMEBUFFER,h.__webglFramebuffer);ue.bindFramebuffer(oe.DRAW_FRAMEBUFFER,g.__webglFramebuffer);for(let n=0;n<l;n++){if(b){oe.framebufferTextureLayer(oe.READ_FRAMEBUFFER,oe.COLOR_ATTACHMENT0,fe.get(e).__webglTexture,a,d+n);oe.framebufferTextureLayer(oe.DRAW_FRAMEBUFFER,oe.COLOR_ATTACHMENT0,fe.get(t).__webglTexture,i,m+n)}oe.blitFramebuffer(c,u,o,s,f,p,o,s,oe.DEPTH_BUFFER_BIT,oe.NEAREST)}ue.bindFramebuffer(oe.READ_FRAMEBUFFER,null);ue.bindFramebuffer(oe.DRAW_FRAMEBUFFER,null)}else if(a!==0||e.isRenderTargetTexture||fe.has(e)){const n=fe.get(e);const r=fe.get(t);ue.bindFramebuffer(oe.READ_FRAMEBUFFER,Oe);ue.bindFramebuffer(oe.DRAW_FRAMEBUFFER,Be);for(let e=0;e<l;e++){b?oe.framebufferTextureLayer(oe.READ_FRAMEBUFFER,oe.COLOR_ATTACHMENT0,n.__webglTexture,a,d+e):oe.framebufferTexture2D(oe.READ_FRAMEBUFFER,oe.COLOR_ATTACHMENT0,oe.TEXTURE_2D,n.__webglTexture,a);R?oe.framebufferTextureLayer(oe.DRAW_FRAMEBUFFER,oe.COLOR_ATTACHMENT0,r.__webglTexture,i,m+e):oe.framebufferTexture2D(oe.DRAW_FRAMEBUFFER,oe.COLOR_ATTACHMENT0,oe.TEXTURE_2D,r.__webglTexture,i);a!==0?oe.blitFramebuffer(c,u,o,s,f,p,o,s,oe.COLOR_BUFFER_BIT,oe.NEAREST):R?oe.copyTexSubImage3D(v,i,f,p,m+e,c,u,o,s):oe.copyTexSubImage2D(v,i,f,p,c,u,o,s)}ue.bindFramebuffer(oe.READ_FRAMEBUFFER,null);ue.bindFramebuffer(oe.DRAW_FRAMEBUFFER,null)}else R?e.isDataTexture||e.isData3DTexture?oe.texSubImage3D(v,i,f,p,m,o,s,l,g,_,h.data):t.isCompressedArrayTexture?oe.compressedTexSubImage3D(v,i,f,p,m,o,s,l,g,h.data):oe.texSubImage3D(v,i,f,p,m,o,s,l,g,_,h):e.isDataTexture?oe.texSubImage2D(oe.TEXTURE_2D,i,f,p,o,s,g,_,h.data):e.isCompressedTexture?oe.compressedTexSubImage2D(oe.TEXTURE_2D,i,f,p,h.width,h.height,g,h.data):oe.texSubImage2D(oe.TEXTURE_2D,i,f,p,o,s,g,_,h);oe.pixelStorei(oe.UNPACK_ROW_LENGTH,E);oe.pixelStorei(oe.UNPACK_IMAGE_HEIGHT,S);oe.pixelStorei(oe.UNPACK_SKIP_PIXELS,T);oe.pixelStorei(oe.UNPACK_SKIP_ROWS,M);oe.pixelStorei(oe.UNPACK_SKIP_IMAGES,x);i===0&&t.generateMipmaps&&oe.generateMipmap(v);ue.unbindTexture()};this.copyTextureToTexture3D=function(e,t,n=null,r=null,a=0){if(e.isTexture!==true){ae("WebGLRenderer: copyTextureToTexture3D function signature has changed.");n=arguments[0]||null;r=arguments[1]||null;e=arguments[2];t=arguments[3];a=arguments[4]||0}ae('WebGLRenderer: copyTextureToTexture3D function has been deprecated. Use "copyTextureToTexture" instead.');return this.copyTextureToTexture(e,t,n,r,a)};this.initRenderTarget=function(e){fe.get(e).__webglFramebuffer===void 0&&pe.setupRenderTarget(e)};this.initTexture=function(e){e.isCubeTexture?pe.setTextureCube(e,0):e.isData3DTexture?pe.setTexture3D(e,0):e.isDataArrayTexture||e.isCompressedArrayTexture?pe.setTexture2DArray(e,0):pe.setTexture2D(e,0);ue.unbindTexture()};this.resetState=function(){A=0;C=0;U=null;ue.reset();Pe.reset()};typeof __THREE_DEVTOOLS__!=="undefined"&&__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("observe",{detail:this}))}get coordinateSystem(){return rr}get outputColorSpace(){return this._outputColorSpace}set outputColorSpace(e){this._outputColorSpace=e;const t=this.getContext();t.drawingBufferColorspace=b._getDrawingBufferColorSpace(e);t.unpackColorSpace=b._getUnpackColorSpace()}}export{Me as ACESFilmicToneMapping,Je as AddEquation,Ue as AddOperation,Rt as AdditiveBlending,Te as AgXToneMapping,nn as AlphaFormat,Vt as AlwaysCompare,Xe as AlwaysDepth,Kn as ArrayCamera,x as BackSide,S as BoxGeometry,te as BufferAttribute,J as BufferGeometry,Jt as ByteType,xe as CineonToneMapping,wt as ClampToEdgeWrapping,a as Color,b as ColorManagement,St as ConstantAlphaFactor,vt as ConstantColorFactor,W as CubeReflectionMapping,z as CubeRefractionMapping,ge as CubeTexture,v as CubeUVReflectionMapping,Qe as CullFaceBack,Ct as CullFaceFront,At as CullFaceNone,Mt as CustomBlending,Ee as CustomToneMapping,he as Data3DTexture,ue as DataArrayTexture,Kt as DepthFormat,Yt as DepthStencilFormat,me as DepthTexture,Fe as DoubleSide,pt as DstAlphaFactor,dt as DstColorFactor,Wt as EqualCompare,qe as EqualDepth,V as EquirectangularReflectionMapping,k as EquirectangularRefractionMapping,c as Euler,qn as EventDispatcher,B as FloatType,L as FrontSide,Ge as Frustum,De as GLSL3,zt as GreaterCompare,Ye as GreaterDepth,kt as GreaterEqualCompare,$e as GreaterEqualDepth,Yn as Group,O as HalfFloatType,y as IntType,we as Layers,Ht as LessCompare,je as LessDepth,_e as LessEqualCompare,Ze as LessEqualDepth,Y as LinearFilter,Bt as LinearMipmapLinearFilter,Ft as LinearMipmapNearestFilter,q as LinearSRGBColorSpace,Re as LinearToneMapping,ve as LinearTransfer,on as LuminanceAlphaFormat,an as LuminanceFormat,i as Matrix3,f as Matrix4,it as MaxEquation,E as Mesh,Q as MeshBasicMaterial,Ve as MeshDepthMaterial,We as MeshDistanceMaterial,rt as MinEquation,It as MirroredRepeatWrapping,Pe as MixOperation,xt as MultiplyBlending,ye as MultiplyOperation,ke as NearestFilter,Ot as NearestMipmapLinearFilter,Nt as NearestMipmapNearestFilter,Se as NeutralToneMapping,Gt as NeverCompare,ze as NeverDepth,re as NoBlending,jt as NoColorSpace,Z as NoToneMapping,Oe as NormalBlending,Xt as NotEqualCompare,Ke as NotEqualDepth,Ie as ObjectSpaceNormalMap,st as OneFactor,Tt as OneMinusConstantAlphaFactor,Et as OneMinusConstantColorFactor,_t as OneMinusDstAlphaFactor,gt as OneMinusDstColorFactor,ht as OneMinusSrcAlphaFactor,mt as OneMinusSrcColorFactor,j as OrthographicCamera,Ae as PCFShadowMap,Ce as PCFSoftShadowMap,PMREMGenerator,K as PerspectiveCamera,G as Plane,C as PlaneGeometry,Xn as RED_GREEN_RGTC2_Format,kn as RED_RGTC1_Format,Jn as REVISION,He as RGBADepthPacking,N as RGBAFormat,mn as RGBAIntegerFormat,Fn as RGBA_ASTC_10x10_Format,In as RGBA_ASTC_10x5_Format,Nn as RGBA_ASTC_10x6_Format,On as RGBA_ASTC_10x8_Format,Bn as RGBA_ASTC_12x10_Format,Gn as RGBA_ASTC_12x12_Format,An as RGBA_ASTC_4x4_Format,Cn as RGBA_ASTC_5x4_Format,Ln as RGBA_ASTC_5x5_Format,Un as RGBA_ASTC_6x5_Format,Pn as RGBA_ASTC_6x6_Format,yn as RGBA_ASTC_8x5_Format,Dn as RGBA_ASTC_8x6_Format,wn as RGBA_ASTC_8x8_Format,Vn as RGBA_BPTC_Format,Rn as RGBA_ETC2_EAC_Format,Mn as RGBA_PVRTC_2BPPV1_Format,Tn as RGBA_PVRTC_4BPPV1_Format,gn as RGBA_S3TC_DXT1_Format,_n as RGBA_S3TC_DXT3_Format,vn as RGBA_S3TC_DXT5_Format,rn as RGBFormat,Hn as RGB_BPTC_SIGNED_Format,Wn as RGB_BPTC_UNSIGNED_Format,xn as RGB_ETC1_Format,bn as RGB_ETC2_Format,Sn as RGB_PVRTC_2BPPV1_Format,En as RGB_PVRTC_4BPPV1_Format,hn as RGB_S3TC_DXT1_Format,un as RGFormat,pn as RGIntegerFormat,sn as RedFormat,ln as RedIntegerFormat,be as ReinhardToneMapping,Dt as RepeatWrapping,nt as ReverseSubtractEquation,jn as SIGNED_RED_GREEN_RGTC2_Format,zn as SIGNED_RED_RGTC1_Format,Qn as SRGBColorSpace,R as SRGBTransfer,Ki as ShaderChunk,$i as ShaderLib,T as ShaderMaterial,tn as ShortType,ct as SrcAlphaFactor,ut as SrcAlphaSaturateFactor,lt as SrcColorFactor,tt as SubtractEquation,bt as SubtractiveBlending,Ne as TangentSpaceNormalMap,pe as Texture,se as Uint16BufferAttribute,oe as Uint32BufferAttribute,Zi as UniformsLib,Be as UniformsUtils,F as UnsignedByteType,Pt as UnsignedInt248Type,Qt as UnsignedInt5999Type,Ut as UnsignedIntType,Zt as UnsignedShort4444Type,$t as UnsignedShort5551Type,yt as UnsignedShortType,Le as VSMShadowMap,o as Vector2,l as Vector3,le as Vector4,rr as WebGLCoordinateSystem,X as WebGLCubeRenderTarget,ne as WebGLRenderTarget,WebGLRenderer,WebGLUtils,ot as ZeroFactor,$n as createCanvasElement};

